
STM32F407_SuperSonicSensorV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a540  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a6c8  0800a6c8  0000b6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e4  0800a6e4  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a6e4  0800a6e4  0000b6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6ec  0800a6ec  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6ec  0800a6ec  0000b6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a6f0  0800a6f0  0000b6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a6f4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000ac0  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b3c  20000b3c  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c90  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e04  00000000  00000000  00025d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  00029b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119a  00000000  00000000  0002b200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243c6  00000000  00000000  0002c39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dac2  00000000  00000000  00050760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d418a  00000000  00000000  0006e222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001423ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063f8  00000000  00000000  001423f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  001487e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a6b0 	.word	0x0800a6b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a6b0 	.word	0x0800a6b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fe5c 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f840 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fa3e 	bl	8000980 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f8a6 	bl	8000654 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8d2 	bl	80006b0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f900 	bl	8000710 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f009 fc78 	bl	8009e04 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000514:	f000 f932 	bl	800077c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000518:	f000 f9e0 	bl	80008dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800051c:	2100      	movs	r1, #0
 800051e:	4815      	ldr	r0, [pc, #84]	@ (8000574 <main+0x80>)
 8000520:	f005 f804 	bl	800552c <HAL_TIM_IC_Start_IT>
HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
 8000524:	2100      	movs	r1, #0
 8000526:	4814      	ldr	r0, [pc, #80]	@ (8000578 <main+0x84>)
 8000528:	f005 f982 	bl	8005830 <HAL_TIM_OnePulse_Start>

HAL_GPIO_WritePin(Pulse_Trig_GPIO_Port, Pulse_Trig_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000532:	4812      	ldr	r0, [pc, #72]	@ (800057c <main+0x88>)
 8000534:	f001 f982 	bl	800183c <HAL_GPIO_WritePin>
HAL_Delay(1000);
 8000538:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800053c:	f000 feac 	bl	8001298 <HAL_Delay>
HAL_GPIO_WritePin(Pulse_Trig_GPIO_Port, Pulse_Trig_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000546:	480d      	ldr	r0, [pc, #52]	@ (800057c <main+0x88>)
 8000548:	f001 f978 	bl	800183c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(Pulse_Trig_GPIO_Port, Pulse_Trig_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000552:	480a      	ldr	r0, [pc, #40]	@ (800057c <main+0x88>)
 8000554:	f001 f972 	bl	800183c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000558:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800055c:	f000 fe9c 	bl	8001298 <HAL_Delay>
	  HAL_GPIO_WritePin(Pulse_Trig_GPIO_Port, Pulse_Trig_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000566:	4805      	ldr	r0, [pc, #20]	@ (800057c <main+0x88>)
 8000568:	f001 f968 	bl	800183c <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800056c:	f009 fc70 	bl	8009e50 <MX_USB_HOST_Process>
	  HAL_GPIO_WritePin(Pulse_Trig_GPIO_Port, Pulse_Trig_Pin, GPIO_PIN_RESET);
 8000570:	bf00      	nop
 8000572:	e7eb      	b.n	800054c <main+0x58>
 8000574:	200001d4 	.word	0x200001d4
 8000578:	2000018c 	.word	0x2000018c
 800057c:	40021000 	.word	0x40021000

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	@ 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f00a f800 	bl	800a594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	@ (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	@ (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	@ (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	@ (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	@ (8000650 <SystemClock_Config+0xd0>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fe:	2307      	movs	r3, #7
 8000600:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f84a 	bl	80046a0 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000612:	f000 fb0b 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000622:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2105      	movs	r1, #5
 8000634:	4618      	mov	r0, r3
 8000636:	f004 faab 	bl	8004b90 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000640:	f000 faf4 	bl	8000c2c <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	@ 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065e:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	@ (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f003 fa21 	bl	8003ad8 <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 fac6 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000098 	.word	0x20000098
 80006a8:	40005400 	.word	0x40005400
 80006ac:	000186a0 	.word	0x000186a0

080006b0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <MX_I2S3_Init+0x54>)
 80006b6:	4a14      	ldr	r2, [pc, #80]	@ (8000708 <MX_I2S3_Init+0x58>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2S3_Init+0x54>)
 80006bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_I2S3_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <MX_I2S3_Init+0x54>)
 80006d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_I2S3_Init+0x54>)
 80006d8:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <MX_I2S3_Init+0x5c>)
 80006da:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_I2S3_Init+0x54>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_I2S3_Init+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_I2S3_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_I2S3_Init+0x54>)
 80006f0:	f003 fb36 	bl	8003d60 <HAL_I2S_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006fa:	f000 fa97 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000ec 	.word	0x200000ec
 8000708:	40003c00 	.word	0x40003c00
 800070c:	00017700 	.word	0x00017700

08000710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <MX_SPI1_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_SPI1_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_SPI1_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000762:	f004 fd63 	bl	800522c <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800076c:	f000 fa5e 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000134 	.word	0x20000134
 8000778:	40013000 	.word	0x40013000

0800077c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	@ 0x58
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000782:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000792:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
 80007ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b0:	463b      	mov	r3, r7
 80007b2:	2220      	movs	r2, #32
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f009 feec 	bl	800a594 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007bc:	4b45      	ldr	r3, [pc, #276]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80007be:	4a46      	ldr	r2, [pc, #280]	@ (80008d8 <MX_TIM1_Init+0x15c>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80007c2:	4b44      	ldr	r3, [pc, #272]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80007c4:	22a7      	movs	r2, #167	@ 0xa7
 80007c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b42      	ldr	r3, [pc, #264]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 80007ce:	4b41      	ldr	r3, [pc, #260]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80007d0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80007d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d6:	4b3f      	ldr	r3, [pc, #252]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007dc:	4b3d      	ldr	r3, [pc, #244]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b3c      	ldr	r3, [pc, #240]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007e8:	483a      	ldr	r0, [pc, #232]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80007ea:	f004 fda8 	bl	800533e <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007f4:	f000 fa1a 	bl	8000c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f8:	4836      	ldr	r0, [pc, #216]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80007fa:	f004 fdef 	bl	80053dc <HAL_TIM_PWM_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000804:	f000 fa12 	bl	8000c2c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000808:	2108      	movs	r1, #8
 800080a:	4832      	ldr	r0, [pc, #200]	@ (80008d4 <MX_TIM1_Init+0x158>)
 800080c:	f004 ffb6 	bl	800577c <HAL_TIM_OnePulse_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000816:	f000 fa09 	bl	8000c2c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800081a:	2306      	movs	r3, #6
 800081c:	647b      	str	r3, [r7, #68]	@ 0x44
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800081e:	2360      	movs	r3, #96	@ 0x60
 8000820:	64bb      	str	r3, [r7, #72]	@ 0x48
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000822:	2300      	movs	r3, #0
 8000824:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sSlaveConfig.TriggerFilter = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800082a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800082e:	4619      	mov	r1, r3
 8000830:	4828      	ldr	r0, [pc, #160]	@ (80008d4 <MX_TIM1_Init+0x158>)
 8000832:	f005 faad 	bl	8005d90 <HAL_TIM_SlaveConfigSynchro>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800083c:	f000 f9f6 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000848:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800084c:	4619      	mov	r1, r3
 800084e:	4821      	ldr	r0, [pc, #132]	@ (80008d4 <MX_TIM1_Init+0x158>)
 8000850:	f006 f808 	bl	8006864 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 800085a:	f000 f9e7 	bl	8000c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800085e:	2370      	movs	r3, #112	@ 0x70
 8000860:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800086a:	2300      	movs	r3, #0
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <MX_TIM1_Init+0x158>)
 8000884:	f005 f9c2 	bl	8005c0c <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800088e:	f000 f9cd 	bl	8000c2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80008b6:	f006 f851 	bl	800695c <HAL_TIMEx_ConfigBreakDeadTime>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80008c0:	f000 f9b4 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008c4:	4803      	ldr	r0, [pc, #12]	@ (80008d4 <MX_TIM1_Init+0x158>)
 80008c6:	f000 fb85 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 80008ca:	bf00      	nop
 80008cc:	3758      	adds	r7, #88	@ 0x58
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000018c 	.word	0x2000018c
 80008d8:	40010000 	.word	0x40010000

080008dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f8:	4b20      	ldr	r3, [pc, #128]	@ (800097c <MX_TIM2_Init+0xa0>)
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000900:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <MX_TIM2_Init+0xa0>)
 8000902:	2253      	movs	r2, #83	@ 0x53
 8000904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <MX_TIM2_Init+0xa0>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <MX_TIM2_Init+0xa0>)
 800090e:	f04f 32ff 	mov.w	r2, #4294967295
 8000912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b19      	ldr	r3, [pc, #100]	@ (800097c <MX_TIM2_Init+0xa0>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_TIM2_Init+0xa0>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000920:	4816      	ldr	r0, [pc, #88]	@ (800097c <MX_TIM2_Init+0xa0>)
 8000922:	f004 fdb4 	bl	800548e <HAL_TIM_IC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800092c:	f000 f97e 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4619      	mov	r1, r3
 800093e:	480f      	ldr	r0, [pc, #60]	@ (800097c <MX_TIM2_Init+0xa0>)
 8000940:	f005 ff90 	bl	8006864 <HAL_TIMEx_MasterConfigSynchronization>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800094a:	f000 f96f 	bl	8000c2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800094e:	230a      	movs	r3, #10
 8000950:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000952:	2301      	movs	r3, #1
 8000954:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	2200      	movs	r2, #0
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_TIM2_Init+0xa0>)
 8000966:	f005 f8b5 	bl	8005ad4 <HAL_TIM_IC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000970:	f000 f95c 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200001d4 	.word	0x200001d4

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	@ 0x30
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	4b73      	ldr	r3, [pc, #460]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a72      	ldr	r2, [pc, #456]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b70      	ldr	r3, [pc, #448]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	4b6c      	ldr	r3, [pc, #432]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a6b      	ldr	r2, [pc, #428]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b69      	ldr	r3, [pc, #420]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b65      	ldr	r3, [pc, #404]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a64      	ldr	r2, [pc, #400]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b62      	ldr	r3, [pc, #392]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b5e      	ldr	r3, [pc, #376]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	4a5d      	ldr	r2, [pc, #372]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fa:	4b5b      	ldr	r3, [pc, #364]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b57      	ldr	r3, [pc, #348]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	4a56      	ldr	r2, [pc, #344]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a16:	4b54      	ldr	r3, [pc, #336]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b50      	ldr	r3, [pc, #320]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a4f      	ldr	r2, [pc, #316]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 8000a2c:	f043 0308 	orr.w	r3, r3, #8
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b4d      	ldr	r3, [pc, #308]	@ (8000b68 <MX_GPIO_Init+0x1e8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|Pulse_Trig_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8000a44:	4849      	ldr	r0, [pc, #292]	@ (8000b6c <MX_GPIO_Init+0x1ec>)
 8000a46:	f000 fef9 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4848      	ldr	r0, [pc, #288]	@ (8000b70 <MX_GPIO_Init+0x1f0>)
 8000a50:	f000 fef4 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a54:	2200      	movs	r2, #0
 8000a56:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a5a:	4846      	ldr	r0, [pc, #280]	@ (8000b74 <MX_GPIO_Init+0x1f4>)
 8000a5c:	f000 feee 	bl	800183c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin Pulse_Trig_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|Pulse_Trig_Pin;
 8000a60:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	483c      	ldr	r0, [pc, #240]	@ (8000b6c <MX_GPIO_Init+0x1ec>)
 8000a7a:	f000 fd43 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4836      	ldr	r0, [pc, #216]	@ (8000b70 <MX_GPIO_Init+0x1f0>)
 8000a96:	f000 fd35 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	482e      	ldr	r0, [pc, #184]	@ (8000b70 <MX_GPIO_Init+0x1f0>)
 8000ab6:	f000 fd25 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000abe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4619      	mov	r1, r3
 8000ace:	482a      	ldr	r0, [pc, #168]	@ (8000b78 <MX_GPIO_Init+0x1f8>)
 8000ad0:	f000 fd18 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4825      	ldr	r0, [pc, #148]	@ (8000b7c <MX_GPIO_Init+0x1fc>)
 8000ae8:	f000 fd0c 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afe:	2305      	movs	r3, #5
 8000b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	481c      	ldr	r0, [pc, #112]	@ (8000b7c <MX_GPIO_Init+0x1fc>)
 8000b0a:	f000 fcfb 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b0e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b12:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4813      	ldr	r0, [pc, #76]	@ (8000b74 <MX_GPIO_Init+0x1f4>)
 8000b28:	f000 fcec 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480d      	ldr	r0, [pc, #52]	@ (8000b74 <MX_GPIO_Init+0x1f4>)
 8000b40:	f000 fce0 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b48:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <MX_GPIO_Init+0x1ec>)
 8000b5a:	f000 fcd3 	bl	8001504 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3730      	adds	r7, #48	@ 0x30
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400

08000b80 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)	{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == 0)	{
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10a      	bne.n	8000ba6 <HAL_TIM_IC_CaptureCallback+0x26>
		gCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000b90:	2100      	movs	r1, #0
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f005 f93e 	bl	8005e14 <HAL_TIM_ReadCapturedValue>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c14 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000b9c:	6013      	str	r3, [r2, #0]
		gCaptureFlag = 1;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
			gPeriod = (0xFFFF - gCaptureValue1) + gCaptureValue2 + 1;
		}
		gCaptureFlag = 0;
		gDistance =(float)gPeriod/58;
	}
}
 8000ba4:	e031      	b.n	8000c0a <HAL_TIM_IC_CaptureCallback+0x8a>
	else if (gCaptureFlag == 1)	{
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d12d      	bne.n	8000c0a <HAL_TIM_IC_CaptureCallback+0x8a>
		gCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f005 f92f 	bl	8005e14 <HAL_TIM_ReadCapturedValue>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000bba:	6013      	str	r3, [r2, #0]
		if (gCaptureValue2 > gCaptureValue1)	{
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b14      	ldr	r3, [pc, #80]	@ (8000c14 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d907      	bls.n	8000bd8 <HAL_TIM_IC_CaptureCallback+0x58>
			gPeriod = gCaptureValue2 - gCaptureValue1;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	4a13      	ldr	r2, [pc, #76]	@ (8000c20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e008      	b.n	8000bea <HAL_TIM_IC_CaptureCallback+0x6a>
			gPeriod = (0xFFFF - gCaptureValue1) + gCaptureValue2 + 1;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c14 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000be6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000be8:	6013      	str	r3, [r2, #0]
		gCaptureFlag = 0;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
		gDistance =(float)gPeriod/58;
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	ee07 3a90 	vmov	s15, r3
 8000bf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bfc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000c24 <HAL_TIM_IC_CaptureCallback+0xa4>
 8000c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000c06:	edc3 7a00 	vstr	s15, [r3]
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000021c 	.word	0x2000021c
 8000c18:	20000228 	.word	0x20000228
 8000c1c:	20000220 	.word	0x20000220
 8000c20:	20000224 	.word	0x20000224
 8000c24:	42680000 	.word	0x42680000
 8000c28:	2000022c 	.word	0x2000022c

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <Error_Handler+0x8>

08000c38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a0f      	ldr	r2, [pc, #60]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c76:	2007      	movs	r0, #7
 8000c78:	f000 fc02 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	@ 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	@ (8000d0c <HAL_I2C_MspInit+0x84>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d12c      	bne.n	8000d04 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b18      	ldr	r3, [pc, #96]	@ (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a17      	ldr	r2, [pc, #92]	@ (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cc6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ccc:	2312      	movs	r3, #18
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <HAL_I2C_MspInit+0x8c>)
 8000ce4:	f000 fc0e 	bl	8001504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cf2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <HAL_I2C_MspInit+0x88>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	@ 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400

08000d18 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	@ 0x38
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a31      	ldr	r2, [pc, #196]	@ (8000e08 <HAL_I2S_MspInit+0xf0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d15a      	bne.n	8000dfe <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d4c:	23c0      	movs	r3, #192	@ 0xc0
 8000d4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 f925 	bl	8004fa8 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d64:	f7ff ff62 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	4a26      	ldr	r2, [pc, #152]	@ (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d78:	4b24      	ldr	r3, [pc, #144]	@ (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	4b20      	ldr	r3, [pc, #128]	@ (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d94:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a18      	ldr	r2, [pc, #96]	@ (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db0:	4b16      	ldr	r3, [pc, #88]	@ (8000e0c <HAL_I2S_MspInit+0xf4>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dcc:	2306      	movs	r3, #6
 8000dce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480e      	ldr	r0, [pc, #56]	@ (8000e10 <HAL_I2S_MspInit+0xf8>)
 8000dd8:	f000 fb94 	bl	8001504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ddc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000de0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dee:	2306      	movs	r3, #6
 8000df0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	4806      	ldr	r0, [pc, #24]	@ (8000e14 <HAL_I2S_MspInit+0xfc>)
 8000dfa:	f000 fb83 	bl	8001504 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000dfe:	bf00      	nop
 8000e00:	3738      	adds	r7, #56	@ 0x38
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40003c00 	.word	0x40003c00
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020800 	.word	0x40020800

08000e18 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	@ 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a19      	ldr	r2, [pc, #100]	@ (8000e9c <HAL_SPI_MspInit+0x84>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d12b      	bne.n	8000e92 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_SPI_MspInit+0x88>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e72:	23e0      	movs	r3, #224	@ 0xe0
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e82:	2305      	movs	r3, #5
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e8e:	f000 fb39 	bl	8001504 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	@ 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40013000 	.word	0x40013000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a19      	ldr	r2, [pc, #100]	@ (8000f2c <HAL_TIM_Base_MspInit+0x84>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d12c      	bne.n	8000f24 <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <HAL_TIM_Base_MspInit+0x88>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	4a17      	ldr	r2, [pc, #92]	@ (8000f30 <HAL_TIM_Base_MspInit+0x88>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <HAL_TIM_Base_MspInit+0x88>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <HAL_TIM_Base_MspInit+0x88>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <HAL_TIM_Base_MspInit+0x88>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_TIM_Base_MspInit+0x88>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000f20:	f000 faf0 	bl	8001504 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	@ 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f58:	d134      	bne.n	8000fc4 <HAL_TIM_IC_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <HAL_TIM_IC_MspInit+0x94>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	4a1a      	ldr	r2, [pc, #104]	@ (8000fcc <HAL_TIM_IC_MspInit+0x94>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <HAL_TIM_IC_MspInit+0x94>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <HAL_TIM_IC_MspInit+0x94>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <HAL_TIM_IC_MspInit+0x94>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_TIM_IC_MspInit+0x94>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	4808      	ldr	r0, [pc, #32]	@ (8000fd0 <HAL_TIM_IC_MspInit+0x98>)
 8000fb0:	f000 faa8 	bl	8001504 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	201c      	movs	r0, #28
 8000fba:	f000 fa6c 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fbe:	201c      	movs	r0, #28
 8000fc0:	f000 fa85 	bl	80014ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	@ 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a12      	ldr	r2, [pc, #72]	@ (800103c <HAL_TIM_MspPostInit+0x68>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d11e      	bne.n	8001034 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001012:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001024:	2301      	movs	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	@ (8001044 <HAL_TIM_MspPostInit+0x70>)
 8001030:	f000 fa68 	bl	8001504 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010000 	.word	0x40010000
 8001040:	40023800 	.word	0x40023800
 8001044:	40021000 	.word	0x40021000

08001048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <NMI_Handler+0x4>

08001050 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <MemManage_Handler+0x4>

08001060 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <UsageFault_Handler+0x4>

08001070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 f8db 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ac:	4802      	ldr	r0, [pc, #8]	@ (80010b8 <TIM2_IRQHandler+0x10>)
 80010ae:	f004 fc21 	bl	80058f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200001d4 	.word	0x200001d4

080010bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010c0:	4802      	ldr	r0, [pc, #8]	@ (80010cc <OTG_FS_IRQHandler+0x10>)
 80010c2:	f000 feb5 	bl	8001e30 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000614 	.word	0x20000614

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f009 fa60 	bl	800a5c4 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20020000 	.word	0x20020000
 8001130:	00000400 	.word	0x00000400
 8001134:	20000230 	.word	0x20000230
 8001138:	20000b40 	.word	0x20000b40

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001160:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001198 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001164:	f7ff ffea 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	@ (80011a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	@ (80011ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f009 fa1f 	bl	800a5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001192:	f7ff f9af 	bl	80004f4 <main>
  bx  lr    
 8001196:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001198:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80011a4:	0800a6f4 	.word	0x0800a6f4
  ldr r2, =_sbss
 80011a8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80011ac:	20000b3c 	.word	0x20000b3c

080011b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <HAL_Init+0x40>)
 80011be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <HAL_Init+0x40>)
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	@ (80011f4 <HAL_Init+0x40>)
 80011d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f94f 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fd26 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023c00 	.word	0x40023c00

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f967 	bl	80014ea <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 f92f 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000000 	.word	0x20000000
 8001250:	20000008 	.word	0x20000008
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008
 800127c:	20000234 	.word	0x20000234

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000234 	.word	0x20000234

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4907      	ldr	r1, [pc, #28]	@ (800137c <__NVIC_EnableIRQ+0x38>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	@ (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	@ (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	@ 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
         );
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	@ 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff8e 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	@ (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	@ (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff29 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff3e 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff8e 	bl	80013d4 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff31 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b089      	sub	sp, #36	@ 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	e16b      	b.n	80017f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001520:	2201      	movs	r2, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	429a      	cmp	r2, r3
 800153a:	f040 815a 	bne.w	80017f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d005      	beq.n	8001556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001552:	2b02      	cmp	r3, #2
 8001554:	d130      	bne.n	80015b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800158c:	2201      	movs	r2, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 0201 	and.w	r2, r3, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d017      	beq.n	80015f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d123      	bne.n	8001648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3208      	adds	r2, #8
 8001608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	08da      	lsrs	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3208      	adds	r2, #8
 8001642:	69b9      	ldr	r1, [r7, #24]
 8001644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0203 	and.w	r2, r3, #3
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 80b4 	beq.w	80017f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b60      	ldr	r3, [pc, #384]	@ (8001810 <HAL_GPIO_Init+0x30c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	4a5f      	ldr	r2, [pc, #380]	@ (8001810 <HAL_GPIO_Init+0x30c>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001698:	6453      	str	r3, [r2, #68]	@ 0x44
 800169a:	4b5d      	ldr	r3, [pc, #372]	@ (8001810 <HAL_GPIO_Init+0x30c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001814 <HAL_GPIO_Init+0x310>)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a52      	ldr	r2, [pc, #328]	@ (8001818 <HAL_GPIO_Init+0x314>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d02b      	beq.n	800172a <HAL_GPIO_Init+0x226>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a51      	ldr	r2, [pc, #324]	@ (800181c <HAL_GPIO_Init+0x318>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d025      	beq.n	8001726 <HAL_GPIO_Init+0x222>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a50      	ldr	r2, [pc, #320]	@ (8001820 <HAL_GPIO_Init+0x31c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01f      	beq.n	8001722 <HAL_GPIO_Init+0x21e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001824 <HAL_GPIO_Init+0x320>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <HAL_GPIO_Init+0x21a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001828 <HAL_GPIO_Init+0x324>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x216>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4d      	ldr	r2, [pc, #308]	@ (800182c <HAL_GPIO_Init+0x328>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x212>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001830 <HAL_GPIO_Init+0x32c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x20e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4b      	ldr	r2, [pc, #300]	@ (8001834 <HAL_GPIO_Init+0x330>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x20a>
 800170a:	2307      	movs	r3, #7
 800170c:	e00e      	b.n	800172c <HAL_GPIO_Init+0x228>
 800170e:	2308      	movs	r3, #8
 8001710:	e00c      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001712:	2306      	movs	r3, #6
 8001714:	e00a      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001716:	2305      	movs	r3, #5
 8001718:	e008      	b.n	800172c <HAL_GPIO_Init+0x228>
 800171a:	2304      	movs	r3, #4
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x228>
 800171e:	2303      	movs	r3, #3
 8001720:	e004      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001722:	2302      	movs	r3, #2
 8001724:	e002      	b.n	800172c <HAL_GPIO_Init+0x228>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_GPIO_Init+0x228>
 800172a:	2300      	movs	r3, #0
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f002 0203 	and.w	r2, r2, #3
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	4093      	lsls	r3, r2
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173c:	4935      	ldr	r1, [pc, #212]	@ (8001814 <HAL_GPIO_Init+0x310>)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174a:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <HAL_GPIO_Init+0x334>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176e:	4a32      	ldr	r2, [pc, #200]	@ (8001838 <HAL_GPIO_Init+0x334>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001774:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <HAL_GPIO_Init+0x334>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001798:	4a27      	ldr	r2, [pc, #156]	@ (8001838 <HAL_GPIO_Init+0x334>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800179e:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <HAL_GPIO_Init+0x334>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001838 <HAL_GPIO_Init+0x334>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_GPIO_Init+0x334>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ec:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <HAL_GPIO_Init+0x334>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3301      	adds	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	f67f ae90 	bls.w	8001520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	40013800 	.word	0x40013800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40021400 	.word	0x40021400
 8001830:	40021800 	.word	0x40021800
 8001834:	40021c00 	.word	0x40021c00
 8001838:	40013c00 	.word	0x40013c00

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	619a      	str	r2, [r3, #24]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af02      	add	r7, sp, #8
 8001874:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e059      	b.n	8001934 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f008 fb10 	bl	8009ec0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2203      	movs	r2, #3
 80018a4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ae:	d102      	bne.n	80018b6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 f929 	bl	8006b12 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7c1a      	ldrb	r2, [r3, #16]
 80018c8:	f88d 2000 	strb.w	r2, [sp]
 80018cc:	3304      	adds	r3, #4
 80018ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d0:	f005 f8aa 	bl	8006a28 <USB_CoreInit>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2202      	movs	r2, #2
 80018de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e026      	b.n	8001934 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2101      	movs	r1, #1
 80018ec:	4618      	mov	r0, r3
 80018ee:	f005 f921 	bl	8006b34 <USB_SetCurrentMode>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e017      	b.n	8001934 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7c1a      	ldrb	r2, [r3, #16]
 800190c:	f88d 2000 	strb.w	r2, [sp]
 8001910:	3304      	adds	r3, #4
 8001912:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001914:	f005 fac4 	bl	8006ea0 <USB_HostInit>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e004      	b.n	8001934 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b08b      	sub	sp, #44	@ 0x2c
 8001940:	af04      	add	r7, sp, #16
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	70fb      	strb	r3, [r7, #3]
 800194e:	460b      	mov	r3, r1
 8001950:	70bb      	strb	r3, [r7, #2]
 8001952:	4613      	mov	r3, r2
 8001954:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001956:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001958:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_HCD_HC_Init+0x2c>
 8001964:	2302      	movs	r3, #2
 8001966:	e09d      	b.n	8001aa4 <HAL_HCD_HC_Init+0x168>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	011b      	lsls	r3, r3, #4
 8001978:	1a9b      	subs	r3, r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	3319      	adds	r3, #25
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	3314      	adds	r3, #20
 8001994:	787a      	ldrb	r2, [r7, #1]
 8001996:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	3315      	adds	r3, #21
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	3326      	adds	r3, #38	@ 0x26
 80019bc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80019c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	78bb      	ldrb	r3, [r7, #2]
 80019c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019ca:	b2d8      	uxtb	r0, r3
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	3316      	adds	r3, #22
 80019da:	4602      	mov	r2, r0
 80019dc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	4619      	mov	r1, r3
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fbc8 	bl	8002178 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80019e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	da0a      	bge.n	8001a06 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	3317      	adds	r3, #23
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	e009      	b.n	8001a1a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3317      	adds	r3, #23
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f005 fba2 	bl	8007168 <USB_GetHostSpeed>
 8001a24:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001a26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d10b      	bne.n	8001a46 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001a2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <HAL_HCD_HC_Init+0x10a>
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d104      	bne.n	8001a46 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001a40:	d901      	bls.n	8001a46 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001a42:	23bc      	movs	r3, #188	@ 0xbc
 8001a44:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3318      	adds	r3, #24
 8001a56:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	b298      	uxth	r0, r3
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3328      	adds	r3, #40	@ 0x28
 8001a70:	4602      	mov	r2, r0
 8001a72:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	787c      	ldrb	r4, [r7, #1]
 8001a7e:	78ba      	ldrb	r2, [r7, #2]
 8001a80:	78f9      	ldrb	r1, [r7, #3]
 8001a82:	9302      	str	r3, [sp, #8]
 8001a84:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	4623      	mov	r3, r4
 8001a92:	f005 fb91 	bl	80071b8 <USB_HC_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}

08001aac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_HCD_HC_Halt+0x1e>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e00f      	b.n	8001aea <HAL_HCD_HC_Halt+0x3e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	78fa      	ldrb	r2, [r7, #3]
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f005 ff23 	bl	8007926 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	70fb      	strb	r3, [r7, #3]
 8001b06:	460b      	mov	r3, r1
 8001b08:	70bb      	strb	r3, [r7, #2]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b0e:	78fa      	ldrb	r2, [r7, #3]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3317      	adds	r3, #23
 8001b1e:	78ba      	ldrb	r2, [r7, #2]
 8001b20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	3326      	adds	r3, #38	@ 0x26
 8001b32:	787a      	ldrb	r2, [r7, #1]
 8001b34:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b36:	7c3b      	ldrb	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d114      	bne.n	8001b66 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b3c:	78fa      	ldrb	r2, [r7, #3]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	1a9b      	subs	r3, r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	332a      	adds	r3, #42	@ 0x2a
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3319      	adds	r3, #25
 8001b60:	7f3a      	ldrb	r2, [r7, #28]
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	e009      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b66:	78fa      	ldrb	r2, [r7, #3]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	1a9b      	subs	r3, r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	332a      	adds	r3, #42	@ 0x2a
 8001b76:	2202      	movs	r2, #2
 8001b78:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b7a:	787b      	ldrb	r3, [r7, #1]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	f200 8102 	bhi.w	8001d86 <HAL_HCD_HC_SubmitRequest+0x292>
 8001b82:	a201      	add	r2, pc, #4	@ (adr r2, 8001b88 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001d71 	.word	0x08001d71
 8001b90:	08001c5d 	.word	0x08001c5d
 8001b94:	08001ce7 	.word	0x08001ce7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001b98:	7c3b      	ldrb	r3, [r7, #16]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	f040 80f5 	bne.w	8001d8a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001ba0:	78bb      	ldrb	r3, [r7, #2]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d12d      	bne.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001ba6:	8b3b      	ldrh	r3, [r7, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	333d      	adds	r3, #61	@ 0x3d
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	333d      	adds	r3, #61	@ 0x3d
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10a      	bne.n	8001bec <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd6:	78fa      	ldrb	r2, [r7, #3]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	332a      	adds	r3, #42	@ 0x2a
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001bea:	e0ce      	b.n	8001d8a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	332a      	adds	r3, #42	@ 0x2a
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	701a      	strb	r2, [r3, #0]
      break;
 8001c00:	e0c3      	b.n	8001d8a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	331a      	adds	r3, #26
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	f040 80b8 	bne.w	8001d8a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	333c      	adds	r3, #60	@ 0x3c
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	332a      	adds	r3, #42	@ 0x2a
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
      break;
 8001c44:	e0a1      	b.n	8001d8a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	332a      	adds	r3, #42	@ 0x2a
 8001c56:	2202      	movs	r2, #2
 8001c58:	701a      	strb	r2, [r3, #0]
      break;
 8001c5a:	e096      	b.n	8001d8a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c5c:	78bb      	ldrb	r3, [r7, #2]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d120      	bne.n	8001ca4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c62:	78fa      	ldrb	r2, [r7, #3]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	333d      	adds	r3, #61	@ 0x3d
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10a      	bne.n	8001c8e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c78:	78fa      	ldrb	r2, [r7, #3]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	332a      	adds	r3, #42	@ 0x2a
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c8c:	e07e      	b.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c8e:	78fa      	ldrb	r2, [r7, #3]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	332a      	adds	r3, #42	@ 0x2a
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	701a      	strb	r2, [r3, #0]
      break;
 8001ca2:	e073      	b.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	333c      	adds	r3, #60	@ 0x3c
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cba:	78fa      	ldrb	r2, [r7, #3]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	332a      	adds	r3, #42	@ 0x2a
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
      break;
 8001cce:	e05d      	b.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	332a      	adds	r3, #42	@ 0x2a
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	701a      	strb	r2, [r3, #0]
      break;
 8001ce4:	e052      	b.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ce6:	78bb      	ldrb	r3, [r7, #2]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d120      	bne.n	8001d2e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	333d      	adds	r3, #61	@ 0x3d
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	1a9b      	subs	r3, r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	332a      	adds	r3, #42	@ 0x2a
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d16:	e039      	b.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	332a      	adds	r3, #42	@ 0x2a
 8001d28:	2202      	movs	r2, #2
 8001d2a:	701a      	strb	r2, [r3, #0]
      break;
 8001d2c:	e02e      	b.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	333c      	adds	r3, #60	@ 0x3c
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10a      	bne.n	8001d5a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	332a      	adds	r3, #42	@ 0x2a
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
      break;
 8001d58:	e018      	b.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	332a      	adds	r3, #42	@ 0x2a
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	701a      	strb	r2, [r3, #0]
      break;
 8001d6e:	e00d      	b.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	332a      	adds	r3, #42	@ 0x2a
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
      break;
 8001d84:	e002      	b.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001d86:	bf00      	nop
 8001d88:	e000      	b.n	8001d8c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001d8a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	332c      	adds	r3, #44	@ 0x2c
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	8b39      	ldrh	r1, [r7, #24]
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4403      	add	r3, r0
 8001db0:	3334      	adds	r3, #52	@ 0x34
 8001db2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	334c      	adds	r3, #76	@ 0x4c
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3338      	adds	r3, #56	@ 0x38
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ddc:	78fa      	ldrb	r2, [r7, #3]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	3315      	adds	r3, #21
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	334d      	adds	r3, #77	@ 0x4d
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	3310      	adds	r3, #16
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	1d19      	adds	r1, r3, #4
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	799b      	ldrb	r3, [r3, #6]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f005 faf6 	bl	8007410 <USB_HC_StartXfer>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop

08001e30 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 ffea 	bl	8006e20 <USB_GetMode>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	f040 80fb 	bne.w	800204a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 ffad 	bl	8006db8 <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80f1 	beq.w	8002048 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f004 ffa4 	bl	8006db8 <USB_ReadInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e7a:	d104      	bne.n	8001e86 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f004 ff94 	bl	8006db8 <USB_ReadInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e9a:	d104      	bne.n	8001ea6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ea4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 ff84 	bl	8006db8 <USB_ReadInterrupts>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001eb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001eba:	d104      	bne.n	8001ec6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ec4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 ff74 	bl	8006db8 <USB_ReadInterrupts>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d103      	bne.n	8001ee2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 ff66 	bl	8006db8 <USB_ReadInterrupts>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ef6:	d120      	bne.n	8001f3a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f00:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d113      	bne.n	8001f3a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f12:	2110      	movs	r1, #16
 8001f14:	6938      	ldr	r0, [r7, #16]
 8001f16:	f004 fe59 	bl	8006bcc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f1a:	6938      	ldr	r0, [r7, #16]
 8001f1c:	f004 fe88 	bl	8006c30 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7a5b      	ldrb	r3, [r3, #9]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d105      	bne.n	8001f34 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f005 f87a 	bl	8007028 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f008 f841 	bl	8009fbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 ff3a 	bl	8006db8 <USB_ReadInterrupts>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f4e:	d102      	bne.n	8001f56 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f001 fd4d 	bl	80039f0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 ff2c 	bl	8006db8 <USB_ReadInterrupts>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d106      	bne.n	8001f78 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f008 f80a 	bl	8009f84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2208      	movs	r2, #8
 8001f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f004 ff1b 	bl	8006db8 <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f8c:	d139      	bne.n	8002002 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f005 fcb6 	bl	8007904 <USB_HC_ReadInterrupt>
 8001f98:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e025      	b.n	8001fec <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d018      	beq.n	8001fe6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fca:	d106      	bne.n	8001fda <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f905 	bl	80021e2 <HCD_HC_IN_IRQHandler>
 8001fd8:	e005      	b.n	8001fe6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 ff67 	bl	8002eb4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	795b      	ldrb	r3, [r3, #5]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d3d3      	bcc.n	8001fa0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f004 fed6 	bl	8006db8 <USB_ReadInterrupts>
 800200c:	4603      	mov	r3, r0
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b10      	cmp	r3, #16
 8002014:	d101      	bne.n	800201a <HAL_HCD_IRQHandler+0x1ea>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_HCD_IRQHandler+0x1ec>
 800201a:	2300      	movs	r3, #0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d014      	beq.n	800204a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0210 	bic.w	r2, r2, #16
 800202e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f001 fbfe 	bl	8003832 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0210 	orr.w	r2, r2, #16
 8002044:	619a      	str	r2, [r3, #24]
 8002046:	e000      	b.n	800204a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002048:	bf00      	nop
    }
  }
}
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_HCD_Start+0x16>
 8002062:	2302      	movs	r3, #2
 8002064:	e013      	b.n	800208e <HAL_HCD_Start+0x3e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2101      	movs	r1, #1
 8002074:	4618      	mov	r0, r3
 8002076:	f005 f83e 	bl	80070f6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f004 fd36 	bl	8006af0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_HCD_Stop+0x16>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e00d      	b.n	80020c8 <HAL_HCD_Stop+0x32>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f005 fd91 	bl	8007be0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 ffe0 	bl	80070a2 <USB_ResetPort>
 80020e2:	4603      	mov	r3, r0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	1a9b      	subs	r3, r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	334c      	adds	r3, #76	@ 0x4c
 8002108:	781b      	ldrb	r3, [r3, #0]
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3338      	adds	r3, #56	@ 0x38
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f005 f822 	bl	8007196 <USB_GetCurrentFrame>
 8002152:	4603      	mov	r3, r0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f004 fffd 	bl	8007168 <USB_GetHostSpeed>
 800216e:	4603      	mov	r3, r0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	331a      	adds	r3, #26
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	331b      	adds	r3, #27
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3325      	adds	r3, #37	@ 0x25
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	3324      	adds	r3, #36	@ 0x24
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f004 fdec 	bl	8006dde <USB_ReadChInterrupts>
 8002206:	4603      	mov	r3, r0
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b04      	cmp	r3, #4
 800220e:	d11a      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800221c:	461a      	mov	r2, r3
 800221e:	2304      	movs	r3, #4
 8002220:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	334d      	adds	r3, #77	@ 0x4d
 8002232:	2207      	movs	r2, #7
 8002234:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f005 fb71 	bl	8007926 <USB_HC_Halt>
 8002244:	e09e      	b.n	8002384 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	78fa      	ldrb	r2, [r7, #3]
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f004 fdc5 	bl	8006dde <USB_ReadChInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800225e:	d11b      	bne.n	8002298 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800226c:	461a      	mov	r2, r3
 800226e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002272:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	334d      	adds	r3, #77	@ 0x4d
 8002284:	2208      	movs	r2, #8
 8002286:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f005 fb48 	bl	8007926 <USB_HC_Halt>
 8002296:	e075      	b.n	8002384 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f004 fd9c 	bl	8006dde <USB_ReadChInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d11a      	bne.n	80022e6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022bc:	461a      	mov	r2, r3
 80022be:	2308      	movs	r3, #8
 80022c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80022c2:	78fa      	ldrb	r2, [r7, #3]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	334d      	adds	r3, #77	@ 0x4d
 80022d2:	2206      	movs	r2, #6
 80022d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 fb21 	bl	8007926 <USB_HC_Halt>
 80022e4:	e04e      	b.n	8002384 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fd75 	bl	8006dde <USB_ReadChInterrupts>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022fe:	d11b      	bne.n	8002338 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800230c:	461a      	mov	r2, r3
 800230e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002312:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	334d      	adds	r3, #77	@ 0x4d
 8002324:	2209      	movs	r2, #9
 8002326:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	78fa      	ldrb	r2, [r7, #3]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f005 faf8 	bl	8007926 <USB_HC_Halt>
 8002336:	e025      	b.n	8002384 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f004 fd4c 	bl	8006dde <USB_ReadChInterrupts>
 8002346:	4603      	mov	r3, r0
 8002348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800234c:	2b80      	cmp	r3, #128	@ 0x80
 800234e:	d119      	bne.n	8002384 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800235c:	461a      	mov	r2, r3
 800235e:	2380      	movs	r3, #128	@ 0x80
 8002360:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	334d      	adds	r3, #77	@ 0x4d
 8002372:	2207      	movs	r2, #7
 8002374:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f005 fad1 	bl	8007926 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f004 fd26 	bl	8006dde <USB_ReadChInterrupts>
 8002392:	4603      	mov	r3, r0
 8002394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800239c:	d112      	bne.n	80023c4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f005 fabd 	bl	8007926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023be:	6093      	str	r3, [r2, #8]
 80023c0:	f000 bd75 	b.w	8002eae <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f004 fd06 	bl	8006dde <USB_ReadChInterrupts>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	f040 8128 	bne.w	800262e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ea:	461a      	mov	r2, r3
 80023ec:	2320      	movs	r3, #32
 80023ee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	331b      	adds	r3, #27
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d119      	bne.n	800243a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	331b      	adds	r3, #27
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	0151      	lsls	r1, r2, #5
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	440a      	add	r2, r1
 8002430:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002438:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	799b      	ldrb	r3, [r3, #6]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d01b      	beq.n	800247a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3330      	adds	r3, #48	@ 0x30
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	1ac9      	subs	r1, r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4403      	add	r3, r0
 8002476:	3338      	adds	r3, #56	@ 0x38
 8002478:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	334d      	adds	r3, #77	@ 0x4d
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	3344      	adds	r3, #68	@ 0x44
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ae:	461a      	mov	r2, r3
 80024b0:	2301      	movs	r3, #1
 80024b2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3326      	adds	r3, #38	@ 0x26
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3326      	adds	r3, #38	@ 0x26
 80024da:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d110      	bne.n	8002502 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f005 fa1c 	bl	8007926 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024fa:	461a      	mov	r2, r3
 80024fc:	2310      	movs	r3, #16
 80024fe:	6093      	str	r3, [r2, #8]
 8002500:	e03d      	b.n	800257e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3326      	adds	r3, #38	@ 0x26
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d00a      	beq.n	800252e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3326      	adds	r3, #38	@ 0x26
 8002528:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800252a:	2b01      	cmp	r3, #1
 800252c:	d127      	bne.n	800257e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	0151      	lsls	r1, r2, #5
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	440a      	add	r2, r1
 8002544:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002548:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800254c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	334c      	adds	r3, #76	@ 0x4c
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	334c      	adds	r3, #76	@ 0x4c
 8002572:	781a      	ldrb	r2, [r3, #0]
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	4619      	mov	r1, r3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f007 fd2d 	bl	8009fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	799b      	ldrb	r3, [r3, #6]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d13b      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	3338      	adds	r3, #56	@ 0x38
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4403      	add	r3, r0
 80025a6:	3328      	adds	r3, #40	@ 0x28
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	440b      	add	r3, r1
 80025ac:	1e59      	subs	r1, r3, #1
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4403      	add	r3, r0
 80025bc:	3328      	adds	r3, #40	@ 0x28
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8470 	beq.w	8002eae <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	333c      	adds	r3, #60	@ 0x3c
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	f083 0301 	eor.w	r3, r3, #1
 80025e6:	b2d8      	uxtb	r0, r3
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	333c      	adds	r3, #60	@ 0x3c
 80025f6:	4602      	mov	r2, r0
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	f000 bc58 	b.w	8002eae <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	333c      	adds	r3, #60	@ 0x3c
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2d8      	uxtb	r0, r3
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	333c      	adds	r3, #60	@ 0x3c
 8002626:	4602      	mov	r2, r0
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	f000 bc40 	b.w	8002eae <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f004 fbd1 	bl	8006dde <USB_ReadChInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b20      	cmp	r3, #32
 8002644:	d131      	bne.n	80026aa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	015a      	lsls	r2, r3, #5
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4413      	add	r3, r2
 800264e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002652:	461a      	mov	r2, r3
 8002654:	2320      	movs	r3, #32
 8002656:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	331a      	adds	r3, #26
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	f040 841f 	bne.w	8002eae <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	331b      	adds	r3, #27
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	334d      	adds	r3, #77	@ 0x4d
 8002694:	2203      	movs	r2, #3
 8002696:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f005 f940 	bl	8007926 <USB_HC_Halt>
 80026a6:	f000 bc02 	b.w	8002eae <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 fb93 	bl	8006dde <USB_ReadChInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	f040 8305 	bne.w	8002cce <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d0:	461a      	mov	r2, r3
 80026d2:	2302      	movs	r3, #2
 80026d4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	334d      	adds	r3, #77	@ 0x4d
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d114      	bne.n	8002716 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	334d      	adds	r3, #77	@ 0x4d
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	334c      	adds	r3, #76	@ 0x4c
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e2cc      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	334d      	adds	r3, #77	@ 0x4d
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b06      	cmp	r3, #6
 800272a:	d114      	bne.n	8002756 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334d      	adds	r3, #77	@ 0x4d
 800273c:	2202      	movs	r2, #2
 800273e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	334c      	adds	r3, #76	@ 0x4c
 8002750:	2205      	movs	r2, #5
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e2ac      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	334d      	adds	r3, #77	@ 0x4d
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b07      	cmp	r3, #7
 800276a:	d00b      	beq.n	8002784 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	334d      	adds	r3, #77	@ 0x4d
 800277c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800277e:	2b09      	cmp	r3, #9
 8002780:	f040 80a6 	bne.w	80028d0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	334d      	adds	r3, #77	@ 0x4d
 8002794:	2202      	movs	r2, #2
 8002796:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	3344      	adds	r3, #68	@ 0x44
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1c59      	adds	r1, r3, #1
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4403      	add	r3, r0
 80027b8:	3344      	adds	r3, #68	@ 0x44
 80027ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	3344      	adds	r3, #68	@ 0x44
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d943      	bls.n	800285a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3344      	adds	r3, #68	@ 0x44
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	331a      	adds	r3, #26
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d123      	bne.n	8002844 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	331b      	adds	r3, #27
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	331c      	adds	r3, #28
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	0151      	lsls	r1, r2, #5
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	440a      	add	r2, r1
 800283a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800283e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002842:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	334c      	adds	r3, #76	@ 0x4c
 8002854:	2204      	movs	r2, #4
 8002856:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002858:	e229      	b.n	8002cae <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	334c      	adds	r3, #76	@ 0x4c
 800286a:	2202      	movs	r2, #2
 800286c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	3326      	adds	r3, #38	@ 0x26
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3326      	adds	r3, #38	@ 0x26
 8002894:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002896:	2b02      	cmp	r3, #2
 8002898:	f040 8209 	bne.w	8002cae <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028b2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028ba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028c8:	461a      	mov	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028ce:	e1ee      	b.n	8002cae <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	334d      	adds	r3, #77	@ 0x4d
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	f040 80c8 	bne.w	8002a78 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	334d      	adds	r3, #77	@ 0x4d
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	331b      	adds	r3, #27
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b01      	cmp	r3, #1
 8002910:	f040 81ce 	bne.w	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	3326      	adds	r3, #38	@ 0x26
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d16b      	bne.n	8002a02 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3348      	adds	r3, #72	@ 0x48
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1c59      	adds	r1, r3, #1
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4403      	add	r3, r0
 800294a:	3348      	adds	r3, #72	@ 0x48
 800294c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	3348      	adds	r3, #72	@ 0x48
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d943      	bls.n	80029ec <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3348      	adds	r3, #72	@ 0x48
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	331b      	adds	r3, #27
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3344      	adds	r3, #68	@ 0x44
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d809      	bhi.n	80029b6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	331c      	adds	r3, #28
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	0151      	lsls	r1, r2, #5
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	440a      	add	r2, r1
 80029cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	334c      	adds	r3, #76	@ 0x4c
 80029e6:	2204      	movs	r2, #4
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e014      	b.n	8002a16 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	334c      	adds	r3, #76	@ 0x4c
 80029fc:	2202      	movs	r2, #2
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e009      	b.n	8002a16 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	334c      	adds	r3, #76	@ 0x4c
 8002a12:	2202      	movs	r2, #2
 8002a14:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3326      	adds	r3, #38	@ 0x26
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3326      	adds	r3, #38	@ 0x26
 8002a3c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	f040 8136 	bne.w	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a5a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a62:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a70:	461a      	mov	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e11b      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	334d      	adds	r3, #77	@ 0x4d
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	f040 8081 	bne.w	8002b92 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	334d      	adds	r3, #77	@ 0x4d
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	331b      	adds	r3, #27
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	f040 80fa 	bne.w	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	334c      	adds	r3, #76	@ 0x4c
 8002acc:	2202      	movs	r2, #2
 8002ace:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	0151      	lsls	r1, r2, #5
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	440a      	add	r2, r1
 8002ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002aea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aee:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	0151      	lsls	r1, r2, #5
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	440a      	add	r2, r1
 8002b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b0e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b2a:	f023 0320 	bic.w	r3, r3, #32
 8002b2e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3326      	adds	r3, #38	@ 0x26
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3326      	adds	r3, #38	@ 0x26
 8002b56:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	f040 80a9 	bne.w	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b74:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b7c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	e08e      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	334d      	adds	r3, #77	@ 0x4d
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d143      	bne.n	8002c30 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	334d      	adds	r3, #77	@ 0x4d
 8002bb8:	2202      	movs	r2, #2
 8002bba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	334c      	adds	r3, #76	@ 0x4c
 8002bcc:	2202      	movs	r2, #2
 8002bce:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3326      	adds	r3, #38	@ 0x26
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3326      	adds	r3, #38	@ 0x26
 8002bf6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d159      	bne.n	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c12:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c1a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e03f      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	334d      	adds	r3, #77	@ 0x4d
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d126      	bne.n	8002c94 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	334d      	adds	r3, #77	@ 0x4d
 8002c56:	2202      	movs	r2, #2
 8002c58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3344      	adds	r3, #68	@ 0x44
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	1c59      	adds	r1, r3, #1
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4403      	add	r3, r0
 8002c7a:	3344      	adds	r3, #68	@ 0x44
 8002c7c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	334c      	adds	r3, #76	@ 0x4c
 8002c8e:	2204      	movs	r2, #4
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e00d      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	334d      	adds	r3, #77	@ 0x4d
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	f000 8100 	beq.w	8002eac <HCD_HC_IN_IRQHandler+0xcca>
 8002cac:	e000      	b.n	8002cb0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cae:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	334c      	adds	r3, #76	@ 0x4c
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f007 f986 	bl	8009fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ccc:	e0ef      	b.n	8002eae <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 f881 	bl	8006dde <USB_ReadChInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce2:	2b40      	cmp	r3, #64	@ 0x40
 8002ce4:	d12f      	bne.n	8002d46 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2340      	movs	r3, #64	@ 0x40
 8002cf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	334d      	adds	r3, #77	@ 0x4d
 8002d08:	2205      	movs	r2, #5
 8002d0a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	331a      	adds	r3, #26
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3344      	adds	r3, #68	@ 0x44
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 fdf1 	bl	8007926 <USB_HC_Halt>
 8002d44:	e0b3      	b.n	8002eae <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 f845 	bl	8006dde <USB_ReadChInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	f040 80a7 	bne.w	8002eae <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3326      	adds	r3, #38	@ 0x26
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d11b      	bne.n	8002dae <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3344      	adds	r3, #68	@ 0x44
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	334d      	adds	r3, #77	@ 0x4d
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 fdbd 	bl	8007926 <USB_HC_Halt>
 8002dac:	e03f      	b.n	8002e2e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	3326      	adds	r3, #38	@ 0x26
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3326      	adds	r3, #38	@ 0x26
 8002dd4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d129      	bne.n	8002e2e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3344      	adds	r3, #68	@ 0x44
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	799b      	ldrb	r3, [r3, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HCD_HC_IN_IRQHandler+0xc2a>
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	331b      	adds	r3, #27
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d110      	bne.n	8002e2e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	334d      	adds	r3, #77	@ 0x4d
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f004 fd7c 	bl	8007926 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	331b      	adds	r3, #27
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d129      	bne.n	8002e98 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	331b      	adds	r3, #27
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	0151      	lsls	r1, r2, #5
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	440a      	add	r2, r1
 8002e6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e76:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	0151      	lsls	r1, r2, #5
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	440a      	add	r2, r1
 8002e8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e92:	f043 0320 	orr.w	r3, r3, #32
 8002e96:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2310      	movs	r3, #16
 8002ea8:	6093      	str	r3, [r2, #8]
 8002eaa:	e000      	b.n	8002eae <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002eac:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 ff83 	bl	8006dde <USB_ReadChInterrupts>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d11b      	bne.n	8002f1a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eee:	461a      	mov	r2, r3
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	334d      	adds	r3, #77	@ 0x4d
 8002f04:	2207      	movs	r2, #7
 8002f06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f004 fd08 	bl	8007926 <USB_HC_Halt>
 8002f16:	f000 bc89 	b.w	800382c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f003 ff5b 	bl	8006dde <USB_ReadChInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	f040 8082 	bne.w	8003038 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	2320      	movs	r3, #32
 8002f44:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3319      	adds	r3, #25
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d124      	bne.n	8002fa6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3319      	adds	r3, #25
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	334c      	adds	r3, #76	@ 0x4c
 8002f80:	2202      	movs	r2, #2
 8002f82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	334d      	adds	r3, #77	@ 0x4d
 8002f94:	2203      	movs	r2, #3
 8002f96:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f004 fcc0 	bl	8007926 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	331a      	adds	r3, #26
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f040 8437 	bne.w	800382c <HCD_HC_OUT_IRQHandler+0x978>
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	331b      	adds	r3, #27
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 842b 	bne.w	800382c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3326      	adds	r3, #38	@ 0x26
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d009      	beq.n	8003000 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	331b      	adds	r3, #27
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	334d      	adds	r3, #77	@ 0x4d
 8003010:	2203      	movs	r2, #3
 8003012:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f004 fc82 	bl	8007926 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	3344      	adds	r3, #68	@ 0x44
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e3f9      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fecc 	bl	8006dde <USB_ReadChInterrupts>
 8003046:	4603      	mov	r3, r0
 8003048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800304c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003050:	d111      	bne.n	8003076 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305e:	461a      	mov	r2, r3
 8003060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003064:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f004 fc59 	bl	8007926 <USB_HC_Halt>
 8003074:	e3da      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f003 fead 	bl	8006dde <USB_ReadChInterrupts>
 8003084:	4603      	mov	r3, r0
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d168      	bne.n	8003160 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3344      	adds	r3, #68	@ 0x44
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fe97 	bl	8006dde <USB_ReadChInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b6:	2b40      	cmp	r3, #64	@ 0x40
 80030b8:	d112      	bne.n	80030e0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3319      	adds	r3, #25
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030da:	461a      	mov	r2, r3
 80030dc:	2340      	movs	r3, #64	@ 0x40
 80030de:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	331b      	adds	r3, #27
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d019      	beq.n	800312a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	331b      	adds	r3, #27
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	0151      	lsls	r1, r2, #5
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	440a      	add	r2, r1
 8003120:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003128:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003136:	461a      	mov	r2, r3
 8003138:	2301      	movs	r3, #1
 800313a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	334d      	adds	r3, #77	@ 0x4d
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f004 fbe4 	bl	8007926 <USB_HC_Halt>
 800315e:	e365      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f003 fe38 	bl	8006dde <USB_ReadChInterrupts>
 800316e:	4603      	mov	r3, r0
 8003170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003174:	2b40      	cmp	r3, #64	@ 0x40
 8003176:	d139      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	334d      	adds	r3, #77	@ 0x4d
 8003188:	2205      	movs	r2, #5
 800318a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	331a      	adds	r3, #26
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	3319      	adds	r3, #25
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3344      	adds	r3, #68	@ 0x44
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 fba7 	bl	8007926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e4:	461a      	mov	r2, r3
 80031e6:	2340      	movs	r3, #64	@ 0x40
 80031e8:	6093      	str	r3, [r2, #8]
 80031ea:	e31f      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 fdf2 	bl	8006dde <USB_ReadChInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b08      	cmp	r3, #8
 8003202:	d11a      	bne.n	800323a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003210:	461a      	mov	r2, r3
 8003212:	2308      	movs	r3, #8
 8003214:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334d      	adds	r3, #77	@ 0x4d
 8003226:	2206      	movs	r2, #6
 8003228:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f004 fb77 	bl	8007926 <USB_HC_Halt>
 8003238:	e2f8      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fdcb 	bl	8006dde <USB_ReadChInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b10      	cmp	r3, #16
 8003250:	d144      	bne.n	80032dc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	3344      	adds	r3, #68	@ 0x44
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334d      	adds	r3, #77	@ 0x4d
 8003276:	2204      	movs	r2, #4
 8003278:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3319      	adds	r3, #25
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d114      	bne.n	80032ba <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3318      	adds	r3, #24
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3319      	adds	r3, #25
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 fb2f 	bl	8007926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d4:	461a      	mov	r2, r3
 80032d6:	2310      	movs	r3, #16
 80032d8:	6093      	str	r3, [r2, #8]
 80032da:	e2a7      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f003 fd7a 	bl	8006dde <USB_ReadChInterrupts>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f0:	2b80      	cmp	r3, #128	@ 0x80
 80032f2:	f040 8083 	bne.w	80033fc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	799b      	ldrb	r3, [r3, #6]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d111      	bne.n	8003322 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	334d      	adds	r3, #77	@ 0x4d
 800330e:	2207      	movs	r2, #7
 8003310:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f004 fb03 	bl	8007926 <USB_HC_Halt>
 8003320:	e062      	b.n	80033e8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3344      	adds	r3, #68	@ 0x44
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	1c59      	adds	r1, r3, #1
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4403      	add	r3, r0
 8003342:	3344      	adds	r3, #68	@ 0x44
 8003344:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	3344      	adds	r3, #68	@ 0x44
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d922      	bls.n	80033a2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3344      	adds	r3, #68	@ 0x44
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	334c      	adds	r3, #76	@ 0x4c
 8003380:	2204      	movs	r2, #4
 8003382:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334c      	adds	r3, #76	@ 0x4c
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f006 fe1c 	bl	8009fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033a0:	e022      	b.n	80033e8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334c      	adds	r3, #76	@ 0x4c
 80033b2:	2202      	movs	r2, #2
 80033b4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033cc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033d4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e2:	461a      	mov	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f4:	461a      	mov	r2, r3
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	6093      	str	r3, [r2, #8]
 80033fa:	e217      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	4611      	mov	r1, r2
 8003404:	4618      	mov	r0, r3
 8003406:	f003 fcea 	bl	8006dde <USB_ReadChInterrupts>
 800340a:	4603      	mov	r3, r0
 800340c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003414:	d11b      	bne.n	800344e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	334d      	adds	r3, #77	@ 0x4d
 8003426:	2209      	movs	r2, #9
 8003428:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f004 fa77 	bl	8007926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800344a:	6093      	str	r3, [r2, #8]
 800344c:	e1ee      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f003 fcc1 	bl	8006dde <USB_ReadChInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b02      	cmp	r3, #2
 8003464:	f040 81df 	bne.w	8003826 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003474:	461a      	mov	r2, r3
 8003476:	2302      	movs	r3, #2
 8003478:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334d      	adds	r3, #77	@ 0x4d
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 8093 	bne.w	80035b8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	334d      	adds	r3, #77	@ 0x4d
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	334c      	adds	r3, #76	@ 0x4c
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3326      	adds	r3, #38	@ 0x26
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d00b      	beq.n	80034e8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3326      	adds	r3, #38	@ 0x26
 80034e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	f040 8190 	bne.w	8003808 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	799b      	ldrb	r3, [r3, #6]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d115      	bne.n	800351c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	333d      	adds	r3, #61	@ 0x3d
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	f083 0301 	eor.w	r3, r3, #1
 8003508:	b2d8      	uxtb	r0, r3
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	333d      	adds	r3, #61	@ 0x3d
 8003518:	4602      	mov	r2, r0
 800351a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	799b      	ldrb	r3, [r3, #6]
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 8171 	bne.w	8003808 <HCD_HC_OUT_IRQHandler+0x954>
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3334      	adds	r3, #52	@ 0x34
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8165 	beq.w	8003808 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3334      	adds	r3, #52	@ 0x34
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4403      	add	r3, r0
 800355e:	3328      	adds	r3, #40	@ 0x28
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	440b      	add	r3, r1
 8003564:	1e59      	subs	r1, r3, #1
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4403      	add	r3, r0
 8003574:	3328      	adds	r3, #40	@ 0x28
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	fbb1 f3f3 	udiv	r3, r1, r3
 800357c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 813f 	beq.w	8003808 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	333d      	adds	r3, #61	@ 0x3d
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2d8      	uxtb	r0, r3
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	333d      	adds	r3, #61	@ 0x3d
 80035b2:	4602      	mov	r2, r0
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e127      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	334d      	adds	r3, #77	@ 0x4d
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d120      	bne.n	8003610 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	334d      	adds	r3, #77	@ 0x4d
 80035de:	2202      	movs	r2, #2
 80035e0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	331b      	adds	r3, #27
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f040 8107 	bne.w	8003808 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334c      	adds	r3, #76	@ 0x4c
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e0fb      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	334d      	adds	r3, #77	@ 0x4d
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b04      	cmp	r3, #4
 8003624:	d13a      	bne.n	800369c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	334d      	adds	r3, #77	@ 0x4d
 8003636:	2202      	movs	r2, #2
 8003638:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334c      	adds	r3, #76	@ 0x4c
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	331b      	adds	r3, #27
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	f040 80d1 	bne.w	8003808 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	331b      	adds	r3, #27
 8003676:	2200      	movs	r2, #0
 8003678:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	440a      	add	r2, r1
 8003690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003698:	6053      	str	r3, [r2, #4]
 800369a:	e0b5      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	334d      	adds	r3, #77	@ 0x4d
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b05      	cmp	r3, #5
 80036b0:	d114      	bne.n	80036dc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	334d      	adds	r3, #77	@ 0x4d
 80036c2:	2202      	movs	r2, #2
 80036c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	334c      	adds	r3, #76	@ 0x4c
 80036d6:	2202      	movs	r2, #2
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e095      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	334d      	adds	r3, #77	@ 0x4d
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d114      	bne.n	800371c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334d      	adds	r3, #77	@ 0x4d
 8003702:	2202      	movs	r2, #2
 8003704:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334c      	adds	r3, #76	@ 0x4c
 8003716:	2205      	movs	r2, #5
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	e075      	b.n	8003808 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	334d      	adds	r3, #77	@ 0x4d
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b07      	cmp	r3, #7
 8003730:	d00a      	beq.n	8003748 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	334d      	adds	r3, #77	@ 0x4d
 8003742:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003744:	2b09      	cmp	r3, #9
 8003746:	d170      	bne.n	800382a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	334d      	adds	r3, #77	@ 0x4d
 8003758:	2202      	movs	r2, #2
 800375a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	3344      	adds	r3, #68	@ 0x44
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1c59      	adds	r1, r3, #1
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4403      	add	r3, r0
 800377c:	3344      	adds	r3, #68	@ 0x44
 800377e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	3344      	adds	r3, #68	@ 0x44
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d914      	bls.n	80037c0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	3344      	adds	r3, #68	@ 0x44
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	334c      	adds	r3, #76	@ 0x4c
 80037ba:	2204      	movs	r2, #4
 80037bc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037be:	e022      	b.n	8003806 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	@ 0x4c
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037ea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037f2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003800:	461a      	mov	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003806:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	334c      	adds	r3, #76	@ 0x4c
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	78fb      	ldrb	r3, [r7, #3]
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f006 fbda 	bl	8009fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003824:	e002      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800382a:	bf00      	nop
  }
}
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b08a      	sub	sp, #40	@ 0x28
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	0c5b      	lsrs	r3, r3, #17
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003866:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d004      	beq.n	8003878 <HCD_RXQLVL_IRQHandler+0x46>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b05      	cmp	r3, #5
 8003872:	f000 80b6 	beq.w	80039e2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003876:	e0b7      	b.n	80039e8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80b3 	beq.w	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	332c      	adds	r3, #44	@ 0x2c
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80a7 	beq.w	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3338      	adds	r3, #56	@ 0x38
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	18d1      	adds	r1, r2, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4403      	add	r3, r0
 80038bc:	3334      	adds	r3, #52	@ 0x34
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4299      	cmp	r1, r3
 80038c2:	f200 8083 	bhi.w	80039cc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	332c      	adds	r3, #44	@ 0x2c
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	b292      	uxth	r2, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	f003 fa11 	bl	8006d08 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	332c      	adds	r3, #44	@ 0x2c
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	18d1      	adds	r1, r2, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4403      	add	r3, r0
 800390a:	332c      	adds	r3, #44	@ 0x2c
 800390c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	3338      	adds	r3, #56	@ 0x38
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	18d1      	adds	r1, r2, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4613      	mov	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4403      	add	r3, r0
 8003932:	3338      	adds	r3, #56	@ 0x38
 8003934:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	0cdb      	lsrs	r3, r3, #19
 8003946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800394a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	3328      	adds	r3, #40	@ 0x28
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4293      	cmp	r3, r2
 8003964:	d13f      	bne.n	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d03c      	beq.n	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003982:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800398a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003998:	461a      	mov	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	333c      	adds	r3, #60	@ 0x3c
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	f083 0301 	eor.w	r3, r3, #1
 80039b4:	b2d8      	uxtb	r0, r3
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	333c      	adds	r3, #60	@ 0x3c
 80039c6:	4602      	mov	r2, r0
 80039c8:	701a      	strb	r2, [r3, #0]
      break;
 80039ca:	e00c      	b.n	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4613      	mov	r3, r2
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	334c      	adds	r3, #76	@ 0x4c
 80039dc:	2204      	movs	r2, #4
 80039de:	701a      	strb	r2, [r3, #0]
      break;
 80039e0:	e001      	b.n	80039e6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80039e6:	bf00      	nop
  }
}
 80039e8:	bf00      	nop
 80039ea:	3728      	adds	r7, #40	@ 0x28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003a1c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d10b      	bne.n	8003a40 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d102      	bne.n	8003a38 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f006 fab4 	bl	8009fa0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f043 0302 	orr.w	r3, r3, #2
 8003a3e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d132      	bne.n	8003ab0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f043 0308 	orr.w	r3, r3, #8
 8003a50:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d126      	bne.n	8003aaa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	7a5b      	ldrb	r3, [r3, #9]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d113      	bne.n	8003a8c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003a6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a6e:	d106      	bne.n	8003a7e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2102      	movs	r1, #2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 fad6 	bl	8007028 <USB_InitFSLSPClkSel>
 8003a7c:	e011      	b.n	8003aa2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2101      	movs	r1, #1
 8003a84:	4618      	mov	r0, r3
 8003a86:	f003 facf 	bl	8007028 <USB_InitFSLSPClkSel>
 8003a8a:	e00a      	b.n	8003aa2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	79db      	ldrb	r3, [r3, #7]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d106      	bne.n	8003aa2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003aa0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f006 faa6 	bl	8009ff4 <HAL_HCD_PortEnabled_Callback>
 8003aa8:	e002      	b.n	8003ab0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f006 fab0 	bl	800a010 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d103      	bne.n	8003ac2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f043 0320 	orr.w	r3, r3, #32
 8003ac0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	6013      	str	r3, [r2, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e12b      	b.n	8003d42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd f8c2 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	@ 0x24
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f001 fa20 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8003b40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a81      	ldr	r2, [pc, #516]	@ (8003d4c <HAL_I2C_Init+0x274>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d807      	bhi.n	8003b5c <HAL_I2C_Init+0x84>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4a80      	ldr	r2, [pc, #512]	@ (8003d50 <HAL_I2C_Init+0x278>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	bf94      	ite	ls
 8003b54:	2301      	movls	r3, #1
 8003b56:	2300      	movhi	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	e006      	b.n	8003b6a <HAL_I2C_Init+0x92>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a7d      	ldr	r2, [pc, #500]	@ (8003d54 <HAL_I2C_Init+0x27c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	bf94      	ite	ls
 8003b64:	2301      	movls	r3, #1
 8003b66:	2300      	movhi	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e0e7      	b.n	8003d42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4a78      	ldr	r2, [pc, #480]	@ (8003d58 <HAL_I2C_Init+0x280>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	0c9b      	lsrs	r3, r3, #18
 8003b7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a6a      	ldr	r2, [pc, #424]	@ (8003d4c <HAL_I2C_Init+0x274>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d802      	bhi.n	8003bac <HAL_I2C_Init+0xd4>
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	e009      	b.n	8003bc0 <HAL_I2C_Init+0xe8>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	4a69      	ldr	r2, [pc, #420]	@ (8003d5c <HAL_I2C_Init+0x284>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	099b      	lsrs	r3, r3, #6
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	495c      	ldr	r1, [pc, #368]	@ (8003d4c <HAL_I2C_Init+0x274>)
 8003bdc:	428b      	cmp	r3, r1
 8003bde:	d819      	bhi.n	8003c14 <HAL_I2C_Init+0x13c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1e59      	subs	r1, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bee:	1c59      	adds	r1, r3, #1
 8003bf0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_I2C_Init+0x138>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1e59      	subs	r1, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0e:	e051      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c10:	2304      	movs	r3, #4
 8003c12:	e04f      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d111      	bne.n	8003c40 <HAL_I2C_Init+0x168>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1e58      	subs	r0, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	440b      	add	r3, r1
 8003c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	e012      	b.n	8003c66 <HAL_I2C_Init+0x18e>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	0099      	lsls	r1, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf0c      	ite	eq
 8003c60:	2301      	moveq	r3, #1
 8003c62:	2300      	movne	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_I2C_Init+0x196>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e022      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10e      	bne.n	8003c94 <HAL_I2C_Init+0x1bc>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1e58      	subs	r0, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	440b      	add	r3, r1
 8003c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c88:	3301      	adds	r3, #1
 8003c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c92:	e00f      	b.n	8003cb4 <HAL_I2C_Init+0x1dc>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e58      	subs	r0, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6859      	ldr	r1, [r3, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	0099      	lsls	r1, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	6809      	ldr	r1, [r1, #0]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ce2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6911      	ldr	r1, [r2, #16]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68d2      	ldr	r2, [r2, #12]
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	000186a0 	.word	0x000186a0
 8003d50:	001e847f 	.word	0x001e847f
 8003d54:	003d08ff 	.word	0x003d08ff
 8003d58:	431bde83 	.word	0x431bde83
 8003d5c:	10624dd3 	.word	0x10624dd3

08003d60 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e128      	b.n	8003fc4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a90      	ldr	r2, [pc, #576]	@ (8003fcc <HAL_I2S_Init+0x26c>)
 8003d8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fc ffc3 	bl	8000d18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003da8:	f023 030f 	bic.w	r3, r3, #15
 8003dac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2202      	movs	r2, #2
 8003db4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d060      	beq.n	8003e80 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e001      	b.n	8003dd0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003dcc:	2320      	movs	r3, #32
 8003dce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d802      	bhi.n	8003dde <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003dde:	2001      	movs	r0, #1
 8003de0:	f001 f9c4 	bl	800516c <HAL_RCCEx_GetPeriphCLKFreq>
 8003de4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dee:	d125      	bne.n	8003e3c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d010      	beq.n	8003e1a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	3305      	adds	r3, #5
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	e01f      	b.n	8003e5a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	3305      	adds	r3, #5
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	e00e      	b.n	8003e5a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	3305      	adds	r3, #5
 8003e58:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4a5c      	ldr	r2, [pc, #368]	@ (8003fd0 <HAL_I2S_Init+0x270>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	08db      	lsrs	r3, r3, #3
 8003e64:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	e003      	b.n	8003e88 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003e80:	2302      	movs	r3, #2
 8003e82:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d902      	bls.n	8003e94 <HAL_I2S_Init+0x134>
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2bff      	cmp	r3, #255	@ 0xff
 8003e92:	d907      	bls.n	8003ea4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e98:	f043 0210 	orr.w	r2, r3, #16
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e08f      	b.n	8003fc4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	ea42 0103 	orr.w	r1, r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ec2:	f023 030f 	bic.w	r3, r3, #15
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6851      	ldr	r1, [r2, #4]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6892      	ldr	r2, [r2, #8]
 8003ece:	4311      	orrs	r1, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	68d2      	ldr	r2, [r2, #12]
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6992      	ldr	r2, [r2, #24]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ee6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d161      	bne.n	8003fb4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a38      	ldr	r2, [pc, #224]	@ (8003fd4 <HAL_I2S_Init+0x274>)
 8003ef4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a37      	ldr	r2, [pc, #220]	@ (8003fd8 <HAL_I2S_Init+0x278>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d101      	bne.n	8003f04 <HAL_I2S_Init+0x1a4>
 8003f00:	4b36      	ldr	r3, [pc, #216]	@ (8003fdc <HAL_I2S_Init+0x27c>)
 8003f02:	e001      	b.n	8003f08 <HAL_I2S_Init+0x1a8>
 8003f04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	4932      	ldr	r1, [pc, #200]	@ (8003fd8 <HAL_I2S_Init+0x278>)
 8003f10:	428a      	cmp	r2, r1
 8003f12:	d101      	bne.n	8003f18 <HAL_I2S_Init+0x1b8>
 8003f14:	4a31      	ldr	r2, [pc, #196]	@ (8003fdc <HAL_I2S_Init+0x27c>)
 8003f16:	e001      	b.n	8003f1c <HAL_I2S_Init+0x1bc>
 8003f18:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003f1c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f20:	f023 030f 	bic.w	r3, r3, #15
 8003f24:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8003fd8 <HAL_I2S_Init+0x278>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_I2S_Init+0x1d4>
 8003f30:	4b2a      	ldr	r3, [pc, #168]	@ (8003fdc <HAL_I2S_Init+0x27c>)
 8003f32:	e001      	b.n	8003f38 <HAL_I2S_Init+0x1d8>
 8003f34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f38:	2202      	movs	r2, #2
 8003f3a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a25      	ldr	r2, [pc, #148]	@ (8003fd8 <HAL_I2S_Init+0x278>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_I2S_Init+0x1ea>
 8003f46:	4b25      	ldr	r3, [pc, #148]	@ (8003fdc <HAL_I2S_Init+0x27c>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2S_Init+0x1ee>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f5a:	d003      	beq.n	8003f64 <HAL_I2S_Init+0x204>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d103      	bne.n	8003f6c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	e001      	b.n	8003f70 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f9c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd8 <HAL_I2S_Init+0x278>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d101      	bne.n	8003fac <HAL_I2S_Init+0x24c>
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <HAL_I2S_Init+0x27c>)
 8003faa:	e001      	b.n	8003fb0 <HAL_I2S_Init+0x250>
 8003fac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fb0:	897a      	ldrh	r2, [r7, #10]
 8003fb2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	080040d7 	.word	0x080040d7
 8003fd0:	cccccccd 	.word	0xcccccccd
 8003fd4:	080041ed 	.word	0x080041ed
 8003fd8:	40003800 	.word	0x40003800
 8003fdc:	40003400 	.word	0x40003400

08003fe0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	881a      	ldrh	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	1c9a      	adds	r2, r3, #2
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10e      	bne.n	8004070 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004060:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ffb8 	bl	8003fe0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408a:	b292      	uxth	r2, r2
 800408c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	1c9a      	adds	r2, r3, #2
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10e      	bne.n	80040ce <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff93 	bl	8003ff4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d13a      	bne.n	8004168 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d109      	bne.n	8004110 <I2S_IRQHandler+0x3a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004106:	2b40      	cmp	r3, #64	@ 0x40
 8004108:	d102      	bne.n	8004110 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ffb4 	bl	8004078 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d126      	bne.n	8004168 <I2S_IRQHandler+0x92>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b20      	cmp	r3, #32
 8004126:	d11f      	bne.n	8004168 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004136:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	f043 0202 	orr.w	r2, r3, #2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff50 	bl	8004008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b03      	cmp	r3, #3
 8004172:	d136      	bne.n	80041e2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d109      	bne.n	8004192 <I2S_IRQHandler+0xbc>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004188:	2b80      	cmp	r3, #128	@ 0x80
 800418a:	d102      	bne.n	8004192 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff45 	bl	800401c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b08      	cmp	r3, #8
 800419a:	d122      	bne.n	80041e2 <I2S_IRQHandler+0x10c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d11b      	bne.n	80041e2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041b8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d4:	f043 0204 	orr.w	r2, r3, #4
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff ff13 	bl	8004008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a92      	ldr	r2, [pc, #584]	@ (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004206:	4b92      	ldr	r3, [pc, #584]	@ (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004208:	e001      	b.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800420a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a8b      	ldr	r2, [pc, #556]	@ (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d101      	bne.n	8004228 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004224:	4b8a      	ldr	r3, [pc, #552]	@ (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004226:	e001      	b.n	800422c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004228:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004238:	d004      	beq.n	8004244 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f040 8099 	bne.w	8004376 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b02      	cmp	r3, #2
 800424c:	d107      	bne.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f925 	bl	80044a8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9c8 	bl	8004608 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427e:	2b40      	cmp	r3, #64	@ 0x40
 8004280:	d13a      	bne.n	80042f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d035      	beq.n	80042f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a6e      	ldr	r2, [pc, #440]	@ (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004296:	4b6e      	ldr	r3, [pc, #440]	@ (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004298:	e001      	b.n	800429e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800429a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4969      	ldr	r1, [pc, #420]	@ (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a6:	428b      	cmp	r3, r1
 80042a8:	d101      	bne.n	80042ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042aa:	4b69      	ldr	r3, [pc, #420]	@ (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ac:	e001      	b.n	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042b6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	f043 0202 	orr.w	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fe88 	bl	8004008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b08      	cmp	r3, #8
 8004300:	f040 80c3 	bne.w	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 80bd 	beq.w	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800431e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a49      	ldr	r2, [pc, #292]	@ (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d101      	bne.n	800432e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800432a:	4b49      	ldr	r3, [pc, #292]	@ (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800432c:	e001      	b.n	8004332 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800432e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4944      	ldr	r1, [pc, #272]	@ (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800433a:	428b      	cmp	r3, r1
 800433c:	d101      	bne.n	8004342 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800433e:	4b44      	ldr	r3, [pc, #272]	@ (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004340:	e001      	b.n	8004346 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004342:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004346:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800434a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800434c:	2300      	movs	r3, #0
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60bb      	str	r3, [r7, #8]
 8004358:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004366:	f043 0204 	orr.w	r2, r3, #4
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7ff fe4a 	bl	8004008 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004374:	e089      	b.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b02      	cmp	r3, #2
 800437e:	d107      	bne.n	8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8be 	bl	800450c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8fd 	bl	80045a4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b0:	2b40      	cmp	r3, #64	@ 0x40
 80043b2:	d12f      	bne.n	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d02a      	beq.n	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043cc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1e      	ldr	r2, [pc, #120]	@ (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d101      	bne.n	80043dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80043d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043da:	e001      	b.n	80043e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80043dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4919      	ldr	r1, [pc, #100]	@ (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043e8:	428b      	cmp	r3, r1
 80043ea:	d101      	bne.n	80043f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043ec:	4b18      	ldr	r3, [pc, #96]	@ (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043ee:	e001      	b.n	80043f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f043 0202 	orr.w	r2, r3, #2
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fdfa 	bl	8004008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b08      	cmp	r3, #8
 800441c:	d136      	bne.n	800448c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d031      	beq.n	800448c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a07      	ldr	r2, [pc, #28]	@ (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004432:	4b07      	ldr	r3, [pc, #28]	@ (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004434:	e001      	b.n	800443a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004436:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4902      	ldr	r1, [pc, #8]	@ (800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004442:	428b      	cmp	r3, r1
 8004444:	d106      	bne.n	8004454 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004446:	4b02      	ldr	r3, [pc, #8]	@ (8004450 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004448:	e006      	b.n	8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800444a:	bf00      	nop
 800444c:	40003800 	.word	0x40003800
 8004450:	40003400 	.word	0x40003400
 8004454:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004458:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800445c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800446c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447a:	f043 0204 	orr.w	r2, r3, #4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fdc0 	bl	8004008 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004488:	e000      	b.n	800448c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800448a:	bf00      	nop
}
 800448c:	bf00      	nop
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	1c99      	adds	r1, r3, #2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6251      	str	r1, [r2, #36]	@ 0x24
 80044ba:	881a      	ldrh	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d113      	bne.n	8004502 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ffc9 	bl	8004494 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	1c99      	adds	r1, r3, #2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6251      	str	r1, [r2, #36]	@ 0x24
 800451e:	8819      	ldrh	r1, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1d      	ldr	r2, [pc, #116]	@ (800459c <I2SEx_TxISR_I2SExt+0x90>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <I2SEx_TxISR_I2SExt+0x22>
 800452a:	4b1d      	ldr	r3, [pc, #116]	@ (80045a0 <I2SEx_TxISR_I2SExt+0x94>)
 800452c:	e001      	b.n	8004532 <I2SEx_TxISR_I2SExt+0x26>
 800452e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004532:	460a      	mov	r2, r1
 8004534:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d121      	bne.n	8004592 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a12      	ldr	r2, [pc, #72]	@ (800459c <I2SEx_TxISR_I2SExt+0x90>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <I2SEx_TxISR_I2SExt+0x50>
 8004558:	4b11      	ldr	r3, [pc, #68]	@ (80045a0 <I2SEx_TxISR_I2SExt+0x94>)
 800455a:	e001      	b.n	8004560 <I2SEx_TxISR_I2SExt+0x54>
 800455c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	490d      	ldr	r1, [pc, #52]	@ (800459c <I2SEx_TxISR_I2SExt+0x90>)
 8004568:	428b      	cmp	r3, r1
 800456a:	d101      	bne.n	8004570 <I2SEx_TxISR_I2SExt+0x64>
 800456c:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <I2SEx_TxISR_I2SExt+0x94>)
 800456e:	e001      	b.n	8004574 <I2SEx_TxISR_I2SExt+0x68>
 8004570:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004574:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004578:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d106      	bne.n	8004592 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ff81 	bl	8004494 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40003800 	.word	0x40003800
 80045a0:	40003400 	.word	0x40003400

080045a4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68d8      	ldr	r0, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b6:	1c99      	adds	r1, r3, #2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80045bc:	b282      	uxth	r2, r0
 80045be:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d113      	bne.n	8004600 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045e6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ff4a 	bl	8004494 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a20      	ldr	r2, [pc, #128]	@ (8004698 <I2SEx_RxISR_I2SExt+0x90>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <I2SEx_RxISR_I2SExt+0x16>
 800461a:	4b20      	ldr	r3, [pc, #128]	@ (800469c <I2SEx_RxISR_I2SExt+0x94>)
 800461c:	e001      	b.n	8004622 <I2SEx_RxISR_I2SExt+0x1a>
 800461e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004622:	68d8      	ldr	r0, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	1c99      	adds	r1, r3, #2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800462e:	b282      	uxth	r2, r0
 8004630:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d121      	bne.n	800468e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a12      	ldr	r2, [pc, #72]	@ (8004698 <I2SEx_RxISR_I2SExt+0x90>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <I2SEx_RxISR_I2SExt+0x50>
 8004654:	4b11      	ldr	r3, [pc, #68]	@ (800469c <I2SEx_RxISR_I2SExt+0x94>)
 8004656:	e001      	b.n	800465c <I2SEx_RxISR_I2SExt+0x54>
 8004658:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	490d      	ldr	r1, [pc, #52]	@ (8004698 <I2SEx_RxISR_I2SExt+0x90>)
 8004664:	428b      	cmp	r3, r1
 8004666:	d101      	bne.n	800466c <I2SEx_RxISR_I2SExt+0x64>
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <I2SEx_RxISR_I2SExt+0x94>)
 800466a:	e001      	b.n	8004670 <I2SEx_RxISR_I2SExt+0x68>
 800466c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004670:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004674:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff03 	bl	8004494 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40003800 	.word	0x40003800
 800469c:	40003400 	.word	0x40003400

080046a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e267      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d075      	beq.n	80047aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046be:	4b88      	ldr	r3, [pc, #544]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 030c 	and.w	r3, r3, #12
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d00c      	beq.n	80046e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ca:	4b85      	ldr	r3, [pc, #532]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d112      	bne.n	80046fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d6:	4b82      	ldr	r3, [pc, #520]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046e2:	d10b      	bne.n	80046fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e4:	4b7e      	ldr	r3, [pc, #504]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d05b      	beq.n	80047a8 <HAL_RCC_OscConfig+0x108>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d157      	bne.n	80047a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e242      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004704:	d106      	bne.n	8004714 <HAL_RCC_OscConfig+0x74>
 8004706:	4b76      	ldr	r3, [pc, #472]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a75      	ldr	r2, [pc, #468]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800470c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e01d      	b.n	8004750 <HAL_RCC_OscConfig+0xb0>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x98>
 800471e:	4b70      	ldr	r3, [pc, #448]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6f      	ldr	r2, [pc, #444]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b6d      	ldr	r3, [pc, #436]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a6c      	ldr	r2, [pc, #432]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0xb0>
 8004738:	4b69      	ldr	r3, [pc, #420]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a68      	ldr	r2, [pc, #416]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800473e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	4b66      	ldr	r3, [pc, #408]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a65      	ldr	r2, [pc, #404]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800474a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800474e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d013      	beq.n	8004780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004758:	f7fc fd92 	bl	8001280 <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004760:	f7fc fd8e 	bl	8001280 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b64      	cmp	r3, #100	@ 0x64
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e207      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	4b5b      	ldr	r3, [pc, #364]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0xc0>
 800477e:	e014      	b.n	80047aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fc fd7e 	bl	8001280 <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004788:	f7fc fd7a 	bl	8001280 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	@ 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e1f3      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479a:	4b51      	ldr	r3, [pc, #324]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0xe8>
 80047a6:	e000      	b.n	80047aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d063      	beq.n	800487e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047b6:	4b4a      	ldr	r3, [pc, #296]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c2:	4b47      	ldr	r3, [pc, #284]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d11c      	bne.n	8004808 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ce:	4b44      	ldr	r3, [pc, #272]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d116      	bne.n	8004808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047da:	4b41      	ldr	r3, [pc, #260]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_RCC_OscConfig+0x152>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e1c7      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f2:	4b3b      	ldr	r3, [pc, #236]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4937      	ldr	r1, [pc, #220]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004802:	4313      	orrs	r3, r2
 8004804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	e03a      	b.n	800487e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004810:	4b34      	ldr	r3, [pc, #208]	@ (80048e4 <HAL_RCC_OscConfig+0x244>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fc fd33 	bl	8001280 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481e:	f7fc fd2f 	bl	8001280 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e1a8      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004830:	4b2b      	ldr	r3, [pc, #172]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	4b28      	ldr	r3, [pc, #160]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4925      	ldr	r1, [pc, #148]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	e015      	b.n	800487e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004852:	4b24      	ldr	r3, [pc, #144]	@ (80048e4 <HAL_RCC_OscConfig+0x244>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fc fd12 	bl	8001280 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004860:	f7fc fd0e 	bl	8001280 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e187      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004872:	4b1b      	ldr	r3, [pc, #108]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d036      	beq.n	80048f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d016      	beq.n	80048c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004892:	4b15      	ldr	r3, [pc, #84]	@ (80048e8 <HAL_RCC_OscConfig+0x248>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fc fcf2 	bl	8001280 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a0:	f7fc fcee 	bl	8001280 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e167      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b2:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_RCC_OscConfig+0x240>)
 80048b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x200>
 80048be:	e01b      	b.n	80048f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c0:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <HAL_RCC_OscConfig+0x248>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fc fcdb 	bl	8001280 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048cc:	e00e      	b.n	80048ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ce:	f7fc fcd7 	bl	8001280 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d907      	bls.n	80048ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e150      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
 80048e0:	40023800 	.word	0x40023800
 80048e4:	42470000 	.word	0x42470000
 80048e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	4b88      	ldr	r3, [pc, #544]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ea      	bne.n	80048ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8097 	beq.w	8004a34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004906:	2300      	movs	r3, #0
 8004908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490a:	4b81      	ldr	r3, [pc, #516]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004924:	6413      	str	r3, [r2, #64]	@ 0x40
 8004926:	4b7a      	ldr	r3, [pc, #488]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004936:	4b77      	ldr	r3, [pc, #476]	@ (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d118      	bne.n	8004974 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004942:	4b74      	ldr	r3, [pc, #464]	@ (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a73      	ldr	r2, [pc, #460]	@ (8004b14 <HAL_RCC_OscConfig+0x474>)
 8004948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800494c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494e:	f7fc fc97 	bl	8001280 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004956:	f7fc fc93 	bl	8001280 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e10c      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004968:	4b6a      	ldr	r3, [pc, #424]	@ (8004b14 <HAL_RCC_OscConfig+0x474>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d106      	bne.n	800498a <HAL_RCC_OscConfig+0x2ea>
 800497c:	4b64      	ldr	r3, [pc, #400]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004980:	4a63      	ldr	r2, [pc, #396]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6713      	str	r3, [r2, #112]	@ 0x70
 8004988:	e01c      	b.n	80049c4 <HAL_RCC_OscConfig+0x324>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b05      	cmp	r3, #5
 8004990:	d10c      	bne.n	80049ac <HAL_RCC_OscConfig+0x30c>
 8004992:	4b5f      	ldr	r3, [pc, #380]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004996:	4a5e      	ldr	r2, [pc, #376]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	6713      	str	r3, [r2, #112]	@ 0x70
 800499e:	4b5c      	ldr	r3, [pc, #368]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049a4:	f043 0301 	orr.w	r3, r3, #1
 80049a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80049aa:	e00b      	b.n	80049c4 <HAL_RCC_OscConfig+0x324>
 80049ac:	4b58      	ldr	r3, [pc, #352]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b0:	4a57      	ldr	r2, [pc, #348]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049b8:	4b55      	ldr	r3, [pc, #340]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049bc:	4a54      	ldr	r2, [pc, #336]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049be:	f023 0304 	bic.w	r3, r3, #4
 80049c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d015      	beq.n	80049f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fc fc58 	bl	8001280 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d4:	f7fc fc54 	bl	8001280 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e0cb      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	4b49      	ldr	r3, [pc, #292]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0ee      	beq.n	80049d4 <HAL_RCC_OscConfig+0x334>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f8:	f7fc fc42 	bl	8001280 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fc fc3e 	bl	8001280 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e0b5      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a16:	4b3e      	ldr	r3, [pc, #248]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1ee      	bne.n	8004a00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a28:	4b39      	ldr	r3, [pc, #228]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2c:	4a38      	ldr	r2, [pc, #224]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 80a1 	beq.w	8004b80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a3e:	4b34      	ldr	r3, [pc, #208]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d05c      	beq.n	8004b04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d141      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a52:	4b31      	ldr	r3, [pc, #196]	@ (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fc fc12 	bl	8001280 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fc fc0e 	bl	8001280 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e087      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	4b27      	ldr	r3, [pc, #156]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69da      	ldr	r2, [r3, #28]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	019b      	lsls	r3, r3, #6
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	3b01      	subs	r3, #1
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	491b      	ldr	r1, [pc, #108]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aae:	f7fc fbe7 	bl	8001280 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab6:	f7fc fbe3 	bl	8001280 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e05c      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac8:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x416>
 8004ad4:	e054      	b.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad6:	4b10      	ldr	r3, [pc, #64]	@ (8004b18 <HAL_RCC_OscConfig+0x478>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fc fbd0 	bl	8001280 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fc fbcc 	bl	8001280 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e045      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af6:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <HAL_RCC_OscConfig+0x470>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x444>
 8004b02:	e03d      	b.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e038      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40007000 	.word	0x40007000
 8004b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b8c <HAL_RCC_OscConfig+0x4ec>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d028      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d121      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d11a      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d111      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	3b01      	subs	r3, #1
 8004b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800

08004b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0cc      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b68      	ldr	r3, [pc, #416]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d90c      	bls.n	8004bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b65      	ldr	r3, [pc, #404]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bba:	4b63      	ldr	r3, [pc, #396]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0b8      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be4:	4b59      	ldr	r3, [pc, #356]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a58      	ldr	r2, [pc, #352]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bfc:	4b53      	ldr	r3, [pc, #332]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a52      	ldr	r2, [pc, #328]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c08:	4b50      	ldr	r3, [pc, #320]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	494d      	ldr	r1, [pc, #308]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d044      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	4b47      	ldr	r3, [pc, #284]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d119      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e07f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d003      	beq.n	8004c4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e06f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e067      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6e:	4b37      	ldr	r3, [pc, #220]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 0203 	bic.w	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4934      	ldr	r1, [pc, #208]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c80:	f7fc fafe 	bl	8001280 <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c88:	f7fc fafa 	bl	8001280 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e04f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 020c 	and.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d1eb      	bne.n	8004c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b25      	ldr	r3, [pc, #148]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d20c      	bcs.n	8004cd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b22      	ldr	r3, [pc, #136]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc6:	4b20      	ldr	r3, [pc, #128]	@ (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e032      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce4:	4b19      	ldr	r3, [pc, #100]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4916      	ldr	r1, [pc, #88]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d02:	4b12      	ldr	r3, [pc, #72]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	490e      	ldr	r1, [pc, #56]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d16:	f000 f821 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	490a      	ldr	r1, [pc, #40]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c0>)
 8004d28:	5ccb      	ldrb	r3, [r1, r3]
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	4a09      	ldr	r2, [pc, #36]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d32:	4b09      	ldr	r3, [pc, #36]	@ (8004d58 <HAL_RCC_ClockConfig+0x1c8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fa5e 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40023c00 	.word	0x40023c00
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	0800a6cc 	.word	0x0800a6cc
 8004d54:	20000000 	.word	0x20000000
 8004d58:	20000004 	.word	0x20000004

08004d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d60:	b094      	sub	sp, #80	@ 0x50
 8004d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d74:	4b79      	ldr	r3, [pc, #484]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 030c 	and.w	r3, r3, #12
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d00d      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0x40>
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	f200 80e1 	bhi.w	8004f48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x34>
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d8e:	e0db      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d90:	4b73      	ldr	r3, [pc, #460]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d94:	e0db      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d96:	4b73      	ldr	r3, [pc, #460]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d9a:	e0d8      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004da4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004da6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d063      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	099b      	lsrs	r3, r3, #6
 8004db8:	2200      	movs	r2, #0
 8004dba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dce:	4622      	mov	r2, r4
 8004dd0:	462b      	mov	r3, r5
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f04f 0100 	mov.w	r1, #0
 8004dda:	0159      	lsls	r1, r3, #5
 8004ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de0:	0150      	lsls	r0, r2, #5
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4621      	mov	r1, r4
 8004de8:	1a51      	subs	r1, r2, r1
 8004dea:	6139      	str	r1, [r7, #16]
 8004dec:	4629      	mov	r1, r5
 8004dee:	eb63 0301 	sbc.w	r3, r3, r1
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e00:	4659      	mov	r1, fp
 8004e02:	018b      	lsls	r3, r1, #6
 8004e04:	4651      	mov	r1, sl
 8004e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e0a:	4651      	mov	r1, sl
 8004e0c:	018a      	lsls	r2, r1, #6
 8004e0e:	4651      	mov	r1, sl
 8004e10:	ebb2 0801 	subs.w	r8, r2, r1
 8004e14:	4659      	mov	r1, fp
 8004e16:	eb63 0901 	sbc.w	r9, r3, r1
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2e:	4690      	mov	r8, r2
 8004e30:	4699      	mov	r9, r3
 8004e32:	4623      	mov	r3, r4
 8004e34:	eb18 0303 	adds.w	r3, r8, r3
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	eb49 0303 	adc.w	r3, r9, r3
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e4e:	4629      	mov	r1, r5
 8004e50:	024b      	lsls	r3, r1, #9
 8004e52:	4621      	mov	r1, r4
 8004e54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e58:	4621      	mov	r1, r4
 8004e5a:	024a      	lsls	r2, r1, #9
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e62:	2200      	movs	r2, #0
 8004e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e6c:	f7fb f9ac 	bl	80001c8 <__aeabi_uldivmod>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4613      	mov	r3, r2
 8004e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e78:	e058      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7a:	4b38      	ldr	r3, [pc, #224]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	2200      	movs	r2, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	4611      	mov	r1, r2
 8004e86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	f04f 0000 	mov.w	r0, #0
 8004e9c:	f04f 0100 	mov.w	r1, #0
 8004ea0:	0159      	lsls	r1, r3, #5
 8004ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ea6:	0150      	lsls	r0, r2, #5
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4641      	mov	r1, r8
 8004eae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ec4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ec8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ecc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ed0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	00eb      	lsls	r3, r5, #3
 8004ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee2:	00e2      	lsls	r2, r4, #3
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	461d      	mov	r5, r3
 8004ee8:	4643      	mov	r3, r8
 8004eea:	18e3      	adds	r3, r4, r3
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	464b      	mov	r3, r9
 8004ef0:	eb45 0303 	adc.w	r3, r5, r3
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f02:	4629      	mov	r1, r5
 8004f04:	028b      	lsls	r3, r1, #10
 8004f06:	4621      	mov	r1, r4
 8004f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f0c:	4621      	mov	r1, r4
 8004f0e:	028a      	lsls	r2, r1, #10
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f16:	2200      	movs	r2, #0
 8004f18:	61bb      	str	r3, [r7, #24]
 8004f1a:	61fa      	str	r2, [r7, #28]
 8004f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f20:	f7fb f952 	bl	80001c8 <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4613      	mov	r3, r2
 8004f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	3301      	adds	r3, #1
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f46:	e002      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3750      	adds	r7, #80	@ 0x50
 8004f54:	46bd      	mov	sp, r7
 8004f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	00f42400 	.word	0x00f42400
 8004f64:	007a1200 	.word	0x007a1200

08004f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	@ (8004f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000000 	.word	0x20000000

08004f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f84:	f7ff fff0 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b05      	ldr	r3, [pc, #20]	@ (8004fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	0a9b      	lsrs	r3, r3, #10
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4903      	ldr	r1, [pc, #12]	@ (8004fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	0800a6dc 	.word	0x0800a6dc

08004fa8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d105      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d035      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fd0:	4b62      	ldr	r3, [pc, #392]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fd6:	f7fc f953 	bl	8001280 <HAL_GetTick>
 8004fda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fde:	f7fc f94f 	bl	8001280 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e0b0      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f0      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	019a      	lsls	r2, r3, #6
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	071b      	lsls	r3, r3, #28
 8005008:	4955      	ldr	r1, [pc, #340]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005010:	4b52      	ldr	r3, [pc, #328]	@ (800515c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005016:	f7fc f933 	bl	8001280 <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800501e:	f7fc f92f 	bl	8001280 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e090      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005030:	4b4b      	ldr	r3, [pc, #300]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8083 	beq.w	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	4b44      	ldr	r3, [pc, #272]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	4a43      	ldr	r2, [pc, #268]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005058:	6413      	str	r3, [r2, #64]	@ 0x40
 800505a:	4b41      	ldr	r3, [pc, #260]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005066:	4b3f      	ldr	r3, [pc, #252]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3e      	ldr	r2, [pc, #248]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800506c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005070:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005072:	f7fc f905 	bl	8001280 <HAL_GetTick>
 8005076:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005078:	e008      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507a:	f7fc f901 	bl	8001280 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e062      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800508c:	4b35      	ldr	r3, [pc, #212]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005098:	4b31      	ldr	r3, [pc, #196]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d02f      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d028      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c0:	4b29      	ldr	r3, [pc, #164]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050c6:	4b28      	ldr	r3, [pc, #160]	@ (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050cc:	4a24      	ldr	r2, [pc, #144]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050d2:	4b23      	ldr	r3, [pc, #140]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d114      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050de:	f7fc f8cf 	bl	8001280 <HAL_GetTick>
 80050e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e4:	e00a      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f7fc f8cb 	bl	8001280 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d901      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e02a      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fc:	4b18      	ldr	r3, [pc, #96]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0ee      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005110:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005114:	d10d      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005116:	4b12      	ldr	r3, [pc, #72]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800512a:	490d      	ldr	r1, [pc, #52]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]
 8005130:	e005      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005132:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	4a0a      	ldr	r2, [pc, #40]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005138:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800513c:	6093      	str	r3, [r2, #8]
 800513e:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005140:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514a:	4905      	ldr	r1, [pc, #20]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800514c:	4313      	orrs	r3, r2
 800514e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	42470068 	.word	0x42470068
 8005160:	40023800 	.word	0x40023800
 8005164:	40007000 	.word	0x40007000
 8005168:	42470e40 	.word	0x42470e40

0800516c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d13f      	bne.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800518a:	4b24      	ldr	r3, [pc, #144]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005192:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d006      	beq.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051a0:	d12f      	bne.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051a4:	617b      	str	r3, [r7, #20]
          break;
 80051a6:	e02f      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051a8:	4b1c      	ldr	r3, [pc, #112]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051b4:	d108      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051b6:	4b19      	ldr	r3, [pc, #100]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051be:	4a19      	ldr	r2, [pc, #100]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	e007      	b.n	80051d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051c8:	4b14      	ldr	r3, [pc, #80]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d0:	4a15      	ldr	r2, [pc, #84]	@ (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80051d8:	4b10      	ldr	r3, [pc, #64]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80051ec:	4b0b      	ldr	r3, [pc, #44]	@ (800521c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051f2:	0f1b      	lsrs	r3, r3, #28
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fe:	617b      	str	r3, [r7, #20]
          break;
 8005200:	e002      	b.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
          break;
 8005206:	bf00      	nop
        }
      }
      break;
 8005208:	e000      	b.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800520a:	bf00      	nop
    }
  }
  return frequency;
 800520c:	697b      	ldr	r3, [r7, #20]
}
 800520e:	4618      	mov	r0, r3
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800
 8005220:	00bb8000 	.word	0x00bb8000
 8005224:	007a1200 	.word	0x007a1200
 8005228:	00f42400 	.word	0x00f42400

0800522c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e07b      	b.n	8005336 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800524e:	d009      	beq.n	8005264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	61da      	str	r2, [r3, #28]
 8005256:	e005      	b.n	8005264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fb fdca 	bl	8000e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800529a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e8:	ea42 0103 	orr.w	r1, r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	f003 0104 	and.w	r1, r3, #4
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530a:	f003 0210 	and.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e041      	b.n	80053d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fb fd9f 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3304      	adds	r3, #4
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f000 fdb5 	bl	8005eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e041      	b.n	8005472 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f839 	bl	800547a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f000 fd66 	bl	8005eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e041      	b.n	8005524 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fb fd3f 	bl	8000f38 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3304      	adds	r3, #4
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f000 fd0d 	bl	8005eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_TIM_IC_Start_IT+0x1e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005546:	b2db      	uxtb	r3, r3
 8005548:	e013      	b.n	8005572 <HAL_TIM_IC_Start_IT+0x46>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b04      	cmp	r3, #4
 800554e:	d104      	bne.n	800555a <HAL_TIM_IC_Start_IT+0x2e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005556:	b2db      	uxtb	r3, r3
 8005558:	e00b      	b.n	8005572 <HAL_TIM_IC_Start_IT+0x46>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d104      	bne.n	800556a <HAL_TIM_IC_Start_IT+0x3e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005566:	b2db      	uxtb	r3, r3
 8005568:	e003      	b.n	8005572 <HAL_TIM_IC_Start_IT+0x46>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005570:	b2db      	uxtb	r3, r3
 8005572:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d104      	bne.n	8005584 <HAL_TIM_IC_Start_IT+0x58>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e013      	b.n	80055ac <HAL_TIM_IC_Start_IT+0x80>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b04      	cmp	r3, #4
 8005588:	d104      	bne.n	8005594 <HAL_TIM_IC_Start_IT+0x68>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005590:	b2db      	uxtb	r3, r3
 8005592:	e00b      	b.n	80055ac <HAL_TIM_IC_Start_IT+0x80>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b08      	cmp	r3, #8
 8005598:	d104      	bne.n	80055a4 <HAL_TIM_IC_Start_IT+0x78>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e003      	b.n	80055ac <HAL_TIM_IC_Start_IT+0x80>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ae:	7bbb      	ldrb	r3, [r7, #14]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d102      	bne.n	80055ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80055b4:	7b7b      	ldrb	r3, [r7, #13]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d001      	beq.n	80055be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e0cc      	b.n	8005758 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_IC_Start_IT+0xa2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055cc:	e013      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0xca>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d104      	bne.n	80055de <HAL_TIM_IC_Start_IT+0xb2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055dc:	e00b      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0xca>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_IC_Start_IT+0xc2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ec:	e003      	b.n	80055f6 <HAL_TIM_IC_Start_IT+0xca>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_IC_Start_IT+0xda>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005604:	e013      	b.n	800562e <HAL_TIM_IC_Start_IT+0x102>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d104      	bne.n	8005616 <HAL_TIM_IC_Start_IT+0xea>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005614:	e00b      	b.n	800562e <HAL_TIM_IC_Start_IT+0x102>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d104      	bne.n	8005626 <HAL_TIM_IC_Start_IT+0xfa>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005624:	e003      	b.n	800562e <HAL_TIM_IC_Start_IT+0x102>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b0c      	cmp	r3, #12
 8005632:	d841      	bhi.n	80056b8 <HAL_TIM_IC_Start_IT+0x18c>
 8005634:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <HAL_TIM_IC_Start_IT+0x110>)
 8005636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563a:	bf00      	nop
 800563c:	08005671 	.word	0x08005671
 8005640:	080056b9 	.word	0x080056b9
 8005644:	080056b9 	.word	0x080056b9
 8005648:	080056b9 	.word	0x080056b9
 800564c:	08005683 	.word	0x08005683
 8005650:	080056b9 	.word	0x080056b9
 8005654:	080056b9 	.word	0x080056b9
 8005658:	080056b9 	.word	0x080056b9
 800565c:	08005695 	.word	0x08005695
 8005660:	080056b9 	.word	0x080056b9
 8005664:	080056b9 	.word	0x080056b9
 8005668:	080056b9 	.word	0x080056b9
 800566c:	080056a7 	.word	0x080056a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0202 	orr.w	r2, r2, #2
 800567e:	60da      	str	r2, [r3, #12]
      break;
 8005680:	e01d      	b.n	80056be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0204 	orr.w	r2, r2, #4
 8005690:	60da      	str	r2, [r3, #12]
      break;
 8005692:	e014      	b.n	80056be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	60da      	str	r2, [r3, #12]
      break;
 80056a4:	e00b      	b.n	80056be <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f042 0210 	orr.w	r2, r2, #16
 80056b4:	60da      	str	r2, [r3, #12]
      break;
 80056b6:	e002      	b.n	80056be <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
      break;
 80056bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d148      	bne.n	8005756 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2201      	movs	r2, #1
 80056ca:	6839      	ldr	r1, [r7, #0]
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 f8a4 	bl	800681a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a22      	ldr	r2, [pc, #136]	@ (8005760 <HAL_TIM_IC_Start_IT+0x234>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d022      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x1f6>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e4:	d01d      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x1f6>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005764 <HAL_TIM_IC_Start_IT+0x238>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d018      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x1f6>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005768 <HAL_TIM_IC_Start_IT+0x23c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x1f6>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a1b      	ldr	r2, [pc, #108]	@ (800576c <HAL_TIM_IC_Start_IT+0x240>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00e      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x1f6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a19      	ldr	r2, [pc, #100]	@ (8005770 <HAL_TIM_IC_Start_IT+0x244>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d009      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x1f6>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a18      	ldr	r2, [pc, #96]	@ (8005774 <HAL_TIM_IC_Start_IT+0x248>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d004      	beq.n	8005722 <HAL_TIM_IC_Start_IT+0x1f6>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a16      	ldr	r2, [pc, #88]	@ (8005778 <HAL_TIM_IC_Start_IT+0x24c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d111      	bne.n	8005746 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b06      	cmp	r3, #6
 8005732:	d010      	beq.n	8005756 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005744:	e007      	b.n	8005756 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005756:	7bfb      	ldrb	r3, [r7, #15]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40010000 	.word	0x40010000
 8005764:	40000400 	.word	0x40000400
 8005768:	40000800 	.word	0x40000800
 800576c:	40000c00 	.word	0x40000c00
 8005770:	40010400 	.word	0x40010400
 8005774:	40014000 	.word	0x40014000
 8005778:	40001800 	.word	0x40001800

0800577c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e041      	b.n	8005814 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f839 	bl	800581c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f000 fb95 	bl	8005eec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0208 	bic.w	r2, r2, #8
 80057d0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6819      	ldr	r1, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005840:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005848:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005850:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005858:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d108      	bne.n	8005872 <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005860:	7bbb      	ldrb	r3, [r7, #14]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d105      	bne.n	8005872 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005866:	7b7b      	ldrb	r3, [r7, #13]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d102      	bne.n	8005872 <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800586c:	7b3b      	ldrb	r3, [r7, #12]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d001      	beq.n	8005876 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e035      	b.n	80058e2 <HAL_TIM_OnePulse_Start+0xb2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2201      	movs	r2, #1
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 ffbb 	bl	800681a <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2201      	movs	r2, #1
 80058aa:	2104      	movs	r1, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 ffb4 	bl	800681a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a0d      	ldr	r2, [pc, #52]	@ (80058ec <HAL_TIM_OnePulse_Start+0xbc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d004      	beq.n	80058c6 <HAL_TIM_OnePulse_Start+0x96>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0b      	ldr	r2, [pc, #44]	@ (80058f0 <HAL_TIM_OnePulse_Start+0xc0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d101      	bne.n	80058ca <HAL_TIM_OnePulse_Start+0x9a>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e000      	b.n	80058cc <HAL_TIM_OnePulse_Start+0x9c>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <HAL_TIM_OnePulse_Start+0xb0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40010000 	.word	0x40010000
 80058f0:	40010400 	.word	0x40010400

080058f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d020      	beq.n	8005958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01b      	beq.n	8005958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0202 	mvn.w	r2, #2
 8005928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb f91e 	bl	8000b80 <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fab2 	bl	8005eb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fab9 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d020      	beq.n	80059a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0204 	mvn.w	r2, #4
 8005974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fb f8f8 	bl	8000b80 <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fa8c 	bl	8005eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fa93 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d020      	beq.n	80059f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01b      	beq.n	80059f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0208 	mvn.w	r2, #8
 80059c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2204      	movs	r2, #4
 80059c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fb f8d2 	bl	8000b80 <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa66 	bl	8005eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa6d 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d020      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01b      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0210 	mvn.w	r2, #16
 8005a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2208      	movs	r2, #8
 8005a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fb f8ac 	bl	8000b80 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa40 	bl	8005eb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fa47 	bl	8005ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0201 	mvn.w	r2, #1
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fa1e 	bl	8005e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00c      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 ffc8 	bl	8006a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00c      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa18 	bl	8005ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f003 0320 	and.w	r3, r3, #32
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00c      	beq.n	8005acc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f06f 0220 	mvn.w	r2, #32
 8005ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 ff9a 	bl	8006a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005acc:	bf00      	nop
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e088      	b.n	8005c04 <HAL_TIM_IC_ConfigChannel+0x130>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11b      	bne.n	8005b38 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b10:	f000 fcda 	bl	80064c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 020c 	bic.w	r2, r2, #12
 8005b22:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6999      	ldr	r1, [r3, #24]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	619a      	str	r2, [r3, #24]
 8005b36:	e060      	b.n	8005bfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d11c      	bne.n	8005b78 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005b4e:	f000 fd5e 	bl	800660e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699a      	ldr	r2, [r3, #24]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005b60:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6999      	ldr	r1, [r3, #24]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	619a      	str	r2, [r3, #24]
 8005b76:	e040      	b.n	8005bfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d11b      	bne.n	8005bb6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005b8e:	f000 fdab 	bl	80066e8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 020c 	bic.w	r2, r2, #12
 8005ba0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69d9      	ldr	r1, [r3, #28]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	61da      	str	r2, [r3, #28]
 8005bb4:	e021      	b.n	8005bfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b0c      	cmp	r3, #12
 8005bba:	d11c      	bne.n	8005bf6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005bcc:	f000 fdc8 	bl	8006760 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005bde:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69d9      	ldr	r1, [r3, #28]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	021a      	lsls	r2, r3, #8
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	61da      	str	r2, [r3, #28]
 8005bf4:	e001      	b.n	8005bfa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e0ae      	b.n	8005d88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b0c      	cmp	r3, #12
 8005c36:	f200 809f 	bhi.w	8005d78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c75 	.word	0x08005c75
 8005c44:	08005d79 	.word	0x08005d79
 8005c48:	08005d79 	.word	0x08005d79
 8005c4c:	08005d79 	.word	0x08005d79
 8005c50:	08005cb5 	.word	0x08005cb5
 8005c54:	08005d79 	.word	0x08005d79
 8005c58:	08005d79 	.word	0x08005d79
 8005c5c:	08005d79 	.word	0x08005d79
 8005c60:	08005cf7 	.word	0x08005cf7
 8005c64:	08005d79 	.word	0x08005d79
 8005c68:	08005d79 	.word	0x08005d79
 8005c6c:	08005d79 	.word	0x08005d79
 8005c70:	08005d37 	.word	0x08005d37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f9e2 	bl	8006044 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0208 	orr.w	r2, r2, #8
 8005c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0204 	bic.w	r2, r2, #4
 8005c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6999      	ldr	r1, [r3, #24]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	619a      	str	r2, [r3, #24]
      break;
 8005cb2:	e064      	b.n	8005d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fa32 	bl	8006124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6999      	ldr	r1, [r3, #24]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	021a      	lsls	r2, r3, #8
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	619a      	str	r2, [r3, #24]
      break;
 8005cf4:	e043      	b.n	8005d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fa87 	bl	8006210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f042 0208 	orr.w	r2, r2, #8
 8005d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69da      	ldr	r2, [r3, #28]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0204 	bic.w	r2, r2, #4
 8005d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69d9      	ldr	r1, [r3, #28]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	61da      	str	r2, [r3, #28]
      break;
 8005d34:	e023      	b.n	8005d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fadb 	bl	80062f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69d9      	ldr	r1, [r3, #28]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	021a      	lsls	r2, r3, #8
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	61da      	str	r2, [r3, #28]
      break;
 8005d76:	e002      	b.n	8005d7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e031      	b.n	8005e0c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 faf2 	bl	80063a4 <TIM_SlaveTimer_SetConfig>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e018      	b.n	8005e0c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005de8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005df8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b0c      	cmp	r3, #12
 8005e26:	d831      	bhi.n	8005e8c <HAL_TIM_ReadCapturedValue+0x78>
 8005e28:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2e:	bf00      	nop
 8005e30:	08005e65 	.word	0x08005e65
 8005e34:	08005e8d 	.word	0x08005e8d
 8005e38:	08005e8d 	.word	0x08005e8d
 8005e3c:	08005e8d 	.word	0x08005e8d
 8005e40:	08005e6f 	.word	0x08005e6f
 8005e44:	08005e8d 	.word	0x08005e8d
 8005e48:	08005e8d 	.word	0x08005e8d
 8005e4c:	08005e8d 	.word	0x08005e8d
 8005e50:	08005e79 	.word	0x08005e79
 8005e54:	08005e8d 	.word	0x08005e8d
 8005e58:	08005e8d 	.word	0x08005e8d
 8005e5c:	08005e8d 	.word	0x08005e8d
 8005e60:	08005e83 	.word	0x08005e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6a:	60fb      	str	r3, [r7, #12]

      break;
 8005e6c:	e00f      	b.n	8005e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e74:	60fb      	str	r3, [r7, #12]

      break;
 8005e76:	e00a      	b.n	8005e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e7e:	60fb      	str	r3, [r7, #12]

      break;
 8005e80:	e005      	b.n	8005e8e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e88:	60fb      	str	r3, [r7, #12]

      break;
 8005e8a:	e000      	b.n	8005e8e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005e8c:	bf00      	nop
  }

  return tmpreg;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a46      	ldr	r2, [pc, #280]	@ (8006018 <TIM_Base_SetConfig+0x12c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d013      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0a:	d00f      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a43      	ldr	r2, [pc, #268]	@ (800601c <TIM_Base_SetConfig+0x130>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a42      	ldr	r2, [pc, #264]	@ (8006020 <TIM_Base_SetConfig+0x134>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d007      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a41      	ldr	r2, [pc, #260]	@ (8006024 <TIM_Base_SetConfig+0x138>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_Base_SetConfig+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a40      	ldr	r2, [pc, #256]	@ (8006028 <TIM_Base_SetConfig+0x13c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d108      	bne.n	8005f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a35      	ldr	r2, [pc, #212]	@ (8006018 <TIM_Base_SetConfig+0x12c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d02b      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4c:	d027      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a32      	ldr	r2, [pc, #200]	@ (800601c <TIM_Base_SetConfig+0x130>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d023      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a31      	ldr	r2, [pc, #196]	@ (8006020 <TIM_Base_SetConfig+0x134>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d01f      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a30      	ldr	r2, [pc, #192]	@ (8006024 <TIM_Base_SetConfig+0x138>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01b      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a2f      	ldr	r2, [pc, #188]	@ (8006028 <TIM_Base_SetConfig+0x13c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d017      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a2e      	ldr	r2, [pc, #184]	@ (800602c <TIM_Base_SetConfig+0x140>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a2d      	ldr	r2, [pc, #180]	@ (8006030 <TIM_Base_SetConfig+0x144>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00f      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a2c      	ldr	r2, [pc, #176]	@ (8006034 <TIM_Base_SetConfig+0x148>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00b      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a2b      	ldr	r2, [pc, #172]	@ (8006038 <TIM_Base_SetConfig+0x14c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d007      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a2a      	ldr	r2, [pc, #168]	@ (800603c <TIM_Base_SetConfig+0x150>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d003      	beq.n	8005f9e <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a29      	ldr	r2, [pc, #164]	@ (8006040 <TIM_Base_SetConfig+0x154>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d108      	bne.n	8005fb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a10      	ldr	r2, [pc, #64]	@ (8006018 <TIM_Base_SetConfig+0x12c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_Base_SetConfig+0xf8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a12      	ldr	r2, [pc, #72]	@ (8006028 <TIM_Base_SetConfig+0x13c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d103      	bne.n	8005fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d105      	bne.n	800600a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f023 0201 	bic.w	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	611a      	str	r2, [r3, #16]
  }
}
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40000c00 	.word	0x40000c00
 8006028:	40010400 	.word	0x40010400
 800602c:	40014000 	.word	0x40014000
 8006030:	40014400 	.word	0x40014400
 8006034:	40014800 	.word	0x40014800
 8006038:	40001800 	.word	0x40001800
 800603c:	40001c00 	.word	0x40001c00
 8006040:	40002000 	.word	0x40002000

08006044 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f023 0201 	bic.w	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4313      	orrs	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f023 0302 	bic.w	r3, r3, #2
 800608c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a20      	ldr	r2, [pc, #128]	@ (800611c <TIM_OC1_SetConfig+0xd8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC1_SetConfig+0x64>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006120 <TIM_OC1_SetConfig+0xdc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d10c      	bne.n	80060c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f023 0308 	bic.w	r3, r3, #8
 80060ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f023 0304 	bic.w	r3, r3, #4
 80060c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a15      	ldr	r2, [pc, #84]	@ (800611c <TIM_OC1_SetConfig+0xd8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d003      	beq.n	80060d2 <TIM_OC1_SetConfig+0x8e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a14      	ldr	r2, [pc, #80]	@ (8006120 <TIM_OC1_SetConfig+0xdc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d111      	bne.n	80060f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	621a      	str	r2, [r3, #32]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40010000 	.word	0x40010000
 8006120:	40010400 	.word	0x40010400

08006124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f023 0210 	bic.w	r2, r3, #16
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	021b      	lsls	r3, r3, #8
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f023 0320 	bic.w	r3, r3, #32
 800616e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a22      	ldr	r2, [pc, #136]	@ (8006208 <TIM_OC2_SetConfig+0xe4>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d003      	beq.n	800618c <TIM_OC2_SetConfig+0x68>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a21      	ldr	r2, [pc, #132]	@ (800620c <TIM_OC2_SetConfig+0xe8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d10d      	bne.n	80061a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a17      	ldr	r2, [pc, #92]	@ (8006208 <TIM_OC2_SetConfig+0xe4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_OC2_SetConfig+0x94>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a16      	ldr	r2, [pc, #88]	@ (800620c <TIM_OC2_SetConfig+0xe8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d113      	bne.n	80061e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	621a      	str	r2, [r3, #32]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40010000 	.word	0x40010000
 800620c:	40010400 	.word	0x40010400

08006210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a21      	ldr	r2, [pc, #132]	@ (80062f0 <TIM_OC3_SetConfig+0xe0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <TIM_OC3_SetConfig+0x66>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a20      	ldr	r2, [pc, #128]	@ (80062f4 <TIM_OC3_SetConfig+0xe4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d10d      	bne.n	8006292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800627c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a16      	ldr	r2, [pc, #88]	@ (80062f0 <TIM_OC3_SetConfig+0xe0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC3_SetConfig+0x92>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a15      	ldr	r2, [pc, #84]	@ (80062f4 <TIM_OC3_SetConfig+0xe4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d113      	bne.n	80062ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40010000 	.word	0x40010000
 80062f4:	40010400 	.word	0x40010400

080062f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800632e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	031b      	lsls	r3, r3, #12
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a12      	ldr	r2, [pc, #72]	@ (800639c <TIM_OC4_SetConfig+0xa4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_OC4_SetConfig+0x68>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a11      	ldr	r2, [pc, #68]	@ (80063a0 <TIM_OC4_SetConfig+0xa8>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d109      	bne.n	8006374 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	019b      	lsls	r3, r3, #6
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	621a      	str	r2, [r3, #32]
}
 800638e:	bf00      	nop
 8006390:	371c      	adds	r7, #28
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40010000 	.word	0x40010000
 80063a0:	40010400 	.word	0x40010400

080063a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	f023 0307 	bic.w	r3, r3, #7
 80063d2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b70      	cmp	r3, #112	@ 0x70
 80063ec:	d01a      	beq.n	8006424 <TIM_SlaveTimer_SetConfig+0x80>
 80063ee:	2b70      	cmp	r3, #112	@ 0x70
 80063f0:	d860      	bhi.n	80064b4 <TIM_SlaveTimer_SetConfig+0x110>
 80063f2:	2b60      	cmp	r3, #96	@ 0x60
 80063f4:	d054      	beq.n	80064a0 <TIM_SlaveTimer_SetConfig+0xfc>
 80063f6:	2b60      	cmp	r3, #96	@ 0x60
 80063f8:	d85c      	bhi.n	80064b4 <TIM_SlaveTimer_SetConfig+0x110>
 80063fa:	2b50      	cmp	r3, #80	@ 0x50
 80063fc:	d046      	beq.n	800648c <TIM_SlaveTimer_SetConfig+0xe8>
 80063fe:	2b50      	cmp	r3, #80	@ 0x50
 8006400:	d858      	bhi.n	80064b4 <TIM_SlaveTimer_SetConfig+0x110>
 8006402:	2b40      	cmp	r3, #64	@ 0x40
 8006404:	d019      	beq.n	800643a <TIM_SlaveTimer_SetConfig+0x96>
 8006406:	2b40      	cmp	r3, #64	@ 0x40
 8006408:	d854      	bhi.n	80064b4 <TIM_SlaveTimer_SetConfig+0x110>
 800640a:	2b30      	cmp	r3, #48	@ 0x30
 800640c:	d055      	beq.n	80064ba <TIM_SlaveTimer_SetConfig+0x116>
 800640e:	2b30      	cmp	r3, #48	@ 0x30
 8006410:	d850      	bhi.n	80064b4 <TIM_SlaveTimer_SetConfig+0x110>
 8006412:	2b20      	cmp	r3, #32
 8006414:	d051      	beq.n	80064ba <TIM_SlaveTimer_SetConfig+0x116>
 8006416:	2b20      	cmp	r3, #32
 8006418:	d84c      	bhi.n	80064b4 <TIM_SlaveTimer_SetConfig+0x110>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d04d      	beq.n	80064ba <TIM_SlaveTimer_SetConfig+0x116>
 800641e:	2b10      	cmp	r3, #16
 8006420:	d04b      	beq.n	80064ba <TIM_SlaveTimer_SetConfig+0x116>
 8006422:	e047      	b.n	80064b4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006434:	f000 f9d1 	bl	80067da <TIM_ETR_SetConfig>
      break;
 8006438:	e040      	b.n	80064bc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b05      	cmp	r3, #5
 8006440:	d101      	bne.n	8006446 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e03b      	b.n	80064be <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6a1a      	ldr	r2, [r3, #32]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800646c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	4313      	orrs	r3, r2
 8006478:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	621a      	str	r2, [r3, #32]
      break;
 800648a:	e017      	b.n	80064bc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006498:	461a      	mov	r2, r3
 800649a:	f000 f889 	bl	80065b0 <TIM_TI1_ConfigInputStage>
      break;
 800649e:	e00d      	b.n	80064bc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ac:	461a      	mov	r2, r3
 80064ae:	f000 f8eb 	bl	8006688 <TIM_TI2_ConfigInputStage>
      break;
 80064b2:	e003      	b.n	80064bc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]
      break;
 80064b8:	e000      	b.n	80064bc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80064ba:	bf00      	nop
  }

  return status;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f023 0201 	bic.w	r2, r3, #1
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a28      	ldr	r2, [pc, #160]	@ (8006594 <TIM_TI1_SetConfig+0xcc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01b      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fc:	d017      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a25      	ldr	r2, [pc, #148]	@ (8006598 <TIM_TI1_SetConfig+0xd0>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a24      	ldr	r2, [pc, #144]	@ (800659c <TIM_TI1_SetConfig+0xd4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00f      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a23      	ldr	r2, [pc, #140]	@ (80065a0 <TIM_TI1_SetConfig+0xd8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00b      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4a22      	ldr	r2, [pc, #136]	@ (80065a4 <TIM_TI1_SetConfig+0xdc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d007      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a21      	ldr	r2, [pc, #132]	@ (80065a8 <TIM_TI1_SetConfig+0xe0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_TI1_SetConfig+0x66>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a20      	ldr	r2, [pc, #128]	@ (80065ac <TIM_TI1_SetConfig+0xe4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d101      	bne.n	8006532 <TIM_TI1_SetConfig+0x6a>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <TIM_TI1_SetConfig+0x6c>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0303 	bic.w	r3, r3, #3
 800653e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	e003      	b.n	8006552 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f043 0301 	orr.w	r3, r3, #1
 8006550:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	011b      	lsls	r3, r3, #4
 800655e:	b2db      	uxtb	r3, r3
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f023 030a 	bic.w	r3, r3, #10
 800656c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f003 030a 	and.w	r3, r3, #10
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40010000 	.word	0x40010000
 8006598:	40000400 	.word	0x40000400
 800659c:	40000800 	.word	0x40000800
 80065a0:	40000c00 	.word	0x40000c00
 80065a4:	40010400 	.word	0x40010400
 80065a8:	40014000 	.word	0x40014000
 80065ac:	40001800 	.word	0x40001800

080065b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f023 0201 	bic.w	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f023 030a 	bic.w	r3, r3, #10
 80065ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	621a      	str	r2, [r3, #32]
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800660e:	b480      	push	{r7}
 8006610:	b087      	sub	sp, #28
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
 800661a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f023 0210 	bic.w	r2, r3, #16
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800663a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800664c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	031b      	lsls	r3, r3, #12
 8006652:	b29b      	uxth	r3, r3
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006660:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	621a      	str	r2, [r3, #32]
}
 800667c:	bf00      	nop
 800667e:	371c      	adds	r7, #28
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f023 0210 	bic.w	r2, r3, #16
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	031b      	lsls	r3, r3, #12
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	621a      	str	r2, [r3, #32]
}
 80066dc:	bf00      	nop
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f023 0303 	bic.w	r3, r3, #3
 8006714:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006724:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	b2db      	uxtb	r3, r3
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006738:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800679e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	031b      	lsls	r3, r3, #12
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80067b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	031b      	lsls	r3, r3, #12
 80067b8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067da:	b480      	push	{r7}
 80067dc:	b087      	sub	sp, #28
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	021a      	lsls	r2, r3, #8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	431a      	orrs	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	4313      	orrs	r3, r2
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	4313      	orrs	r3, r2
 8006806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	609a      	str	r2, [r3, #8]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800681a:	b480      	push	{r7}
 800681c:	b087      	sub	sp, #28
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	2201      	movs	r2, #1
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a1a      	ldr	r2, [r3, #32]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	43db      	mvns	r3, r3
 800683c:	401a      	ands	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a1a      	ldr	r2, [r3, #32]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f003 031f 	and.w	r3, r3, #31
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	fa01 f303 	lsl.w	r3, r1, r3
 8006852:	431a      	orrs	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	621a      	str	r2, [r3, #32]
}
 8006858:	bf00      	nop
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006878:	2302      	movs	r3, #2
 800687a:	e05a      	b.n	8006932 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a21      	ldr	r2, [pc, #132]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d022      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c8:	d01d      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d018      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006948 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d013      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1a      	ldr	r2, [pc, #104]	@ (800694c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00e      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a18      	ldr	r2, [pc, #96]	@ (8006950 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d009      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a17      	ldr	r2, [pc, #92]	@ (8006954 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a15      	ldr	r2, [pc, #84]	@ (8006958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d10c      	bne.n	8006920 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800690c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	4313      	orrs	r3, r2
 8006916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40010000 	.word	0x40010000
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40010400 	.word	0x40010400
 8006954:	40014000 	.word	0x40014000
 8006958:	40001800 	.word	0x40001800

0800695c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006974:	2302      	movs	r3, #2
 8006976:	e03d      	b.n	80069f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a28:	b084      	sub	sp, #16
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	f107 001c 	add.w	r0, r7, #28
 8006a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d123      	bne.n	8006a8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d105      	bne.n	8006a7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f9dc 	bl	8006e3c <USB_CoreReset>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
 8006a88:	e01b      	b.n	8006ac2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f9d0 	bl	8006e3c <USB_CoreReset>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006aa0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ab4:	e005      	b.n	8006ac2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ac2:	7fbb      	ldrb	r3, [r7, #30]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10b      	bne.n	8006ae0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f043 0206 	orr.w	r2, r3, #6
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f043 0220 	orr.w	r2, r3, #32
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aec:	b004      	add	sp, #16
 8006aee:	4770      	bx	lr

08006af0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f043 0201 	orr.w	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f023 0201 	bic.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d115      	bne.n	8006b82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b62:	200a      	movs	r0, #10
 8006b64:	f7fa fb98 	bl	8001298 <HAL_Delay>
      ms += 10U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	330a      	adds	r3, #10
 8006b6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f956 	bl	8006e20 <USB_GetMode>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d01e      	beq.n	8006bb8 <USB_SetCurrentMode+0x84>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b7e:	d9f0      	bls.n	8006b62 <USB_SetCurrentMode+0x2e>
 8006b80:	e01a      	b.n	8006bb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d115      	bne.n	8006bb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b94:	200a      	movs	r0, #10
 8006b96:	f7fa fb7f 	bl	8001298 <HAL_Delay>
      ms += 10U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	330a      	adds	r3, #10
 8006b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f93d 	bl	8006e20 <USB_GetMode>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <USB_SetCurrentMode+0x84>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bb0:	d9f0      	bls.n	8006b94 <USB_SetCurrentMode+0x60>
 8006bb2:	e001      	b.n	8006bb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e005      	b.n	8006bc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2bc8      	cmp	r3, #200	@ 0xc8
 8006bbc:	d101      	bne.n	8006bc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006be6:	d901      	bls.n	8006bec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e01b      	b.n	8006c24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	daf2      	bge.n	8006bda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	019b      	lsls	r3, r3, #6
 8006bfc:	f043 0220 	orr.w	r2, r3, #32
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c10:	d901      	bls.n	8006c16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e006      	b.n	8006c24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d0f0      	beq.n	8006c04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c48:	d901      	bls.n	8006c4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e018      	b.n	8006c80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	daf2      	bge.n	8006c3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2210      	movs	r2, #16
 8006c5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c6c:	d901      	bls.n	8006c72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e006      	b.n	8006c80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d0f0      	beq.n	8006c60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b089      	sub	sp, #36	@ 0x24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	4611      	mov	r1, r2
 8006c98:	461a      	mov	r2, r3
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	71fb      	strb	r3, [r7, #7]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006caa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d123      	bne.n	8006cfa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006cb2:	88bb      	ldrh	r3, [r7, #4]
 8006cb4:	3303      	adds	r3, #3
 8006cb6:	089b      	lsrs	r3, r3, #2
 8006cb8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	e018      	b.n	8006cf2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	031a      	lsls	r2, r3, #12
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ccc:	461a      	mov	r2, r3
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d3e2      	bcc.n	8006cc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3724      	adds	r7, #36	@ 0x24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b08b      	sub	sp, #44	@ 0x2c
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	089b      	lsrs	r3, r3, #2
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d2e:	2300      	movs	r3, #0
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	e014      	b.n	8006d5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d42:	3301      	adds	r3, #1
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	3301      	adds	r3, #1
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	3301      	adds	r3, #1
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	3301      	adds	r3, #1
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	623b      	str	r3, [r7, #32]
 8006d5e:	6a3a      	ldr	r2, [r7, #32]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d3e6      	bcc.n	8006d34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d66:	8bfb      	ldrh	r3, [r7, #30]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01e      	beq.n	8006daa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d76:	461a      	mov	r2, r3
 8006d78:	f107 0310 	add.w	r3, r7, #16
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	701a      	strb	r2, [r3, #0]
      i++;
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	3301      	adds	r3, #1
 8006d96:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006d9e:	8bfb      	ldrh	r3, [r7, #30]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006da4:	8bfb      	ldrh	r3, [r7, #30]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1ea      	bne.n	8006d80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	372c      	adds	r7, #44	@ 0x2c
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006dfe:	78fb      	ldrb	r3, [r7, #3]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e12:	68bb      	ldr	r3, [r7, #8]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e54:	d901      	bls.n	8006e5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e01b      	b.n	8006e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	daf2      	bge.n	8006e48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f043 0201 	orr.w	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e7e:	d901      	bls.n	8006e84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e006      	b.n	8006e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d0f0      	beq.n	8006e72 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
	...

08006ea0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d119      	bne.n	8006f2a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10a      	bne.n	8006f14 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f0c:	f043 0304 	orr.w	r3, r3, #4
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	e014      	b.n	8006f3e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f22:	f023 0304 	bic.w	r3, r3, #4
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	e009      	b.n	8006f3e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f38:	f023 0304 	bic.w	r3, r3, #4
 8006f3c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f3e:	2110      	movs	r1, #16
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff fe43 	bl	8006bcc <USB_FlushTxFifo>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff fe6d 	bl	8006c30 <USB_FlushRxFifo>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	e015      	b.n	8006f92 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f72:	461a      	mov	r2, r3
 8006f74:	f04f 33ff 	mov.w	r3, #4294967295
 8006f78:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f86:	461a      	mov	r2, r3
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f96:	461a      	mov	r2, r3
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d3e3      	bcc.n	8006f66 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006faa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a18      	ldr	r2, [pc, #96]	@ (8007010 <USB_HostInit+0x170>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d10b      	bne.n	8006fcc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fba:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a15      	ldr	r2, [pc, #84]	@ (8007014 <USB_HostInit+0x174>)
 8006fc0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a14      	ldr	r2, [pc, #80]	@ (8007018 <USB_HostInit+0x178>)
 8006fc6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006fca:	e009      	b.n	8006fe0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2280      	movs	r2, #128	@ 0x80
 8006fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a11      	ldr	r2, [pc, #68]	@ (800701c <USB_HostInit+0x17c>)
 8006fd6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a11      	ldr	r2, [pc, #68]	@ (8007020 <USB_HostInit+0x180>)
 8006fdc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d105      	bne.n	8006ff4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f043 0210 	orr.w	r2, r3, #16
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699a      	ldr	r2, [r3, #24]
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <USB_HostInit+0x184>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800700c:	b004      	add	sp, #16
 800700e:	4770      	bx	lr
 8007010:	40040000 	.word	0x40040000
 8007014:	01000200 	.word	0x01000200
 8007018:	00e00300 	.word	0x00e00300
 800701c:	00600080 	.word	0x00600080
 8007020:	004000e0 	.word	0x004000e0
 8007024:	a3200008 	.word	0xa3200008

08007028 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	68f9      	ldr	r1, [r7, #12]
 800705c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007060:	4313      	orrs	r3, r2
 8007062:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d107      	bne.n	800707a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007070:	461a      	mov	r2, r3
 8007072:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007076:	6053      	str	r3, [r2, #4]
 8007078:	e00c      	b.n	8007094 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d107      	bne.n	8007090 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007086:	461a      	mov	r2, r3
 8007088:	f241 7370 	movw	r3, #6000	@ 0x1770
 800708c:	6053      	str	r3, [r2, #4]
 800708e:	e001      	b.n	8007094 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e000      	b.n	8007096 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80070c2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80070cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80070d2:	2064      	movs	r0, #100	@ 0x64
 80070d4:	f7fa f8e0 	bl	8001298 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80070e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070e6:	200a      	movs	r0, #10
 80070e8:	f7fa f8d6 	bl	8001298 <HAL_Delay>

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800711a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <USB_DriveVbus+0x44>
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d106      	bne.n	800713a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007134:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007138:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007144:	d109      	bne.n	800715a <USB_DriveVbus+0x64>
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007154:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007158:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	0c5b      	lsrs	r3, r3, #17
 8007186:	f003 0303 	and.w	r3, r3, #3
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	b29b      	uxth	r3, r3
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	4608      	mov	r0, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	70fb      	strb	r3, [r7, #3]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70bb      	strb	r3, [r7, #2]
 80071ce:	4613      	mov	r3, r2
 80071d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e6:	461a      	mov	r2, r3
 80071e8:	f04f 33ff 	mov.w	r3, #4294967295
 80071ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d87c      	bhi.n	80072f0 <USB_HC_Init+0x138>
 80071f6:	a201      	add	r2, pc, #4	@ (adr r2, 80071fc <USB_HC_Init+0x44>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	080072b3 	.word	0x080072b3
 8007204:	0800720d 	.word	0x0800720d
 8007208:	08007275 	.word	0x08007275
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4413      	add	r3, r2
 8007214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007218:	461a      	mov	r2, r3
 800721a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800721e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007220:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007224:	2b00      	cmp	r3, #0
 8007226:	da10      	bge.n	800724a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	440a      	add	r2, r1
 800723e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007246:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007248:	e055      	b.n	80072f6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a6f      	ldr	r2, [pc, #444]	@ (800740c <USB_HC_Init+0x254>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d151      	bne.n	80072f6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	4413      	add	r3, r2
 800725a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	0151      	lsls	r1, r2, #5
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	440a      	add	r2, r1
 8007268:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800726c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007270:	60d3      	str	r3, [r2, #12]
      break;
 8007272:	e040      	b.n	80072f6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	4413      	add	r3, r2
 800727c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007280:	461a      	mov	r2, r3
 8007282:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007286:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007288:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800728c:	2b00      	cmp	r3, #0
 800728e:	da34      	bge.n	80072fa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	4413      	add	r3, r2
 8007298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	78fa      	ldrb	r2, [r7, #3]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072ae:	60d3      	str	r3, [r2, #12]
      }

      break;
 80072b0:	e023      	b.n	80072fa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072be:	461a      	mov	r2, r3
 80072c0:	f240 2325 	movw	r3, #549	@ 0x225
 80072c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da17      	bge.n	80072fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80072ce:	78fb      	ldrb	r3, [r7, #3]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072e8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80072ec:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072ee:	e006      	b.n	80072fe <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	77fb      	strb	r3, [r7, #31]
      break;
 80072f4:	e004      	b.n	8007300 <USB_HC_Init+0x148>
      break;
 80072f6:	bf00      	nop
 80072f8:	e002      	b.n	8007300 <USB_HC_Init+0x148>
      break;
 80072fa:	bf00      	nop
 80072fc:	e000      	b.n	8007300 <USB_HC_Init+0x148>
      break;
 80072fe:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	4413      	add	r3, r2
 8007308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800730c:	461a      	mov	r2, r3
 800730e:	2300      	movs	r3, #0
 8007310:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	4413      	add	r3, r2
 800731a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	0151      	lsls	r1, r2, #5
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	440a      	add	r2, r1
 8007328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800732c:	f043 0302 	orr.w	r3, r3, #2
 8007330:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	2101      	movs	r1, #1
 8007342:	fa01 f303 	lsl.w	r3, r1, r3
 8007346:	6939      	ldr	r1, [r7, #16]
 8007348:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800734c:	4313      	orrs	r3, r2
 800734e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800735c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007360:	2b00      	cmp	r3, #0
 8007362:	da03      	bge.n	800736c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e001      	b.n	8007370 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff fef9 	bl	8007168 <USB_GetHostSpeed>
 8007376:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007378:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800737c:	2b02      	cmp	r3, #2
 800737e:	d106      	bne.n	800738e <USB_HC_Init+0x1d6>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d003      	beq.n	800738e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007386:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	e001      	b.n	8007392 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007392:	787b      	ldrb	r3, [r7, #1]
 8007394:	059b      	lsls	r3, r3, #22
 8007396:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800739a:	78bb      	ldrb	r3, [r7, #2]
 800739c:	02db      	lsls	r3, r3, #11
 800739e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073a2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80073a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073a8:	049b      	lsls	r3, r3, #18
 80073aa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80073ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80073b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80073b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80073b6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073c0:	78fa      	ldrb	r2, [r7, #3]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80073cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073d0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80073d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d003      	beq.n	80073e2 <USB_HC_Init+0x22a>
 80073da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d10f      	bne.n	8007402 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	78fa      	ldrb	r2, [r7, #3]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007400:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007402:	7ffb      	ldrb	r3, [r7, #31]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3720      	adds	r7, #32
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40040000 	.word	0x40040000

08007410 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08c      	sub	sp, #48	@ 0x30
 8007414:	af02      	add	r7, sp, #8
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	4613      	mov	r3, r2
 800741c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007428:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800742c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4a5d      	ldr	r2, [pc, #372]	@ (80075a8 <USB_HC_StartXfer+0x198>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d12f      	bne.n	8007496 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d11c      	bne.n	8007476 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	7c9b      	ldrb	r3, [r3, #18]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <USB_HC_StartXfer+0x3c>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	7c9b      	ldrb	r3, [r3, #18]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d124      	bne.n	8007496 <USB_HC_StartXfer+0x86>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	799b      	ldrb	r3, [r3, #6]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d120      	bne.n	8007496 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	4413      	add	r3, r2
 800745c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	0151      	lsls	r1, r2, #5
 8007466:	6a3a      	ldr	r2, [r7, #32]
 8007468:	440a      	add	r2, r1
 800746a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800746e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007472:	60d3      	str	r3, [r2, #12]
 8007474:	e00f      	b.n	8007496 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	791b      	ldrb	r3, [r3, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <USB_HC_StartXfer+0x86>
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	795b      	ldrb	r3, [r3, #5]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d107      	bne.n	8007496 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	4619      	mov	r1, r3
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 fb6b 	bl	8007b68 <USB_DoPing>
        return HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	e232      	b.n	80078fc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	799b      	ldrb	r3, [r3, #6]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d158      	bne.n	8007550 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800749e:	2301      	movs	r3, #1
 80074a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	78db      	ldrb	r3, [r3, #3]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80074aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	8a92      	ldrh	r2, [r2, #20]
 80074b0:	fb03 f202 	mul.w	r2, r3, r2
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	61da      	str	r2, [r3, #28]
 80074b8:	e07c      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	7c9b      	ldrb	r3, [r3, #18]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d130      	bne.n	8007524 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	2bbc      	cmp	r3, #188	@ 0xbc
 80074c8:	d918      	bls.n	80074fc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	8a9b      	ldrh	r3, [r3, #20]
 80074ce:	461a      	mov	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d003      	beq.n	80074ec <USB_HC_StartXfer+0xdc>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d103      	bne.n	80074f4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2202      	movs	r2, #2
 80074f0:	60da      	str	r2, [r3, #12]
 80074f2:	e05f      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2201      	movs	r2, #1
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	e05b      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6a1a      	ldr	r2, [r3, #32]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d007      	beq.n	800751c <USB_HC_StartXfer+0x10c>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d003      	beq.n	800751c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2204      	movs	r2, #4
 8007518:	60da      	str	r2, [r3, #12]
 800751a:	e04b      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2203      	movs	r2, #3
 8007520:	60da      	str	r2, [r3, #12]
 8007522:	e047      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d10d      	bne.n	8007546 <USB_HC_StartXfer+0x136>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	8a92      	ldrh	r2, [r2, #20]
 8007532:	4293      	cmp	r3, r2
 8007534:	d907      	bls.n	8007546 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007536:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	8a92      	ldrh	r2, [r2, #20]
 800753c:	fb03 f202 	mul.w	r2, r3, r2
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	61da      	str	r2, [r3, #28]
 8007544:	e036      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6a1a      	ldr	r2, [r3, #32]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	61da      	str	r2, [r3, #28]
 800754e:	e031      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d018      	beq.n	800758a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	8a92      	ldrh	r2, [r2, #20]
 8007560:	4413      	add	r3, r2
 8007562:	3b01      	subs	r3, #1
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	8a92      	ldrh	r2, [r2, #20]
 8007568:	fbb3 f3f2 	udiv	r3, r3, r2
 800756c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800756e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007570:	8b7b      	ldrh	r3, [r7, #26]
 8007572:	429a      	cmp	r2, r3
 8007574:	d90b      	bls.n	800758e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007576:	8b7b      	ldrh	r3, [r7, #26]
 8007578:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800757a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	8a92      	ldrh	r2, [r2, #20]
 8007580:	fb03 f202 	mul.w	r2, r3, r2
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	61da      	str	r2, [r3, #28]
 8007588:	e001      	b.n	800758e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800758a:	2301      	movs	r3, #1
 800758c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	78db      	ldrb	r3, [r3, #3]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007596:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	8a92      	ldrh	r2, [r2, #20]
 800759c:	fb03 f202 	mul.w	r2, r3, r2
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	61da      	str	r2, [r3, #28]
 80075a4:	e006      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
 80075a6:	bf00      	nop
 80075a8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	6a1a      	ldr	r2, [r3, #32]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075be:	04d9      	lsls	r1, r3, #19
 80075c0:	4ba3      	ldr	r3, [pc, #652]	@ (8007850 <USB_HC_StartXfer+0x440>)
 80075c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	7d9b      	ldrb	r3, [r3, #22]
 80075ca:	075b      	lsls	r3, r3, #29
 80075cc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075d0:	69f9      	ldr	r1, [r7, #28]
 80075d2:	0148      	lsls	r0, r1, #5
 80075d4:	6a39      	ldr	r1, [r7, #32]
 80075d6:	4401      	add	r1, r0
 80075d8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	6999      	ldr	r1, [r3, #24]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f6:	460a      	mov	r2, r1
 80075f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf0c      	ite	eq
 800760a:	2301      	moveq	r3, #1
 800760c:	2300      	movne	r3, #0
 800760e:	b2db      	uxtb	r3, r3
 8007610:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	4413      	add	r3, r2
 800761a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	6a3a      	ldr	r2, [r7, #32]
 8007626:	440a      	add	r2, r1
 8007628:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800762c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007630:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	4413      	add	r3, r2
 800763a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	7e7b      	ldrb	r3, [r7, #25]
 8007642:	075b      	lsls	r3, r3, #29
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	0148      	lsls	r0, r1, #5
 8007648:	6a39      	ldr	r1, [r7, #32]
 800764a:	4401      	add	r1, r0
 800764c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007650:	4313      	orrs	r3, r2
 8007652:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	799b      	ldrb	r3, [r3, #6]
 8007658:	2b01      	cmp	r3, #1
 800765a:	f040 80c3 	bne.w	80077e4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	7c5b      	ldrb	r3, [r3, #17]
 8007662:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007668:	4313      	orrs	r3, r2
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	6a3a      	ldr	r2, [r7, #32]
 8007670:	440a      	add	r2, r1
 8007672:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007676:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800767a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	4413      	add	r3, r2
 8007684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	6a3a      	ldr	r2, [r7, #32]
 8007690:	440a      	add	r2, r1
 8007692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007696:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800769a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	79db      	ldrb	r3, [r3, #7]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d123      	bne.n	80076ec <USB_HC_StartXfer+0x2dc>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	78db      	ldrb	r3, [r3, #3]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d11f      	bne.n	80076ec <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	0151      	lsls	r1, r2, #5
 80076be:	6a3a      	ldr	r2, [r7, #32]
 80076c0:	440a      	add	r2, r1
 80076c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076ca:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	6a3a      	ldr	r2, [r7, #32]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ea:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	7c9b      	ldrb	r3, [r3, #18]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d003      	beq.n	80076fc <USB_HC_StartXfer+0x2ec>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	7c9b      	ldrb	r3, [r3, #18]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d117      	bne.n	800772c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007700:	2b01      	cmp	r3, #1
 8007702:	d113      	bne.n	800772c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	78db      	ldrb	r3, [r3, #3]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d10f      	bne.n	800772c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	4413      	add	r3, r2
 8007714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	6a3a      	ldr	r2, [r7, #32]
 8007720:	440a      	add	r2, r1
 8007722:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800772a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	7c9b      	ldrb	r3, [r3, #18]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d162      	bne.n	80077fa <USB_HC_StartXfer+0x3ea>
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	78db      	ldrb	r3, [r3, #3]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d15e      	bne.n	80077fa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	3b01      	subs	r3, #1
 8007742:	2b03      	cmp	r3, #3
 8007744:	d858      	bhi.n	80077f8 <USB_HC_StartXfer+0x3e8>
 8007746:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <USB_HC_StartXfer+0x33c>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	0800775d 	.word	0x0800775d
 8007750:	0800777f 	.word	0x0800777f
 8007754:	080077a1 	.word	0x080077a1
 8007758:	080077c3 	.word	0x080077c3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	4413      	add	r3, r2
 8007764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	6a3a      	ldr	r2, [r7, #32]
 8007770:	440a      	add	r2, r1
 8007772:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800777a:	6053      	str	r3, [r2, #4]
          break;
 800777c:	e03d      	b.n	80077fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	4413      	add	r3, r2
 8007786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	69fa      	ldr	r2, [r7, #28]
 800778e:	0151      	lsls	r1, r2, #5
 8007790:	6a3a      	ldr	r2, [r7, #32]
 8007792:	440a      	add	r2, r1
 8007794:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007798:	f043 030e 	orr.w	r3, r3, #14
 800779c:	6053      	str	r3, [r2, #4]
          break;
 800779e:	e02c      	b.n	80077fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	6a3a      	ldr	r2, [r7, #32]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077be:	6053      	str	r3, [r2, #4]
          break;
 80077c0:	e01b      	b.n	80077fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	6a3a      	ldr	r2, [r7, #32]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077e0:	6053      	str	r3, [r2, #4]
          break;
 80077e2:	e00a      	b.n	80077fa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f0:	461a      	mov	r2, r3
 80077f2:	2300      	movs	r3, #0
 80077f4:	6053      	str	r3, [r2, #4]
 80077f6:	e000      	b.n	80077fa <USB_HC_StartXfer+0x3ea>
          break;
 80077f8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	4413      	add	r3, r2
 8007802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007810:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	78db      	ldrb	r3, [r3, #3]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d004      	beq.n	8007824 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	e003      	b.n	800782c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800782a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007832:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	4413      	add	r3, r2
 800783c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007840:	461a      	mov	r2, r3
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e055      	b.n	80078fc <USB_HC_StartXfer+0x4ec>
 8007850:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	78db      	ldrb	r3, [r3, #3]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d14e      	bne.n	80078fa <USB_HC_StartXfer+0x4ea>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d04a      	beq.n	80078fa <USB_HC_StartXfer+0x4ea>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	79db      	ldrb	r3, [r3, #7]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d146      	bne.n	80078fa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	7c9b      	ldrb	r3, [r3, #18]
 8007870:	2b03      	cmp	r3, #3
 8007872:	d831      	bhi.n	80078d8 <USB_HC_StartXfer+0x4c8>
 8007874:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <USB_HC_StartXfer+0x46c>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	0800788d 	.word	0x0800788d
 8007880:	080078b1 	.word	0x080078b1
 8007884:	0800788d 	.word	0x0800788d
 8007888:	080078b1 	.word	0x080078b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	3303      	adds	r3, #3
 8007892:	089b      	lsrs	r3, r3, #2
 8007894:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007896:	8afa      	ldrh	r2, [r7, #22]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789c:	b29b      	uxth	r3, r3
 800789e:	429a      	cmp	r2, r3
 80078a0:	d91c      	bls.n	80078dc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	f043 0220 	orr.w	r2, r3, #32
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80078ae:	e015      	b.n	80078dc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	3303      	adds	r3, #3
 80078b6:	089b      	lsrs	r3, r3, #2
 80078b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80078ba:	8afa      	ldrh	r2, [r7, #22]
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d90a      	bls.n	80078e0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80078d6:	e003      	b.n	80078e0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80078d8:	bf00      	nop
 80078da:	e002      	b.n	80078e2 <USB_HC_StartXfer+0x4d2>
        break;
 80078dc:	bf00      	nop
 80078de:	e000      	b.n	80078e2 <USB_HC_StartXfer+0x4d2>
        break;
 80078e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6999      	ldr	r1, [r3, #24]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	785a      	ldrb	r2, [r3, #1]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2000      	movs	r0, #0
 80078f2:	9000      	str	r0, [sp, #0]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff f9c9 	bl	8006c8c <USB_WritePacket>
  }

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3728      	adds	r7, #40	@ 0x28
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	b29b      	uxth	r3, r3
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007926:	b480      	push	{r7}
 8007928:	b089      	sub	sp, #36	@ 0x24
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	0c9b      	lsrs	r3, r3, #18
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	4413      	add	r3, r2
 800795c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	0fdb      	lsrs	r3, r3, #31
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	0fdb      	lsrs	r3, r3, #31
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b20      	cmp	r3, #32
 800798a:	d10d      	bne.n	80079a8 <USB_HC_Halt+0x82>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <USB_HC_Halt+0x82>
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d005      	beq.n	80079a4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d002      	beq.n	80079a4 <USB_HC_Halt+0x7e>
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d101      	bne.n	80079a8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	e0d8      	b.n	8007b5a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <USB_HC_Halt+0x8e>
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d173      	bne.n	8007a9c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 0320 	and.w	r3, r3, #32
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d14a      	bne.n	8007a76 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d133      	bne.n	8007a54 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a0a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a2a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a38:	d82e      	bhi.n	8007a98 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a50:	d0ec      	beq.n	8007a2c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a52:	e081      	b.n	8007b58 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a72:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a74:	e070      	b.n	8007b58 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	0151      	lsls	r1, r2, #5
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	440a      	add	r2, r1
 8007a8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a94:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a96:	e05f      	b.n	8007b58 <USB_HC_Halt+0x232>
            break;
 8007a98:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a9a:	e05d      	b.n	8007b58 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ab6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d133      	bne.n	8007b34 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ae6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007aea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	0151      	lsls	r1, r2, #5
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	440a      	add	r2, r1
 8007b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b0a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b18:	d81d      	bhi.n	8007b56 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b30:	d0ec      	beq.n	8007b0c <USB_HC_Halt+0x1e6>
 8007b32:	e011      	b.n	8007b58 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	e000      	b.n	8007b58 <USB_HC_Halt+0x232>
          break;
 8007b56:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3724      	adds	r7, #36	@ 0x24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
	...

08007b68 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	04da      	lsls	r2, r3, #19
 8007b84:	4b15      	ldr	r3, [pc, #84]	@ (8007bdc <USB_DoPing+0x74>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	0151      	lsls	r1, r2, #5
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	440a      	add	r2, r1
 8007b90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b98:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007bb0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bb8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	1ff80000 	.word	0x1ff80000

08007be0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7fe ff8c 	bl	8006b12 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bfa:	2110      	movs	r1, #16
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fe ffe5 	bl	8006bcc <USB_FlushTxFifo>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff f80f 	bl	8006c30 <USB_FlushRxFifo>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61bb      	str	r3, [r7, #24]
 8007c20:	e01f      	b.n	8007c62 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c48:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c56:	461a      	mov	r2, r3
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b0f      	cmp	r3, #15
 8007c66:	d9dc      	bls.n	8007c22 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	e034      	b.n	8007cd8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c84:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c94:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cb4:	d80c      	bhi.n	8007cd0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ccc:	d0ec      	beq.n	8007ca8 <USB_StopHost+0xc8>
 8007cce:	e000      	b.n	8007cd2 <USB_StopHost+0xf2>
        break;
 8007cd0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	61bb      	str	r3, [r7, #24]
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b0f      	cmp	r3, #15
 8007cdc:	d9c7      	bls.n	8007c6e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7fe fefb 	bl	8006af0 <USB_EnableGlobalInt>

  return ret;
 8007cfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3720      	adds	r7, #32
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007d04:	b590      	push	{r4, r7, lr}
 8007d06:	b089      	sub	sp, #36	@ 0x24
 8007d08:	af04      	add	r7, sp, #16
 8007d0a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	2202      	movs	r2, #2
 8007d10:	2102      	movs	r1, #2
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fc85 	bl	8008622 <USBH_FindInterface>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	2bff      	cmp	r3, #255	@ 0xff
 8007d20:	d002      	beq.n	8007d28 <USBH_CDC_InterfaceInit+0x24>
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d901      	bls.n	8007d2c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e13d      	b.n	8007fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc5a 	bl	80085ea <USBH_SelectInterface>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007d40:	2302      	movs	r3, #2
 8007d42:	e131      	b.n	8007fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007d4a:	2050      	movs	r0, #80	@ 0x50
 8007d4c:	f002 fb64 	bl	800a418 <malloc>
 8007d50:	4603      	mov	r3, r0
 8007d52:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007d64:	2302      	movs	r3, #2
 8007d66:	e11f      	b.n	8007fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007d68:	2250      	movs	r2, #80	@ 0x50
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	68b8      	ldr	r0, [r7, #8]
 8007d6e:	f002 fc11 	bl	800a594 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	211a      	movs	r1, #26
 8007d78:	fb01 f303 	mul.w	r3, r1, r3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	b25b      	sxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	da15      	bge.n	8007db6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	211a      	movs	r1, #26
 8007d90:	fb01 f303 	mul.w	r3, r1, r3
 8007d94:	4413      	add	r3, r2
 8007d96:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d9a:	781a      	ldrb	r2, [r3, #0]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	211a      	movs	r1, #26
 8007da6:	fb01 f303 	mul.w	r3, r1, r3
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007db0:	881a      	ldrh	r2, [r3, #0]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	785b      	ldrb	r3, [r3, #1]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 ffbe 	bl	8009d3e <USBH_AllocPipe>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	7819      	ldrb	r1, [r3, #0]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	7858      	ldrb	r0, [r3, #1]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	8952      	ldrh	r2, [r2, #10]
 8007de2:	9202      	str	r2, [sp, #8]
 8007de4:	2203      	movs	r2, #3
 8007de6:	9201      	str	r2, [sp, #4]
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	4623      	mov	r3, r4
 8007dec:	4602      	mov	r2, r0
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 ff76 	bl	8009ce0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f002 fa85 	bl	800a30c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007e02:	2300      	movs	r3, #0
 8007e04:	2200      	movs	r2, #0
 8007e06:	210a      	movs	r1, #10
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc0a 	bl	8008622 <USBH_FindInterface>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	2bff      	cmp	r3, #255	@ 0xff
 8007e16:	d002      	beq.n	8007e1e <USBH_CDC_InterfaceInit+0x11a>
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d901      	bls.n	8007e22 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e0c2      	b.n	8007fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	211a      	movs	r1, #26
 8007e28:	fb01 f303 	mul.w	r3, r1, r3
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	b25b      	sxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	da16      	bge.n	8007e68 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	211a      	movs	r1, #26
 8007e40:	fb01 f303 	mul.w	r3, r1, r3
 8007e44:	4413      	add	r3, r2
 8007e46:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	211a      	movs	r1, #26
 8007e56:	fb01 f303 	mul.w	r3, r1, r3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e60:	881a      	ldrh	r2, [r3, #0]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	835a      	strh	r2, [r3, #26]
 8007e66:	e015      	b.n	8007e94 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	211a      	movs	r1, #26
 8007e6e:	fb01 f303 	mul.w	r3, r1, r3
 8007e72:	4413      	add	r3, r2
 8007e74:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e78:	781a      	ldrb	r2, [r3, #0]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	211a      	movs	r1, #26
 8007e84:	fb01 f303 	mul.w	r3, r1, r3
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e8e:	881a      	ldrh	r2, [r3, #0]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	211a      	movs	r1, #26
 8007e9a:	fb01 f303 	mul.w	r3, r1, r3
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b25b      	sxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da16      	bge.n	8007eda <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	211a      	movs	r1, #26
 8007eb2:	fb01 f303 	mul.w	r3, r1, r3
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	211a      	movs	r1, #26
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007ed2:	881a      	ldrh	r2, [r3, #0]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	835a      	strh	r2, [r3, #26]
 8007ed8:	e015      	b.n	8007f06 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	211a      	movs	r1, #26
 8007ee0:	fb01 f303 	mul.w	r3, r1, r3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007eea:	781a      	ldrb	r2, [r3, #0]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	211a      	movs	r1, #26
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007f00:	881a      	ldrh	r2, [r3, #0]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	7b9b      	ldrb	r3, [r3, #14]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 ff16 	bl	8009d3e <USBH_AllocPipe>
 8007f12:	4603      	mov	r3, r0
 8007f14:	461a      	mov	r2, r3
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	7bdb      	ldrb	r3, [r3, #15]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 ff0c 	bl	8009d3e <USBH_AllocPipe>
 8007f26:	4603      	mov	r3, r0
 8007f28:	461a      	mov	r2, r3
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	7b59      	ldrb	r1, [r3, #13]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	7b98      	ldrb	r0, [r3, #14]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	8b12      	ldrh	r2, [r2, #24]
 8007f46:	9202      	str	r2, [sp, #8]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	9201      	str	r2, [sp, #4]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	4623      	mov	r3, r4
 8007f50:	4602      	mov	r2, r0
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fec4 	bl	8009ce0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	7b19      	ldrb	r1, [r3, #12]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	7bd8      	ldrb	r0, [r3, #15]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	8b52      	ldrh	r2, [r2, #26]
 8007f70:	9202      	str	r2, [sp, #8]
 8007f72:	2202      	movs	r2, #2
 8007f74:	9201      	str	r2, [sp, #4]
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	4623      	mov	r3, r4
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 feaf 	bl	8009ce0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	7b5b      	ldrb	r3, [r3, #13]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f002 f9ba 	bl	800a30c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	7b1b      	ldrb	r3, [r3, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f002 f9b3 	bl	800a30c <USBH_LL_SetToggle>

  return USBH_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd90      	pop	{r4, r7, pc}

08007fb0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00e      	beq.n	8007fe8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fea4 	bl	8009d1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 fecf 	bl	8009d80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	7b1b      	ldrb	r3, [r3, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00e      	beq.n	800800e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	7b1b      	ldrb	r3, [r3, #12]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fe91 	bl	8009d1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	7b1b      	ldrb	r3, [r3, #12]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 febc 	bl	8009d80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	7b5b      	ldrb	r3, [r3, #13]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00e      	beq.n	8008034 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	7b5b      	ldrb	r3, [r3, #13]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 fe7e 	bl	8009d1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	7b5b      	ldrb	r3, [r3, #13]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 fea9 	bl	8009d80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	4618      	mov	r0, r3
 800804a:	f002 f9ed 	bl	800a428 <free>
    phost->pActiveClass->pData = 0U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008054:	2200      	movs	r2, #0
 8008056:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3340      	adds	r3, #64	@ 0x40
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8b1 	bl	80081e2 <GetLineCoding>
 8008080:	4603      	mov	r3, r0
 8008082:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008090:	2102      	movs	r1, #2
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008096:	7afb      	ldrb	r3, [r7, #11]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80080a8:	2301      	movs	r3, #1
 80080aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	d877      	bhi.n	80081b4 <USBH_CDC_Process+0x114>
 80080c4:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <USBH_CDC_Process+0x2c>)
 80080c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ca:	bf00      	nop
 80080cc:	080080e1 	.word	0x080080e1
 80080d0:	080080e7 	.word	0x080080e7
 80080d4:	08008117 	.word	0x08008117
 80080d8:	0800818b 	.word	0x0800818b
 80080dc:	08008199 	.word	0x08008199
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
      break;
 80080e4:	e06d      	b.n	80081c2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f897 	bl	8008220 <SetLineCoding>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008104:	e058      	b.n	80081b8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d055      	beq.n	80081b8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2204      	movs	r2, #4
 8008110:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008114:	e050      	b.n	80081b8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	3340      	adds	r3, #64	@ 0x40
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f860 	bl	80081e2 <GetLineCoding>
 8008122:	4603      	mov	r3, r0
 8008124:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d126      	bne.n	800817a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813e:	791b      	ldrb	r3, [r3, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	d13b      	bne.n	80081bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800814e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008150:	429a      	cmp	r2, r3
 8008152:	d133      	bne.n	80081bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800815e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008160:	429a      	cmp	r2, r3
 8008162:	d12b      	bne.n	80081bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800816c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800816e:	429a      	cmp	r2, r3
 8008170:	d124      	bne.n	80081bc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f958 	bl	8008428 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008178:	e020      	b.n	80081bc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d01d      	beq.n	80081bc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2204      	movs	r2, #4
 8008184:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008188:	e018      	b.n	80081bc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f867 	bl	800825e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f8da 	bl	800834a <CDC_ProcessReception>
      break;
 8008196:	e014      	b.n	80081c2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008198:	2100      	movs	r1, #0
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 f81a 	bl	80091d4 <USBH_ClrFeature>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80081b2:	e005      	b.n	80081c0 <USBH_CDC_Process+0x120>

    default:
      break;
 80081b4:	bf00      	nop
 80081b6:	e004      	b.n	80081c2 <USBH_CDC_Process+0x122>
      break;
 80081b8:	bf00      	nop
 80081ba:	e002      	b.n	80081c2 <USBH_CDC_Process+0x122>
      break;
 80081bc:	bf00      	nop
 80081be:	e000      	b.n	80081c2 <USBH_CDC_Process+0x122>
      break;
 80081c0:	bf00      	nop

  }

  return status;
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	22a1      	movs	r2, #161	@ 0xa1
 80081f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2221      	movs	r2, #33	@ 0x21
 80081f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2207      	movs	r2, #7
 8008208:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2207      	movs	r2, #7
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 fb14 	bl	800983e <USBH_CtlReq>
 8008216:	4603      	mov	r3, r0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2221      	movs	r2, #33	@ 0x21
 800822e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2207      	movs	r2, #7
 8008246:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2207      	movs	r2, #7
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 faf5 	bl	800983e <USBH_CtlReq>
 8008254:	4603      	mov	r3, r0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b086      	sub	sp, #24
 8008262:	af02      	add	r7, sp, #8
 8008264:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008270:	2300      	movs	r3, #0
 8008272:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800827a:	2b01      	cmp	r3, #1
 800827c:	d002      	beq.n	8008284 <CDC_ProcessTransmission+0x26>
 800827e:	2b02      	cmp	r3, #2
 8008280:	d023      	beq.n	80082ca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008282:	e05e      	b.n	8008342 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	8b12      	ldrh	r2, [r2, #24]
 800828c:	4293      	cmp	r3, r2
 800828e:	d90b      	bls.n	80082a8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	69d9      	ldr	r1, [r3, #28]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8b1a      	ldrh	r2, [r3, #24]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	7b5b      	ldrb	r3, [r3, #13]
 800829c:	2001      	movs	r0, #1
 800829e:	9000      	str	r0, [sp, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fcda 	bl	8009c5a <USBH_BulkSendData>
 80082a6:	e00b      	b.n	80082c0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	7b5b      	ldrb	r3, [r3, #13]
 80082b6:	2001      	movs	r0, #1
 80082b8:	9000      	str	r0, [sp, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fccd 	bl	8009c5a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80082c8:	e03b      	b.n	8008342 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	7b5b      	ldrb	r3, [r3, #13]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 fff1 	bl	800a2b8 <USBH_LL_GetURBState>
 80082d6:	4603      	mov	r3, r0
 80082d8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d128      	bne.n	8008332 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	8b12      	ldrh	r2, [r2, #24]
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d90e      	bls.n	800830a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	8b12      	ldrh	r2, [r2, #24]
 80082f4:	1a9a      	subs	r2, r3, r2
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	8b12      	ldrh	r2, [r2, #24]
 8008302:	441a      	add	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	61da      	str	r2, [r3, #28]
 8008308:	e002      	b.n	8008310 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	d004      	beq.n	8008322 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008320:	e00e      	b.n	8008340 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f868 	bl	8008400 <USBH_CDC_TransmitCallback>
      break;
 8008330:	e006      	b.n	8008340 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008332:	7afb      	ldrb	r3, [r7, #11]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d103      	bne.n	8008340 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008340:	bf00      	nop
  }
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800835c:	2300      	movs	r3, #0
 800835e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008366:	2b03      	cmp	r3, #3
 8008368:	d002      	beq.n	8008370 <CDC_ProcessReception+0x26>
 800836a:	2b04      	cmp	r3, #4
 800836c:	d00e      	beq.n	800838c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800836e:	e043      	b.n	80083f8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	6a19      	ldr	r1, [r3, #32]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	8b5a      	ldrh	r2, [r3, #26]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	7b1b      	ldrb	r3, [r3, #12]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 fc91 	bl	8009ca4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2204      	movs	r2, #4
 8008386:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800838a:	e035      	b.n	80083f8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	7b1b      	ldrb	r3, [r3, #12]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f001 ff90 	bl	800a2b8 <USBH_LL_GetURBState>
 8008398:	4603      	mov	r3, r0
 800839a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800839c:	7cfb      	ldrb	r3, [r7, #19]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d129      	bne.n	80083f6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	7b1b      	ldrb	r3, [r3, #12]
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 fef3 	bl	800a194 <USBH_LL_GetLastXferSize>
 80083ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d016      	beq.n	80083e8 <CDC_ProcessReception+0x9e>
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	8b5b      	ldrh	r3, [r3, #26]
 80083be:	461a      	mov	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d110      	bne.n	80083e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	1ad2      	subs	r2, r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	6a1a      	ldr	r2, [r3, #32]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	441a      	add	r2, r3
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2203      	movs	r2, #3
 80083e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80083e6:	e006      	b.n	80083f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f80f 	bl	8008414 <USBH_CDC_ReceiveCallback>
      break;
 80083f6:	bf00      	nop
  }
}
 80083f8:	bf00      	nop
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008450:	2302      	movs	r3, #2
 8008452:	e029      	b.n	80084a8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	79fa      	ldrb	r2, [r7, #7]
 8008458:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f81f 	bl	80084b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f001 fdc3 	bl	800a02c <USBH_LL_Init>

  return USBH_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	e009      	b.n	80084d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	33e0      	adds	r3, #224	@ 0xe0
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	2200      	movs	r2, #0
 80084ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b0f      	cmp	r3, #15
 80084da:	d9f2      	bls.n	80084c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	e009      	b.n	80084f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80084ec:	2200      	movs	r2, #0
 80084ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084fc:	d3f1      	bcc.n	80084e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2240      	movs	r2, #64	@ 0x40
 8008522:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	331c      	adds	r3, #28
 800854e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008552:	2100      	movs	r1, #0
 8008554:	4618      	mov	r0, r3
 8008556:	f002 f81d 	bl	800a594 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008564:	2100      	movs	r1, #0
 8008566:	4618      	mov	r0, r3
 8008568:	f002 f814 	bl	800a594 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008572:	2212      	movs	r2, #18
 8008574:	2100      	movs	r1, #0
 8008576:	4618      	mov	r0, r3
 8008578:	f002 f80c 	bl	800a594 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008582:	223e      	movs	r2, #62	@ 0x3e
 8008584:	2100      	movs	r1, #0
 8008586:	4618      	mov	r0, r3
 8008588:	f002 f804 	bl	800a594 <memset>

  return USBH_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d016      	beq.n	80085d8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10e      	bne.n	80085d2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80085ba:	1c59      	adds	r1, r3, #1
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	33de      	adds	r3, #222	@ 0xde
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
 80085d0:	e004      	b.n	80085dc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80085d2:	2302      	movs	r3, #2
 80085d4:	73fb      	strb	r3, [r7, #15]
 80085d6:	e001      	b.n	80085dc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80085d8:	2302      	movs	r3, #2
 80085da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008600:	78fa      	ldrb	r2, [r7, #3]
 8008602:	429a      	cmp	r2, r3
 8008604:	d204      	bcs.n	8008610 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800860e:	e001      	b.n	8008614 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008610:	2302      	movs	r3, #2
 8008612:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008622:	b480      	push	{r7}
 8008624:	b087      	sub	sp, #28
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	461a      	mov	r2, r3
 8008630:	4603      	mov	r3, r0
 8008632:	70fb      	strb	r3, [r7, #3]
 8008634:	460b      	mov	r3, r1
 8008636:	70bb      	strb	r3, [r7, #2]
 8008638:	4613      	mov	r3, r2
 800863a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008640:	2300      	movs	r3, #0
 8008642:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800864a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800864c:	e025      	b.n	800869a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	221a      	movs	r2, #26
 8008652:	fb02 f303 	mul.w	r3, r2, r3
 8008656:	3308      	adds	r3, #8
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4413      	add	r3, r2
 800865c:	3302      	adds	r3, #2
 800865e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	795b      	ldrb	r3, [r3, #5]
 8008664:	78fa      	ldrb	r2, [r7, #3]
 8008666:	429a      	cmp	r2, r3
 8008668:	d002      	beq.n	8008670 <USBH_FindInterface+0x4e>
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	2bff      	cmp	r3, #255	@ 0xff
 800866e:	d111      	bne.n	8008694 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008674:	78ba      	ldrb	r2, [r7, #2]
 8008676:	429a      	cmp	r2, r3
 8008678:	d002      	beq.n	8008680 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800867a:	78bb      	ldrb	r3, [r7, #2]
 800867c:	2bff      	cmp	r3, #255	@ 0xff
 800867e:	d109      	bne.n	8008694 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008684:	787a      	ldrb	r2, [r7, #1]
 8008686:	429a      	cmp	r2, r3
 8008688:	d002      	beq.n	8008690 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800868a:	787b      	ldrb	r3, [r7, #1]
 800868c:	2bff      	cmp	r3, #255	@ 0xff
 800868e:	d101      	bne.n	8008694 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	e006      	b.n	80086a2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	3301      	adds	r3, #1
 8008698:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d9d6      	bls.n	800864e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80086a0:	23ff      	movs	r3, #255	@ 0xff
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 fcf4 	bl	800a0a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80086bc:	2101      	movs	r1, #1
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fe0d 	bl	800a2de <USBH_LL_DriverVBUS>

  return USBH_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af04      	add	r7, sp, #16
 80086d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80086d8:	2302      	movs	r3, #2
 80086da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d102      	bne.n	80086f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2203      	movs	r2, #3
 80086f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b0b      	cmp	r3, #11
 80086fa:	f200 81bb 	bhi.w	8008a74 <USBH_Process+0x3a4>
 80086fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008704 <USBH_Process+0x34>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	08008735 	.word	0x08008735
 8008708:	08008767 	.word	0x08008767
 800870c:	080087cf 	.word	0x080087cf
 8008710:	08008a0f 	.word	0x08008a0f
 8008714:	08008a75 	.word	0x08008a75
 8008718:	0800886f 	.word	0x0800886f
 800871c:	080089b5 	.word	0x080089b5
 8008720:	080088a5 	.word	0x080088a5
 8008724:	080088c5 	.word	0x080088c5
 8008728:	080088e3 	.word	0x080088e3
 800872c:	08008927 	.word	0x08008927
 8008730:	080089f7 	.word	0x080089f7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 819b 	beq.w	8008a78 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008748:	20c8      	movs	r0, #200	@ 0xc8
 800874a:	f001 fe12 	bl	800a372 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fd05 	bl	800a15e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008764:	e188      	b.n	8008a78 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800876c:	2b01      	cmp	r3, #1
 800876e:	d107      	bne.n	8008780 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800877e:	e18a      	b.n	8008a96 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008786:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800878a:	d914      	bls.n	80087b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008792:	3301      	adds	r3, #1
 8008794:	b2da      	uxtb	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d903      	bls.n	80087ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	220d      	movs	r2, #13
 80087aa:	701a      	strb	r2, [r3, #0]
      break;
 80087ac:	e173      	b.n	8008a96 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	701a      	strb	r2, [r3, #0]
      break;
 80087b4:	e16f      	b.n	8008a96 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80087bc:	f103 020a 	add.w	r2, r3, #10
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80087c6:	200a      	movs	r0, #10
 80087c8:	f001 fdd3 	bl	800a372 <USBH_Delay>
      break;
 80087cc:	e163      	b.n	8008a96 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087de:	2104      	movs	r1, #4
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80087e4:	2064      	movs	r0, #100	@ 0x64
 80087e6:	f001 fdc4 	bl	800a372 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 fc90 	bl	800a110 <USBH_LL_GetSpeed>
 80087f0:	4603      	mov	r3, r0
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2205      	movs	r2, #5
 80087fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008800:	2100      	movs	r1, #0
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f001 fa9b 	bl	8009d3e <USBH_AllocPipe>
 8008808:	4603      	mov	r3, r0
 800880a:	461a      	mov	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008810:	2180      	movs	r1, #128	@ 0x80
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 fa93 	bl	8009d3e <USBH_AllocPipe>
 8008818:	4603      	mov	r3, r0
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	7919      	ldrb	r1, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008834:	9202      	str	r2, [sp, #8]
 8008836:	2200      	movs	r2, #0
 8008838:	9201      	str	r2, [sp, #4]
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	4603      	mov	r3, r0
 800883e:	2280      	movs	r2, #128	@ 0x80
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 fa4d 	bl	8009ce0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	7959      	ldrb	r1, [r3, #5]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800885a:	9202      	str	r2, [sp, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	9201      	str	r2, [sp, #4]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	4603      	mov	r3, r0
 8008864:	2200      	movs	r2, #0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f001 fa3a 	bl	8009ce0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800886c:	e113      	b.n	8008a96 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f916 	bl	8008aa0 <USBH_HandleEnum>
 8008874:	4603      	mov	r3, r0
 8008876:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	f040 80fd 	bne.w	8008a7c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008890:	2b01      	cmp	r3, #1
 8008892:	d103      	bne.n	800889c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2208      	movs	r2, #8
 8008898:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800889a:	e0ef      	b.n	8008a7c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2207      	movs	r2, #7
 80088a0:	701a      	strb	r2, [r3, #0]
      break;
 80088a2:	e0eb      	b.n	8008a7c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 80e8 	beq.w	8008a80 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088b6:	2101      	movs	r1, #1
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2208      	movs	r2, #8
 80088c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80088c2:	e0dd      	b.n	8008a80 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fc3a 	bl	8009146 <USBH_SetCfg>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f040 80d5 	bne.w	8008a84 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2209      	movs	r2, #9
 80088de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088e0:	e0d0      	b.n	8008a84 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d016      	beq.n	800891e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80088f0:	2101      	movs	r1, #1
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fc4a 	bl	800918c <USBH_SetFeature>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d103      	bne.n	800890c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	220a      	movs	r2, #10
 8008908:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800890a:	e0bd      	b.n	8008a88 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b03      	cmp	r3, #3
 8008912:	f040 80b9 	bne.w	8008a88 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	220a      	movs	r2, #10
 800891a:	701a      	strb	r2, [r3, #0]
      break;
 800891c:	e0b4      	b.n	8008a88 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	220a      	movs	r2, #10
 8008922:	701a      	strb	r2, [r3, #0]
      break;
 8008924:	e0b0      	b.n	8008a88 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80ad 	beq.w	8008a8c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800893a:	2300      	movs	r3, #0
 800893c:	73fb      	strb	r3, [r7, #15]
 800893e:	e016      	b.n	800896e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008940:	7bfa      	ldrb	r2, [r7, #15]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	32de      	adds	r2, #222	@ 0xde
 8008946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894a:	791a      	ldrb	r2, [r3, #4]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008952:	429a      	cmp	r2, r3
 8008954:	d108      	bne.n	8008968 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008956:	7bfa      	ldrb	r2, [r7, #15]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	32de      	adds	r2, #222	@ 0xde
 800895c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008966:	e005      	b.n	8008974 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	3301      	adds	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0e5      	beq.n	8008940 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d016      	beq.n	80089ac <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d109      	bne.n	80089a4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2206      	movs	r2, #6
 8008994:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800899c:	2103      	movs	r1, #3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089a2:	e073      	b.n	8008a8c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	220d      	movs	r2, #13
 80089a8:	701a      	strb	r2, [r3, #0]
      break;
 80089aa:	e06f      	b.n	8008a8c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	220d      	movs	r2, #13
 80089b0:	701a      	strb	r2, [r3, #0]
      break;
 80089b2:	e06b      	b.n	8008a8c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d017      	beq.n	80089ee <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d103      	bne.n	80089de <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	220b      	movs	r2, #11
 80089da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089dc:	e058      	b.n	8008a90 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d154      	bne.n	8008a90 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	220d      	movs	r2, #13
 80089ea:	701a      	strb	r2, [r3, #0]
      break;
 80089ec:	e050      	b.n	8008a90 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	220d      	movs	r2, #13
 80089f2:	701a      	strb	r2, [r3, #0]
      break;
 80089f4:	e04c      	b.n	8008a90 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d049      	beq.n	8008a94 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
      }
      break;
 8008a0c:	e042      	b.n	8008a94 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff fd4a 	bl	80084b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a4a:	2105      	movs	r1, #5
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d107      	bne.n	8008a6c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff fe22 	bl	80086ae <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a6a:	e014      	b.n	8008a96 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fb19 	bl	800a0a4 <USBH_LL_Start>
      break;
 8008a72:	e010      	b.n	8008a96 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008a74:	bf00      	nop
 8008a76:	e00e      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a78:	bf00      	nop
 8008a7a:	e00c      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a7c:	bf00      	nop
 8008a7e:	e00a      	b.n	8008a96 <USBH_Process+0x3c6>
    break;
 8008a80:	bf00      	nop
 8008a82:	e008      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a84:	bf00      	nop
 8008a86:	e006      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a88:	bf00      	nop
 8008a8a:	e004      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a8c:	bf00      	nop
 8008a8e:	e002      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a94:	bf00      	nop
  }
  return USBH_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af04      	add	r7, sp, #16
 8008aa6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008aac:	2301      	movs	r3, #1
 8008aae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	2b07      	cmp	r3, #7
 8008ab6:	f200 81bd 	bhi.w	8008e34 <USBH_HandleEnum+0x394>
 8008aba:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac0 <USBH_HandleEnum+0x20>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008ae1 	.word	0x08008ae1
 8008ac4:	08008b9b 	.word	0x08008b9b
 8008ac8:	08008c05 	.word	0x08008c05
 8008acc:	08008c8f 	.word	0x08008c8f
 8008ad0:	08008cf9 	.word	0x08008cf9
 8008ad4:	08008d69 	.word	0x08008d69
 8008ad8:	08008daf 	.word	0x08008daf
 8008adc:	08008df5 	.word	0x08008df5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008ae0:	2108      	movs	r1, #8
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fa4c 	bl	8008f80 <USBH_Get_DevDesc>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d12e      	bne.n	8008b50 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	7919      	ldrb	r1, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008b16:	9202      	str	r2, [sp, #8]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	9201      	str	r2, [sp, #4]
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2280      	movs	r2, #128	@ 0x80
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 f8dc 	bl	8009ce0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	7959      	ldrb	r1, [r3, #5]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b3c:	9202      	str	r2, [sp, #8]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	9201      	str	r2, [sp, #4]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	4603      	mov	r3, r0
 8008b46:	2200      	movs	r2, #0
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f001 f8c9 	bl	8009ce0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b4e:	e173      	b.n	8008e38 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	f040 8170 	bne.w	8008e38 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b5e:	3301      	adds	r3, #1
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d903      	bls.n	8008b7a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	220d      	movs	r2, #13
 8008b76:	701a      	strb	r2, [r3, #0]
      break;
 8008b78:	e15e      	b.n	8008e38 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	795b      	ldrb	r3, [r3, #5]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 f8fd 	bl	8009d80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	791b      	ldrb	r3, [r3, #4]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f001 f8f7 	bl	8009d80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]
      break;
 8008b98:	e14e      	b.n	8008e38 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b9a:	2112      	movs	r1, #18
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f9ef 	bl	8008f80 <USBH_Get_DevDesc>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d103      	bne.n	8008bb4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008bb2:	e143      	b.n	8008e3c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	f040 8140 	bne.w	8008e3c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d903      	bls.n	8008bde <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	220d      	movs	r2, #13
 8008bda:	701a      	strb	r2, [r3, #0]
      break;
 8008bdc:	e12e      	b.n	8008e3c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	795b      	ldrb	r3, [r3, #5]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 f8cb 	bl	8009d80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	791b      	ldrb	r3, [r3, #4]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 f8c5 	bl	8009d80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	701a      	strb	r2, [r3, #0]
      break;
 8008c02:	e11b      	b.n	8008e3c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008c04:	2101      	movs	r1, #1
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa79 	bl	80090fe <USBH_SetAddress>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d130      	bne.n	8008c78 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008c16:	2002      	movs	r0, #2
 8008c18:	f001 fbab 	bl	800a372 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2203      	movs	r2, #3
 8008c28:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7919      	ldrb	r1, [r3, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008c3e:	9202      	str	r2, [sp, #8]
 8008c40:	2200      	movs	r2, #0
 8008c42:	9201      	str	r2, [sp, #4]
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	4603      	mov	r3, r0
 8008c48:	2280      	movs	r2, #128	@ 0x80
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 f848 	bl	8009ce0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	7959      	ldrb	r1, [r3, #5]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c64:	9202      	str	r2, [sp, #8]
 8008c66:	2200      	movs	r2, #0
 8008c68:	9201      	str	r2, [sp, #4]
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2200      	movs	r2, #0
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 f835 	bl	8009ce0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c76:	e0e3      	b.n	8008e40 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	f040 80e0 	bne.w	8008e40 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	220d      	movs	r2, #13
 8008c84:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	705a      	strb	r2, [r3, #1]
      break;
 8008c8c:	e0d8      	b.n	8008e40 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008c8e:	2109      	movs	r1, #9
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f9a1 	bl	8008fd8 <USBH_Get_CfgDesc>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2204      	movs	r2, #4
 8008ca4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ca6:	e0cd      	b.n	8008e44 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	f040 80ca 	bne.w	8008e44 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d903      	bls.n	8008cd2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	220d      	movs	r2, #13
 8008cce:	701a      	strb	r2, [r3, #0]
      break;
 8008cd0:	e0b8      	b.n	8008e44 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	795b      	ldrb	r3, [r3, #5]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f851 	bl	8009d80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	791b      	ldrb	r3, [r3, #4]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 f84b 	bl	8009d80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
      break;
 8008cf6:	e0a5      	b.n	8008e44 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f969 	bl	8008fd8 <USBH_Get_CfgDesc>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d103      	bne.n	8008d18 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2205      	movs	r2, #5
 8008d14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d16:	e097      	b.n	8008e48 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	f040 8094 	bne.w	8008e48 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d26:	3301      	adds	r3, #1
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d903      	bls.n	8008d42 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	220d      	movs	r2, #13
 8008d3e:	701a      	strb	r2, [r3, #0]
      break;
 8008d40:	e082      	b.n	8008e48 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	795b      	ldrb	r3, [r3, #5]
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 f819 	bl	8009d80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	791b      	ldrb	r3, [r3, #4]
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 f813 	bl	8009d80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	701a      	strb	r2, [r3, #0]
      break;
 8008d66:	e06f      	b.n	8008e48 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d019      	beq.n	8008da6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d7e:	23ff      	movs	r3, #255	@ 0xff
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f953 	bl	800902c <USBH_Get_StringDesc>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2206      	movs	r2, #6
 8008d94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d96:	e059      	b.n	8008e4c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d156      	bne.n	8008e4c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2206      	movs	r2, #6
 8008da2:	705a      	strb	r2, [r3, #1]
      break;
 8008da4:	e052      	b.n	8008e4c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2206      	movs	r2, #6
 8008daa:	705a      	strb	r2, [r3, #1]
      break;
 8008dac:	e04e      	b.n	8008e4c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d019      	beq.n	8008dec <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008dc4:	23ff      	movs	r3, #255	@ 0xff
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f930 	bl	800902c <USBH_Get_StringDesc>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d103      	bne.n	8008dde <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2207      	movs	r2, #7
 8008dda:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ddc:	e038      	b.n	8008e50 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d135      	bne.n	8008e50 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2207      	movs	r2, #7
 8008de8:	705a      	strb	r2, [r3, #1]
      break;
 8008dea:	e031      	b.n	8008e50 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2207      	movs	r2, #7
 8008df0:	705a      	strb	r2, [r3, #1]
      break;
 8008df2:	e02d      	b.n	8008e50 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d017      	beq.n	8008e2e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008e0a:	23ff      	movs	r3, #255	@ 0xff
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f90d 	bl	800902c <USBH_Get_StringDesc>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008e20:	e018      	b.n	8008e54 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d115      	bne.n	8008e54 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e2c:	e012      	b.n	8008e54 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]
      break;
 8008e32:	e00f      	b.n	8008e54 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008e34:	bf00      	nop
 8008e36:	e00e      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e38:	bf00      	nop
 8008e3a:	e00c      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e3c:	bf00      	nop
 8008e3e:	e00a      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e40:	bf00      	nop
 8008e42:	e008      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e44:	bf00      	nop
 8008e46:	e006      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e48:	bf00      	nop
 8008e4a:	e004      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e4c:	bf00      	nop
 8008e4e:	e002      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e50:	bf00      	nop
 8008e52:	e000      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e54:	bf00      	nop
  }
  return Status;
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f804 	bl	8008ea2 <USBH_HandleSof>
}
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b0b      	cmp	r3, #11
 8008eb2:	d10a      	bne.n	8008eca <USBH_HandleSof+0x28>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
  }
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008ee2:	bf00      	nop
}
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008efe:	bf00      	nop
}
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f8be 	bl	800a0da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	791b      	ldrb	r3, [r3, #4]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 ff0b 	bl	8009d80 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	795b      	ldrb	r3, [r3, #5]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 ff05 	bl	8009d80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008f8c:	887b      	ldrh	r3, [r7, #2]
 8008f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f92:	d901      	bls.n	8008f98 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e01b      	b.n	8008fd0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008f9e:	887b      	ldrh	r3, [r7, #2]
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fa8:	2100      	movs	r1, #0
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f872 	bl	8009094 <USBH_GetDescriptor>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d109      	bne.n	8008fce <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008fc0:	887a      	ldrh	r2, [r7, #2]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f929 	bl	800921c <USBH_ParseDevDesc>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	331c      	adds	r3, #28
 8008fe8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008fea:	887b      	ldrh	r3, [r7, #2]
 8008fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff0:	d901      	bls.n	8008ff6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e016      	b.n	8009024 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ff6:	887b      	ldrh	r3, [r7, #2]
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009000:	2100      	movs	r1, #0
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f846 	bl	8009094 <USBH_GetDescriptor>
 8009008:	4603      	mov	r3, r0
 800900a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d107      	bne.n	8009022 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009012:	887b      	ldrh	r3, [r7, #2]
 8009014:	461a      	mov	r2, r3
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f9af 	bl	800937c <USBH_ParseCfgDesc>
 800901e:	4603      	mov	r3, r0
 8009020:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af02      	add	r7, sp, #8
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	607a      	str	r2, [r7, #4]
 8009036:	461a      	mov	r2, r3
 8009038:	460b      	mov	r3, r1
 800903a:	72fb      	strb	r3, [r7, #11]
 800903c:	4613      	mov	r3, r2
 800903e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009040:	893b      	ldrh	r3, [r7, #8]
 8009042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009046:	d802      	bhi.n	800904e <USBH_Get_StringDesc+0x22>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800904e:	2303      	movs	r3, #3
 8009050:	e01c      	b.n	800908c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009052:	7afb      	ldrb	r3, [r7, #11]
 8009054:	b29b      	uxth	r3, r3
 8009056:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800905a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009062:	893b      	ldrh	r3, [r7, #8]
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	460b      	mov	r3, r1
 8009068:	2100      	movs	r1, #0
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f812 	bl	8009094 <USBH_GetDescriptor>
 8009070:	4603      	mov	r3, r0
 8009072:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d107      	bne.n	800908a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009080:	893a      	ldrh	r2, [r7, #8]
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fb8d 	bl	80097a4 <USBH_ParseStringDesc>
  }

  return status;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	607b      	str	r3, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	72fb      	strb	r3, [r7, #11]
 80090a2:	4613      	mov	r3, r2
 80090a4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	789b      	ldrb	r3, [r3, #2]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d11c      	bne.n	80090e8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2206      	movs	r2, #6
 80090be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	893a      	ldrh	r2, [r7, #8]
 80090c4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80090c6:	893b      	ldrh	r3, [r7, #8]
 80090c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80090cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090d0:	d104      	bne.n	80090dc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f240 4209 	movw	r2, #1033	@ 0x409
 80090d8:	829a      	strh	r2, [r3, #20]
 80090da:	e002      	b.n	80090e2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	8b3a      	ldrh	r2, [r7, #24]
 80090e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80090e8:	8b3b      	ldrh	r3, [r7, #24]
 80090ea:	461a      	mov	r2, r3
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 fba5 	bl	800983e <USBH_CtlReq>
 80090f4:	4603      	mov	r3, r0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	789b      	ldrb	r3, [r3, #2]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d10f      	bne.n	8009132 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2205      	movs	r2, #5
 800911c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800911e:	78fb      	ldrb	r3, [r7, #3]
 8009120:	b29a      	uxth	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fb81 	bl	800983e <USBH_CtlReq>
 800913c:	4603      	mov	r3, r0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	789b      	ldrb	r3, [r3, #2]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d10e      	bne.n	8009178 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2209      	movs	r2, #9
 8009164:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	887a      	ldrh	r2, [r7, #2]
 800916a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009178:	2200      	movs	r2, #0
 800917a:	2100      	movs	r1, #0
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fb5e 	bl	800983e <USBH_CtlReq>
 8009182:	4603      	mov	r3, r0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	789b      	ldrb	r3, [r3, #2]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d10f      	bne.n	80091c0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2203      	movs	r2, #3
 80091aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80091c0:	2200      	movs	r2, #0
 80091c2:	2100      	movs	r1, #0
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fb3a 	bl	800983e <USBH_CtlReq>
 80091ca:	4603      	mov	r3, r0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	789b      	ldrb	r3, [r3, #2]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d10f      	bne.n	8009208 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009208:	2200      	movs	r2, #0
 800920a:	2100      	movs	r1, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb16 	bl	800983e <USBH_CtlReq>
 8009212:	4603      	mov	r3, r0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009230:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800923c:	2302      	movs	r3, #2
 800923e:	e094      	b.n	800936a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	781a      	ldrb	r2, [r3, #0]
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	785a      	ldrb	r2, [r3, #1]
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	3302      	adds	r3, #2
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	3303      	adds	r3, #3
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	b29b      	uxth	r3, r3
 8009262:	4313      	orrs	r3, r2
 8009264:	b29a      	uxth	r2, r3
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	791a      	ldrb	r2, [r3, #4]
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	795a      	ldrb	r2, [r3, #5]
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	799a      	ldrb	r2, [r3, #6]
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	79da      	ldrb	r2, [r3, #7]
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009290:	2b00      	cmp	r3, #0
 8009292:	d004      	beq.n	800929e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800929a:	2b01      	cmp	r3, #1
 800929c:	d11b      	bne.n	80092d6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	79db      	ldrb	r3, [r3, #7]
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	dc0f      	bgt.n	80092c6 <USBH_ParseDevDesc+0xaa>
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	db0f      	blt.n	80092ca <USBH_ParseDevDesc+0xae>
 80092aa:	3b08      	subs	r3, #8
 80092ac:	4a32      	ldr	r2, [pc, #200]	@ (8009378 <USBH_ParseDevDesc+0x15c>)
 80092ae:	fa22 f303 	lsr.w	r3, r2, r3
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bf14      	ite	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	2300      	moveq	r3, #0
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d106      	bne.n	80092d2 <USBH_ParseDevDesc+0xb6>
 80092c4:	e001      	b.n	80092ca <USBH_ParseDevDesc+0xae>
 80092c6:	2b40      	cmp	r3, #64	@ 0x40
 80092c8:	d003      	beq.n	80092d2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2208      	movs	r2, #8
 80092ce:	71da      	strb	r2, [r3, #7]
        break;
 80092d0:	e000      	b.n	80092d4 <USBH_ParseDevDesc+0xb8>
        break;
 80092d2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80092d4:	e00e      	b.n	80092f4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d107      	bne.n	80092f0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	79db      	ldrb	r3, [r3, #7]
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d005      	beq.n	80092f4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2208      	movs	r2, #8
 80092ec:	71da      	strb	r2, [r3, #7]
 80092ee:	e001      	b.n	80092f4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80092f0:	2303      	movs	r3, #3
 80092f2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d936      	bls.n	8009368 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	3308      	adds	r3, #8
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	3309      	adds	r3, #9
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	b29b      	uxth	r3, r3
 800930c:	4313      	orrs	r3, r2
 800930e:	b29a      	uxth	r2, r3
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	330a      	adds	r3, #10
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	330b      	adds	r3, #11
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	b29b      	uxth	r3, r3
 8009326:	4313      	orrs	r3, r2
 8009328:	b29a      	uxth	r2, r3
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	330c      	adds	r3, #12
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	461a      	mov	r2, r3
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	330d      	adds	r3, #13
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	021b      	lsls	r3, r3, #8
 800933e:	b29b      	uxth	r3, r3
 8009340:	4313      	orrs	r3, r2
 8009342:	b29a      	uxth	r2, r3
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	7b9a      	ldrb	r2, [r3, #14]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	7bda      	ldrb	r2, [r3, #15]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	7c1a      	ldrb	r2, [r3, #16]
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	7c5a      	ldrb	r2, [r3, #17]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009368:	7dfb      	ldrb	r3, [r7, #23]
}
 800936a:	4618      	mov	r0, r3
 800936c:	371c      	adds	r7, #28
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	01000101 	.word	0x01000101

0800937c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08c      	sub	sp, #48	@ 0x30
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009390:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80093aa:	2302      	movs	r3, #2
 80093ac:	e0da      	b.n	8009564 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	d002      	beq.n	80093c0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80093ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093bc:	2209      	movs	r2, #9
 80093be:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	781a      	ldrb	r2, [r3, #0]
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	785a      	ldrb	r2, [r3, #1]
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	3302      	adds	r3, #2
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	3303      	adds	r3, #3
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	021b      	lsls	r3, r3, #8
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	4313      	orrs	r3, r2
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ea:	bf28      	it	cs
 80093ec:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	791a      	ldrb	r2, [r3, #4]
 80093fa:	6a3b      	ldr	r3, [r7, #32]
 80093fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	795a      	ldrb	r2, [r3, #5]
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	799a      	ldrb	r2, [r3, #6]
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	79da      	ldrb	r2, [r3, #7]
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	7a1a      	ldrb	r2, [r3, #8]
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	2b09      	cmp	r3, #9
 8009422:	f240 809d 	bls.w	8009560 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009426:	2309      	movs	r3, #9
 8009428:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800942e:	e081      	b.n	8009534 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009430:	f107 0316 	add.w	r3, r7, #22
 8009434:	4619      	mov	r1, r3
 8009436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009438:	f000 f9e7 	bl	800980a <USBH_GetNextDesc>
 800943c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800943e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009440:	785b      	ldrb	r3, [r3, #1]
 8009442:	2b04      	cmp	r3, #4
 8009444:	d176      	bne.n	8009534 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b09      	cmp	r3, #9
 800944c:	d002      	beq.n	8009454 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800944e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009450:	2209      	movs	r2, #9
 8009452:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009458:	221a      	movs	r2, #26
 800945a:	fb02 f303 	mul.w	r3, r2, r3
 800945e:	3308      	adds	r3, #8
 8009460:	6a3a      	ldr	r2, [r7, #32]
 8009462:	4413      	add	r3, r2
 8009464:	3302      	adds	r3, #2
 8009466:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800946a:	69f8      	ldr	r0, [r7, #28]
 800946c:	f000 f87e 	bl	800956c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009476:	2300      	movs	r3, #0
 8009478:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800947a:	e043      	b.n	8009504 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800947c:	f107 0316 	add.w	r3, r7, #22
 8009480:	4619      	mov	r1, r3
 8009482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009484:	f000 f9c1 	bl	800980a <USBH_GetNextDesc>
 8009488:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800948a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	2b05      	cmp	r3, #5
 8009490:	d138      	bne.n	8009504 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	795b      	ldrb	r3, [r3, #5]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d113      	bne.n	80094c2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d003      	beq.n	80094aa <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	799b      	ldrb	r3, [r3, #6]
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d10b      	bne.n	80094c2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	79db      	ldrb	r3, [r3, #7]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10b      	bne.n	80094ca <USBH_ParseCfgDesc+0x14e>
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	2b09      	cmp	r3, #9
 80094b8:	d007      	beq.n	80094ca <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	2209      	movs	r2, #9
 80094be:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094c0:	e003      	b.n	80094ca <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	2207      	movs	r2, #7
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	e000      	b.n	80094cc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094ca:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80094cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094d0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80094d4:	3201      	adds	r2, #1
 80094d6:	00d2      	lsls	r2, r2, #3
 80094d8:	211a      	movs	r1, #26
 80094da:	fb01 f303 	mul.w	r3, r1, r3
 80094de:	4413      	add	r3, r2
 80094e0:	3308      	adds	r3, #8
 80094e2:	6a3a      	ldr	r2, [r7, #32]
 80094e4:	4413      	add	r3, r2
 80094e6:	3304      	adds	r3, #4
 80094e8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80094ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094ec:	69b9      	ldr	r1, [r7, #24]
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 f870 	bl	80095d4 <USBH_ParseEPDesc>
 80094f4:	4603      	mov	r3, r0
 80094f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80094fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094fe:	3301      	adds	r3, #1
 8009500:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	791b      	ldrb	r3, [r3, #4]
 8009508:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800950c:	429a      	cmp	r2, r3
 800950e:	d204      	bcs.n	800951a <USBH_ParseCfgDesc+0x19e>
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	885a      	ldrh	r2, [r3, #2]
 8009514:	8afb      	ldrh	r3, [r7, #22]
 8009516:	429a      	cmp	r2, r3
 8009518:	d8b0      	bhi.n	800947c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	791b      	ldrb	r3, [r3, #4]
 800951e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009522:	429a      	cmp	r2, r3
 8009524:	d201      	bcs.n	800952a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009526:	2303      	movs	r3, #3
 8009528:	e01c      	b.n	8009564 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800952a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800952e:	3301      	adds	r3, #1
 8009530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009538:	2b01      	cmp	r3, #1
 800953a:	d805      	bhi.n	8009548 <USBH_ParseCfgDesc+0x1cc>
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	885a      	ldrh	r2, [r3, #2]
 8009540:	8afb      	ldrh	r3, [r7, #22]
 8009542:	429a      	cmp	r2, r3
 8009544:	f63f af74 	bhi.w	8009430 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	791b      	ldrb	r3, [r3, #4]
 800954c:	2b02      	cmp	r3, #2
 800954e:	bf28      	it	cs
 8009550:	2302      	movcs	r3, #2
 8009552:	b2db      	uxtb	r3, r3
 8009554:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009558:	429a      	cmp	r2, r3
 800955a:	d201      	bcs.n	8009560 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800955c:	2303      	movs	r3, #3
 800955e:	e001      	b.n	8009564 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009560:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009564:	4618      	mov	r0, r3
 8009566:	3730      	adds	r7, #48	@ 0x30
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781a      	ldrb	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	785a      	ldrb	r2, [r3, #1]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	789a      	ldrb	r2, [r3, #2]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	78da      	ldrb	r2, [r3, #3]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	3304      	adds	r3, #4
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b02      	cmp	r3, #2
 800959e:	bf28      	it	cs
 80095a0:	2302      	movcs	r3, #2
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	795a      	ldrb	r2, [r3, #5]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	799a      	ldrb	r2, [r3, #6]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	79da      	ldrb	r2, [r3, #7]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	7a1a      	ldrb	r2, [r3, #8]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	721a      	strb	r2, [r3, #8]
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	781a      	ldrb	r2, [r3, #0]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	785a      	ldrb	r2, [r3, #1]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	789a      	ldrb	r2, [r3, #2]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	78da      	ldrb	r2, [r3, #3]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3304      	adds	r3, #4
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3305      	adds	r3, #5
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	021b      	lsls	r3, r3, #8
 8009614:	b29b      	uxth	r3, r3
 8009616:	4313      	orrs	r3, r2
 8009618:	b29a      	uxth	r2, r3
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	799a      	ldrb	r2, [r3, #6]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	889b      	ldrh	r3, [r3, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d009      	beq.n	8009642 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009636:	d804      	bhi.n	8009642 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800963c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009640:	d901      	bls.n	8009646 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009642:	2303      	movs	r3, #3
 8009644:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800964c:	2b00      	cmp	r3, #0
 800964e:	d136      	bne.n	80096be <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	78db      	ldrb	r3, [r3, #3]
 8009654:	f003 0303 	and.w	r3, r3, #3
 8009658:	2b02      	cmp	r3, #2
 800965a:	d108      	bne.n	800966e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	889b      	ldrh	r3, [r3, #4]
 8009660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009664:	f240 8097 	bls.w	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009668:	2303      	movs	r3, #3
 800966a:	75fb      	strb	r3, [r7, #23]
 800966c:	e093      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	78db      	ldrb	r3, [r3, #3]
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d107      	bne.n	800968a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	889b      	ldrh	r3, [r3, #4]
 800967e:	2b40      	cmp	r3, #64	@ 0x40
 8009680:	f240 8089 	bls.w	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009684:	2303      	movs	r3, #3
 8009686:	75fb      	strb	r3, [r7, #23]
 8009688:	e085      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	78db      	ldrb	r3, [r3, #3]
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	2b01      	cmp	r3, #1
 8009694:	d005      	beq.n	80096a2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	78db      	ldrb	r3, [r3, #3]
 800969a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d10a      	bne.n	80096b8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	799b      	ldrb	r3, [r3, #6]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <USBH_ParseEPDesc+0xde>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	799b      	ldrb	r3, [r3, #6]
 80096ae:	2b10      	cmp	r3, #16
 80096b0:	d970      	bls.n	8009794 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80096b2:	2303      	movs	r3, #3
 80096b4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80096b6:	e06d      	b.n	8009794 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80096b8:	2303      	movs	r3, #3
 80096ba:	75fb      	strb	r3, [r7, #23]
 80096bc:	e06b      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d13c      	bne.n	8009742 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	78db      	ldrb	r3, [r3, #3]
 80096cc:	f003 0303 	and.w	r3, r3, #3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d005      	beq.n	80096e0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	78db      	ldrb	r3, [r3, #3]
 80096d8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d106      	bne.n	80096ee <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	889b      	ldrh	r3, [r3, #4]
 80096e4:	2b40      	cmp	r3, #64	@ 0x40
 80096e6:	d956      	bls.n	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096e8:	2303      	movs	r3, #3
 80096ea:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096ec:	e053      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	78db      	ldrb	r3, [r3, #3]
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d10e      	bne.n	8009718 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	799b      	ldrb	r3, [r3, #6]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009706:	2b10      	cmp	r3, #16
 8009708:	d803      	bhi.n	8009712 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800970e:	2b40      	cmp	r3, #64	@ 0x40
 8009710:	d941      	bls.n	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009712:	2303      	movs	r3, #3
 8009714:	75fb      	strb	r3, [r7, #23]
 8009716:	e03e      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	78db      	ldrb	r3, [r3, #3]
 800971c:	f003 0303 	and.w	r3, r3, #3
 8009720:	2b03      	cmp	r3, #3
 8009722:	d10b      	bne.n	800973c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	799b      	ldrb	r3, [r3, #6]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d004      	beq.n	8009736 <USBH_ParseEPDesc+0x162>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	889b      	ldrh	r3, [r3, #4]
 8009730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009734:	d32f      	bcc.n	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009736:	2303      	movs	r3, #3
 8009738:	75fb      	strb	r3, [r7, #23]
 800973a:	e02c      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800973c:	2303      	movs	r3, #3
 800973e:	75fb      	strb	r3, [r7, #23]
 8009740:	e029      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009748:	2b02      	cmp	r3, #2
 800974a:	d120      	bne.n	800978e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	78db      	ldrb	r3, [r3, #3]
 8009750:	f003 0303 	and.w	r3, r3, #3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d106      	bne.n	8009766 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	889b      	ldrh	r3, [r3, #4]
 800975c:	2b08      	cmp	r3, #8
 800975e:	d01a      	beq.n	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009760:	2303      	movs	r3, #3
 8009762:	75fb      	strb	r3, [r7, #23]
 8009764:	e017      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	78db      	ldrb	r3, [r3, #3]
 800976a:	f003 0303 	and.w	r3, r3, #3
 800976e:	2b03      	cmp	r3, #3
 8009770:	d10a      	bne.n	8009788 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	799b      	ldrb	r3, [r3, #6]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <USBH_ParseEPDesc+0x1ae>
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	889b      	ldrh	r3, [r3, #4]
 800977e:	2b08      	cmp	r3, #8
 8009780:	d909      	bls.n	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009782:	2303      	movs	r3, #3
 8009784:	75fb      	strb	r3, [r7, #23]
 8009786:	e006      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009788:	2303      	movs	r3, #3
 800978a:	75fb      	strb	r3, [r7, #23]
 800978c:	e003      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800978e:	2303      	movs	r3, #3
 8009790:	75fb      	strb	r3, [r7, #23]
 8009792:	e000      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009794:	bf00      	nop
  }

  return status;
 8009796:	7dfb      	ldrb	r3, [r7, #23]
}
 8009798:	4618      	mov	r0, r3
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	4613      	mov	r3, r2
 80097b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3301      	adds	r3, #1
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d120      	bne.n	80097fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	1e9a      	subs	r2, r3, #2
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	4293      	cmp	r3, r2
 80097c6:	bf28      	it	cs
 80097c8:	4613      	movcs	r3, r2
 80097ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3302      	adds	r3, #2
 80097d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80097d2:	2300      	movs	r3, #0
 80097d4:	82fb      	strh	r3, [r7, #22]
 80097d6:	e00b      	b.n	80097f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80097d8:	8afb      	ldrh	r3, [r7, #22]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4413      	add	r3, r2
 80097de:	781a      	ldrb	r2, [r3, #0]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	3301      	adds	r3, #1
 80097e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80097ea:	8afb      	ldrh	r3, [r7, #22]
 80097ec:	3302      	adds	r3, #2
 80097ee:	82fb      	strh	r3, [r7, #22]
 80097f0:	8afa      	ldrh	r2, [r7, #22]
 80097f2:	8abb      	ldrh	r3, [r7, #20]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d3ef      	bcc.n	80097d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2200      	movs	r2, #0
 80097fc:	701a      	strb	r2, [r3, #0]
  }
}
 80097fe:	bf00      	nop
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800980a:	b480      	push	{r7}
 800980c:	b085      	sub	sp, #20
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7812      	ldrb	r2, [r2, #0]
 800981c:	4413      	add	r3, r2
 800981e:	b29a      	uxth	r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4413      	add	r3, r2
 800982e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009830:	68fb      	ldr	r3, [r7, #12]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b086      	sub	sp, #24
 8009842:	af00      	add	r7, sp, #0
 8009844:	60f8      	str	r0, [r7, #12]
 8009846:	60b9      	str	r1, [r7, #8]
 8009848:	4613      	mov	r3, r2
 800984a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800984c:	2301      	movs	r3, #1
 800984e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	789b      	ldrb	r3, [r3, #2]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d002      	beq.n	800985e <USBH_CtlReq+0x20>
 8009858:	2b02      	cmp	r3, #2
 800985a:	d00f      	beq.n	800987c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800985c:	e027      	b.n	80098ae <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	88fa      	ldrh	r2, [r7, #6]
 8009868:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2202      	movs	r2, #2
 8009874:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009876:	2301      	movs	r3, #1
 8009878:	75fb      	strb	r3, [r7, #23]
      break;
 800987a:	e018      	b.n	80098ae <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f000 f81b 	bl	80098b8 <USBH_HandleControl>
 8009882:	4603      	mov	r3, r0
 8009884:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <USBH_CtlReq+0x54>
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	2b03      	cmp	r3, #3
 8009890:	d106      	bne.n	80098a0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2201      	movs	r2, #1
 8009896:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	761a      	strb	r2, [r3, #24]
      break;
 800989e:	e005      	b.n	80098ac <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d102      	bne.n	80098ac <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2201      	movs	r2, #1
 80098aa:	709a      	strb	r2, [r3, #2]
      break;
 80098ac:	bf00      	nop
  }
  return status;
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af02      	add	r7, sp, #8
 80098be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80098c0:	2301      	movs	r3, #1
 80098c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	7e1b      	ldrb	r3, [r3, #24]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	2b0a      	cmp	r3, #10
 80098d0:	f200 8156 	bhi.w	8009b80 <USBH_HandleControl+0x2c8>
 80098d4:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <USBH_HandleControl+0x24>)
 80098d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098da:	bf00      	nop
 80098dc:	08009909 	.word	0x08009909
 80098e0:	08009923 	.word	0x08009923
 80098e4:	0800998d 	.word	0x0800998d
 80098e8:	080099b3 	.word	0x080099b3
 80098ec:	080099eb 	.word	0x080099eb
 80098f0:	08009a15 	.word	0x08009a15
 80098f4:	08009a67 	.word	0x08009a67
 80098f8:	08009a89 	.word	0x08009a89
 80098fc:	08009ac5 	.word	0x08009ac5
 8009900:	08009aeb 	.word	0x08009aeb
 8009904:	08009b29 	.word	0x08009b29
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f103 0110 	add.w	r1, r3, #16
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	795b      	ldrb	r3, [r3, #5]
 8009912:	461a      	mov	r2, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f943 	bl	8009ba0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	761a      	strb	r2, [r3, #24]
      break;
 8009920:	e139      	b.n	8009b96 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	795b      	ldrb	r3, [r3, #5]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fcc5 	bl	800a2b8 <USBH_LL_GetURBState>
 800992e:	4603      	mov	r3, r0
 8009930:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009932:	7bbb      	ldrb	r3, [r7, #14]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d11e      	bne.n	8009976 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	7c1b      	ldrb	r3, [r3, #16]
 800993c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009940:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	8adb      	ldrh	r3, [r3, #22]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00a      	beq.n	8009960 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800994a:	7b7b      	ldrb	r3, [r7, #13]
 800994c:	2b80      	cmp	r3, #128	@ 0x80
 800994e:	d103      	bne.n	8009958 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2203      	movs	r2, #3
 8009954:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009956:	e115      	b.n	8009b84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2205      	movs	r2, #5
 800995c:	761a      	strb	r2, [r3, #24]
      break;
 800995e:	e111      	b.n	8009b84 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009960:	7b7b      	ldrb	r3, [r7, #13]
 8009962:	2b80      	cmp	r3, #128	@ 0x80
 8009964:	d103      	bne.n	800996e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2209      	movs	r2, #9
 800996a:	761a      	strb	r2, [r3, #24]
      break;
 800996c:	e10a      	b.n	8009b84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2207      	movs	r2, #7
 8009972:	761a      	strb	r2, [r3, #24]
      break;
 8009974:	e106      	b.n	8009b84 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	2b04      	cmp	r3, #4
 800997a:	d003      	beq.n	8009984 <USBH_HandleControl+0xcc>
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	2b02      	cmp	r3, #2
 8009980:	f040 8100 	bne.w	8009b84 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	220b      	movs	r2, #11
 8009988:	761a      	strb	r2, [r3, #24]
      break;
 800998a:	e0fb      	b.n	8009b84 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6899      	ldr	r1, [r3, #8]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	899a      	ldrh	r2, [r3, #12]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	791b      	ldrb	r3, [r3, #4]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f93a 	bl	8009c1e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2204      	movs	r2, #4
 80099ae:	761a      	strb	r2, [r3, #24]
      break;
 80099b0:	e0f1      	b.n	8009b96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	791b      	ldrb	r3, [r3, #4]
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fc7d 	bl	800a2b8 <USBH_LL_GetURBState>
 80099be:	4603      	mov	r3, r0
 80099c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d102      	bne.n	80099ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2209      	movs	r2, #9
 80099cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	2b05      	cmp	r3, #5
 80099d2:	d102      	bne.n	80099da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80099d4:	2303      	movs	r3, #3
 80099d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099d8:	e0d6      	b.n	8009b88 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	2b04      	cmp	r3, #4
 80099de:	f040 80d3 	bne.w	8009b88 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	220b      	movs	r2, #11
 80099e6:	761a      	strb	r2, [r3, #24]
      break;
 80099e8:	e0ce      	b.n	8009b88 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6899      	ldr	r1, [r3, #8]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	899a      	ldrh	r2, [r3, #12]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	795b      	ldrb	r3, [r3, #5]
 80099f6:	2001      	movs	r0, #1
 80099f8:	9000      	str	r0, [sp, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f8ea 	bl	8009bd4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2206      	movs	r2, #6
 8009a10:	761a      	strb	r2, [r3, #24]
      break;
 8009a12:	e0c0      	b.n	8009b96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	795b      	ldrb	r3, [r3, #5]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fc4c 	bl	800a2b8 <USBH_LL_GetURBState>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d103      	bne.n	8009a32 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2207      	movs	r2, #7
 8009a2e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a30:	e0ac      	b.n	8009b8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
 8009a34:	2b05      	cmp	r3, #5
 8009a36:	d105      	bne.n	8009a44 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	220c      	movs	r2, #12
 8009a3c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	73fb      	strb	r3, [r7, #15]
      break;
 8009a42:	e0a3      	b.n	8009b8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d103      	bne.n	8009a52 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2205      	movs	r2, #5
 8009a4e:	761a      	strb	r2, [r3, #24]
      break;
 8009a50:	e09c      	b.n	8009b8c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	f040 8099 	bne.w	8009b8c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	220b      	movs	r2, #11
 8009a5e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009a60:	2302      	movs	r3, #2
 8009a62:	73fb      	strb	r3, [r7, #15]
      break;
 8009a64:	e092      	b.n	8009b8c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	791b      	ldrb	r3, [r3, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f8d5 	bl	8009c1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2208      	movs	r2, #8
 8009a84:	761a      	strb	r2, [r3, #24]

      break;
 8009a86:	e086      	b.n	8009b96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	791b      	ldrb	r3, [r3, #4]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fc12 	bl	800a2b8 <USBH_LL_GetURBState>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d105      	bne.n	8009aaa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	220d      	movs	r2, #13
 8009aa2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009aa8:	e072      	b.n	8009b90 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	d103      	bne.n	8009ab8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	220b      	movs	r2, #11
 8009ab4:	761a      	strb	r2, [r3, #24]
      break;
 8009ab6:	e06b      	b.n	8009b90 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
 8009aba:	2b05      	cmp	r3, #5
 8009abc:	d168      	bne.n	8009b90 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac2:	e065      	b.n	8009b90 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	795b      	ldrb	r3, [r3, #5]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	9200      	str	r2, [sp, #0]
 8009acc:	2200      	movs	r2, #0
 8009ace:	2100      	movs	r1, #0
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f87f 	bl	8009bd4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	220a      	movs	r2, #10
 8009ae6:	761a      	strb	r2, [r3, #24]
      break;
 8009ae8:	e055      	b.n	8009b96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	795b      	ldrb	r3, [r3, #5]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fbe1 	bl	800a2b8 <USBH_LL_GetURBState>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d105      	bne.n	8009b0c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	220d      	movs	r2, #13
 8009b08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b0a:	e043      	b.n	8009b94 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d103      	bne.n	8009b1a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2209      	movs	r2, #9
 8009b16:	761a      	strb	r2, [r3, #24]
      break;
 8009b18:	e03c      	b.n	8009b94 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d139      	bne.n	8009b94 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	220b      	movs	r2, #11
 8009b24:	761a      	strb	r2, [r3, #24]
      break;
 8009b26:	e035      	b.n	8009b94 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	7e5b      	ldrb	r3, [r3, #25]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	765a      	strb	r2, [r3, #25]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7e5b      	ldrb	r3, [r3, #25]
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d806      	bhi.n	8009b4a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009b48:	e025      	b.n	8009b96 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b50:	2106      	movs	r1, #6
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	795b      	ldrb	r3, [r3, #5]
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f90c 	bl	8009d80 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	791b      	ldrb	r3, [r3, #4]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f906 	bl	8009d80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b7e:	e00a      	b.n	8009b96 <USBH_HandleControl+0x2de>

    default:
      break;
 8009b80:	bf00      	nop
 8009b82:	e008      	b.n	8009b96 <USBH_HandleControl+0x2de>
      break;
 8009b84:	bf00      	nop
 8009b86:	e006      	b.n	8009b96 <USBH_HandleControl+0x2de>
      break;
 8009b88:	bf00      	nop
 8009b8a:	e004      	b.n	8009b96 <USBH_HandleControl+0x2de>
      break;
 8009b8c:	bf00      	nop
 8009b8e:	e002      	b.n	8009b96 <USBH_HandleControl+0x2de>
      break;
 8009b90:	bf00      	nop
 8009b92:	e000      	b.n	8009b96 <USBH_HandleControl+0x2de>
      break;
 8009b94:	bf00      	nop
  }

  return status;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af04      	add	r7, sp, #16
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	4613      	mov	r3, r2
 8009bac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bae:	79f9      	ldrb	r1, [r7, #7]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	9303      	str	r3, [sp, #12]
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	9302      	str	r3, [sp, #8]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 fb46 	bl	800a256 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af04      	add	r7, sp, #16
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	4611      	mov	r1, r2
 8009be0:	461a      	mov	r2, r3
 8009be2:	460b      	mov	r3, r1
 8009be4:	80fb      	strh	r3, [r7, #6]
 8009be6:	4613      	mov	r3, r2
 8009be8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bf8:	7979      	ldrb	r1, [r7, #5]
 8009bfa:	7e3b      	ldrb	r3, [r7, #24]
 8009bfc:	9303      	str	r3, [sp, #12]
 8009bfe:	88fb      	ldrh	r3, [r7, #6]
 8009c00:	9302      	str	r3, [sp, #8]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	2301      	movs	r3, #1
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 fb21 	bl	800a256 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b088      	sub	sp, #32
 8009c22:	af04      	add	r7, sp, #16
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	60b9      	str	r1, [r7, #8]
 8009c28:	4611      	mov	r1, r2
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	80fb      	strh	r3, [r7, #6]
 8009c30:	4613      	mov	r3, r2
 8009c32:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c34:	7979      	ldrb	r1, [r7, #5]
 8009c36:	2300      	movs	r3, #0
 8009c38:	9303      	str	r3, [sp, #12]
 8009c3a:	88fb      	ldrh	r3, [r7, #6]
 8009c3c:	9302      	str	r3, [sp, #8]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	2301      	movs	r3, #1
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	2300      	movs	r3, #0
 8009c48:	2201      	movs	r2, #1
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 fb03 	bl	800a256 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c50:	2300      	movs	r3, #0

}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b088      	sub	sp, #32
 8009c5e:	af04      	add	r7, sp, #16
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	4611      	mov	r1, r2
 8009c66:	461a      	mov	r2, r3
 8009c68:	460b      	mov	r3, r1
 8009c6a:	80fb      	strh	r3, [r7, #6]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c7e:	7979      	ldrb	r1, [r7, #5]
 8009c80:	7e3b      	ldrb	r3, [r7, #24]
 8009c82:	9303      	str	r3, [sp, #12]
 8009c84:	88fb      	ldrh	r3, [r7, #6]
 8009c86:	9302      	str	r3, [sp, #8]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	2302      	movs	r3, #2
 8009c92:	2200      	movs	r2, #0
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 fade 	bl	800a256 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af04      	add	r7, sp, #16
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	4611      	mov	r1, r2
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	80fb      	strh	r3, [r7, #6]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cba:	7979      	ldrb	r1, [r7, #5]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	9303      	str	r3, [sp, #12]
 8009cc0:	88fb      	ldrh	r3, [r7, #6]
 8009cc2:	9302      	str	r3, [sp, #8]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	9301      	str	r3, [sp, #4]
 8009cc8:	2301      	movs	r3, #1
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	2302      	movs	r3, #2
 8009cce:	2201      	movs	r2, #1
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 fac0 	bl	800a256 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af04      	add	r7, sp, #16
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	4608      	mov	r0, r1
 8009cea:	4611      	mov	r1, r2
 8009cec:	461a      	mov	r2, r3
 8009cee:	4603      	mov	r3, r0
 8009cf0:	70fb      	strb	r3, [r7, #3]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	70bb      	strb	r3, [r7, #2]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009cfa:	7878      	ldrb	r0, [r7, #1]
 8009cfc:	78ba      	ldrb	r2, [r7, #2]
 8009cfe:	78f9      	ldrb	r1, [r7, #3]
 8009d00:	8b3b      	ldrh	r3, [r7, #24]
 8009d02:	9302      	str	r3, [sp, #8]
 8009d04:	7d3b      	ldrb	r3, [r7, #20]
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	7c3b      	ldrb	r3, [r7, #16]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fa53 	bl	800a1ba <USBH_LL_OpenPipe>

  return USBH_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009d2a:	78fb      	ldrb	r3, [r7, #3]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa72 	bl	800a218 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f836 	bl	8009dbc <USBH_GetFreePipe>
 8009d50:	4603      	mov	r3, r0
 8009d52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d54:	89fb      	ldrh	r3, [r7, #14]
 8009d56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00a      	beq.n	8009d74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	89fb      	ldrh	r3, [r7, #14]
 8009d62:	f003 030f 	and.w	r3, r3, #15
 8009d66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	33e0      	adds	r3, #224	@ 0xe0
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	440b      	add	r3, r1
 8009d72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d74:	89fb      	ldrh	r3, [r7, #14]
 8009d76:	b2db      	uxtb	r3, r3
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009d8c:	78fb      	ldrb	r3, [r7, #3]
 8009d8e:	2b0f      	cmp	r3, #15
 8009d90:	d80d      	bhi.n	8009dae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009d92:	78fb      	ldrb	r3, [r7, #3]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	33e0      	adds	r3, #224	@ 0xe0
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	78fb      	ldrb	r3, [r7, #3]
 8009da0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009da4:	6879      	ldr	r1, [r7, #4]
 8009da6:	33e0      	adds	r3, #224	@ 0xe0
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	440b      	add	r3, r1
 8009dac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73fb      	strb	r3, [r7, #15]
 8009dcc:	e00f      	b.n	8009dee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	33e0      	adds	r3, #224	@ 0xe0
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d102      	bne.n	8009de8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	e007      	b.n	8009df8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	3301      	adds	r3, #1
 8009dec:	73fb      	strb	r3, [r7, #15]
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	2b0f      	cmp	r3, #15
 8009df2:	d9ec      	bls.n	8009dce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009df4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009e08:	2201      	movs	r2, #1
 8009e0a:	490e      	ldr	r1, [pc, #56]	@ (8009e44 <MX_USB_HOST_Init+0x40>)
 8009e0c:	480e      	ldr	r0, [pc, #56]	@ (8009e48 <MX_USB_HOST_Init+0x44>)
 8009e0e:	f7fe fb15 	bl	800843c <USBH_Init>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009e18:	f7f6 ff08 	bl	8000c2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009e1c:	490b      	ldr	r1, [pc, #44]	@ (8009e4c <MX_USB_HOST_Init+0x48>)
 8009e1e:	480a      	ldr	r0, [pc, #40]	@ (8009e48 <MX_USB_HOST_Init+0x44>)
 8009e20:	f7fe fbb9 	bl	8008596 <USBH_RegisterClass>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009e2a:	f7f6 feff 	bl	8000c2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009e2e:	4806      	ldr	r0, [pc, #24]	@ (8009e48 <MX_USB_HOST_Init+0x44>)
 8009e30:	f7fe fc3d 	bl	80086ae <USBH_Start>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009e3a:	f7f6 fef7 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009e3e:	bf00      	nop
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	08009e65 	.word	0x08009e65
 8009e48:	20000238 	.word	0x20000238
 8009e4c:	2000000c 	.word	0x2000000c

08009e50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009e54:	4802      	ldr	r0, [pc, #8]	@ (8009e60 <MX_USB_HOST_Process+0x10>)
 8009e56:	f7fe fc3b 	bl	80086d0 <USBH_Process>
}
 8009e5a:	bf00      	nop
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20000238 	.word	0x20000238

08009e64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	d819      	bhi.n	8009eac <USBH_UserProcess+0x48>
 8009e78:	a201      	add	r2, pc, #4	@ (adr r2, 8009e80 <USBH_UserProcess+0x1c>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009ead 	.word	0x08009ead
 8009e84:	08009e9d 	.word	0x08009e9d
 8009e88:	08009ead 	.word	0x08009ead
 8009e8c:	08009ea5 	.word	0x08009ea5
 8009e90:	08009e95 	.word	0x08009e95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009e94:	4b09      	ldr	r3, [pc, #36]	@ (8009ebc <USBH_UserProcess+0x58>)
 8009e96:	2203      	movs	r2, #3
 8009e98:	701a      	strb	r2, [r3, #0]
  break;
 8009e9a:	e008      	b.n	8009eae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009e9c:	4b07      	ldr	r3, [pc, #28]	@ (8009ebc <USBH_UserProcess+0x58>)
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	701a      	strb	r2, [r3, #0]
  break;
 8009ea2:	e004      	b.n	8009eae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ea4:	4b05      	ldr	r3, [pc, #20]	@ (8009ebc <USBH_UserProcess+0x58>)
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	701a      	strb	r2, [r3, #0]
  break;
 8009eaa:	e000      	b.n	8009eae <USBH_UserProcess+0x4a>

  default:
  break;
 8009eac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009eae:	bf00      	nop
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	20000610 	.word	0x20000610

08009ec0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	@ 0x28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ec8:	f107 0314 	add.w	r3, r7, #20
 8009ecc:	2200      	movs	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	605a      	str	r2, [r3, #4]
 8009ed2:	609a      	str	r2, [r3, #8]
 8009ed4:	60da      	str	r2, [r3, #12]
 8009ed6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ee0:	d147      	bne.n	8009f72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	613b      	str	r3, [r7, #16]
 8009ee6:	4b25      	ldr	r3, [pc, #148]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eea:	4a24      	ldr	r2, [pc, #144]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009eec:	f043 0301 	orr.w	r3, r3, #1
 8009ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ef2:	4b22      	ldr	r3, [pc, #136]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	613b      	str	r3, [r7, #16]
 8009efc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009efe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f04:	2300      	movs	r3, #0
 8009f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009f0c:	f107 0314 	add.w	r3, r7, #20
 8009f10:	4619      	mov	r1, r3
 8009f12:	481b      	ldr	r0, [pc, #108]	@ (8009f80 <HAL_HCD_MspInit+0xc0>)
 8009f14:	f7f7 faf6 	bl	8001504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009f18:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f1e:	2302      	movs	r3, #2
 8009f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f26:	2300      	movs	r3, #0
 8009f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f2a:	230a      	movs	r3, #10
 8009f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f2e:	f107 0314 	add.w	r3, r7, #20
 8009f32:	4619      	mov	r1, r3
 8009f34:	4812      	ldr	r0, [pc, #72]	@ (8009f80 <HAL_HCD_MspInit+0xc0>)
 8009f36:	f7f7 fae5 	bl	8001504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f3a:	4b10      	ldr	r3, [pc, #64]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f44:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
 8009f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f56:	4b09      	ldr	r3, [pc, #36]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f62:	2200      	movs	r2, #0
 8009f64:	2100      	movs	r1, #0
 8009f66:	2043      	movs	r0, #67	@ 0x43
 8009f68:	f7f7 fa95 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f6c:	2043      	movs	r0, #67	@ 0x43
 8009f6e:	f7f7 faae 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f72:	bf00      	nop
 8009f74:	3728      	adds	r7, #40	@ 0x28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	40023800 	.word	0x40023800
 8009f80:	40020000 	.word	0x40020000

08009f84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fe ff73 	bl	8008e7e <USBH_LL_IncTimer>
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe ffab 	bl	8008f0a <USBH_LL_Connect>
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe ffb4 	bl	8008f38 <USBH_LL_Disconnect>
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe ff65 	bl	8008ed2 <USBH_LL_PortEnabled>
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe ff65 	bl	8008eee <USBH_LL_PortDisabled>
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d12a      	bne.n	800a094 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a03e:	4a18      	ldr	r2, [pc, #96]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a15      	ldr	r2, [pc, #84]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a04a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a04e:	4b14      	ldr	r3, [pc, #80]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a050:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a054:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a056:	4b12      	ldr	r3, [pc, #72]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a058:	2208      	movs	r2, #8
 800a05a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a05c:	4b10      	ldr	r3, [pc, #64]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a05e:	2201      	movs	r2, #1
 800a060:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a062:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a064:	2200      	movs	r2, #0
 800a066:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a068:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a06a:	2202      	movs	r2, #2
 800a06c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a06e:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a070:	2200      	movs	r2, #0
 800a072:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a074:	480a      	ldr	r0, [pc, #40]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a076:	f7f7 fbfa 	bl	800186e <HAL_HCD_Init>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a080:	f7f6 fdd4 	bl	8000c2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a084:	4806      	ldr	r0, [pc, #24]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a086:	f7f8 f85b 	bl	8002140 <HAL_HCD_GetCurrentFrame>
 800a08a:	4603      	mov	r3, r0
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7fe fee6 	bl	8008e60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000614 	.word	0x20000614

0800a0a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7f7 ffc8 	bl	8002050 <HAL_HCD_Start>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 f95e 	bl	800a388 <USBH_Get_USB_Status>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7f7 ffd0 	bl	8002096 <HAL_HCD_Stop>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 f943 	bl	800a388 <USBH_Get_USB_Status>
 800a102:	4603      	mov	r3, r0
 800a104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a106:	7bbb      	ldrb	r3, [r7, #14]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a118:	2301      	movs	r3, #1
 800a11a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a122:	4618      	mov	r0, r3
 800a124:	f7f8 f81a 	bl	800215c <HAL_HCD_GetCurrentSpeed>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d00c      	beq.n	800a148 <USBH_LL_GetSpeed+0x38>
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d80d      	bhi.n	800a14e <USBH_LL_GetSpeed+0x3e>
 800a132:	2b00      	cmp	r3, #0
 800a134:	d002      	beq.n	800a13c <USBH_LL_GetSpeed+0x2c>
 800a136:	2b01      	cmp	r3, #1
 800a138:	d003      	beq.n	800a142 <USBH_LL_GetSpeed+0x32>
 800a13a:	e008      	b.n	800a14e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
    break;
 800a140:	e008      	b.n	800a154 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a142:	2301      	movs	r3, #1
 800a144:	73fb      	strb	r3, [r7, #15]
    break;
 800a146:	e005      	b.n	800a154 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a148:	2302      	movs	r3, #2
 800a14a:	73fb      	strb	r3, [r7, #15]
    break;
 800a14c:	e002      	b.n	800a154 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a14e:	2301      	movs	r3, #1
 800a150:	73fb      	strb	r3, [r7, #15]
    break;
 800a152:	bf00      	nop
  }
  return  speed;
 800a154:	7bfb      	ldrb	r3, [r7, #15]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a174:	4618      	mov	r0, r3
 800a176:	f7f7 ffab 	bl	80020d0 <HAL_HCD_ResetPort>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	4618      	mov	r0, r3
 800a182:	f000 f901 	bl	800a388 <USBH_Get_USB_Status>
 800a186:	4603      	mov	r3, r0
 800a188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a1a6:	78fa      	ldrb	r2, [r7, #3]
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7f7 ffb3 	bl	8002116 <HAL_HCD_HC_GetXferCount>
 800a1b0:	4603      	mov	r3, r0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a1ba:	b590      	push	{r4, r7, lr}
 800a1bc:	b089      	sub	sp, #36	@ 0x24
 800a1be:	af04      	add	r7, sp, #16
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	4608      	mov	r0, r1
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	70fb      	strb	r3, [r7, #3]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70bb      	strb	r3, [r7, #2]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a1e2:	787c      	ldrb	r4, [r7, #1]
 800a1e4:	78ba      	ldrb	r2, [r7, #2]
 800a1e6:	78f9      	ldrb	r1, [r7, #3]
 800a1e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	4623      	mov	r3, r4
 800a1fa:	f7f7 fb9f 	bl	800193c <HAL_HCD_HC_Init>
 800a1fe:	4603      	mov	r3, r0
 800a200:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 f8bf 	bl	800a388 <USBH_Get_USB_Status>
 800a20a:	4603      	mov	r3, r0
 800a20c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	bd90      	pop	{r4, r7, pc}

0800a218 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a232:	78fa      	ldrb	r2, [r7, #3]
 800a234:	4611      	mov	r1, r2
 800a236:	4618      	mov	r0, r3
 800a238:	f7f7 fc38 	bl	8001aac <HAL_HCD_HC_Halt>
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 f8a0 	bl	800a388 <USBH_Get_USB_Status>
 800a248:	4603      	mov	r3, r0
 800a24a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a256:	b590      	push	{r4, r7, lr}
 800a258:	b089      	sub	sp, #36	@ 0x24
 800a25a:	af04      	add	r7, sp, #16
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	4608      	mov	r0, r1
 800a260:	4611      	mov	r1, r2
 800a262:	461a      	mov	r2, r3
 800a264:	4603      	mov	r3, r0
 800a266:	70fb      	strb	r3, [r7, #3]
 800a268:	460b      	mov	r3, r1
 800a26a:	70bb      	strb	r3, [r7, #2]
 800a26c:	4613      	mov	r3, r2
 800a26e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a27e:	787c      	ldrb	r4, [r7, #1]
 800a280:	78ba      	ldrb	r2, [r7, #2]
 800a282:	78f9      	ldrb	r1, [r7, #3]
 800a284:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a288:	9303      	str	r3, [sp, #12]
 800a28a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a28c:	9302      	str	r3, [sp, #8]
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	4623      	mov	r3, r4
 800a29a:	f7f7 fc2b 	bl	8001af4 <HAL_HCD_HC_SubmitRequest>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 f86f 	bl	800a388 <USBH_Get_USB_Status>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd90      	pop	{r4, r7, pc}

0800a2b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2ca:	78fa      	ldrb	r2, [r7, #3]
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7f7 ff0c 	bl	80020ec <HAL_HCD_HC_GetURBState>
 800a2d4:	4603      	mov	r3, r0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d103      	bne.n	800a2fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a2f4:	78fb      	ldrb	r3, [r7, #3]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 f872 	bl	800a3e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a2fc:	20c8      	movs	r0, #200	@ 0xc8
 800a2fe:	f7f6 ffcb 	bl	8001298 <HAL_Delay>
  return USBH_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
 800a318:	4613      	mov	r3, r2
 800a31a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a322:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a324:	78fa      	ldrb	r2, [r7, #3]
 800a326:	68f9      	ldr	r1, [r7, #12]
 800a328:	4613      	mov	r3, r2
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	1a9b      	subs	r3, r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	440b      	add	r3, r1
 800a332:	3317      	adds	r3, #23
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00a      	beq.n	800a350 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a33a:	78fa      	ldrb	r2, [r7, #3]
 800a33c:	68f9      	ldr	r1, [r7, #12]
 800a33e:	4613      	mov	r3, r2
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	1a9b      	subs	r3, r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	440b      	add	r3, r1
 800a348:	333c      	adds	r3, #60	@ 0x3c
 800a34a:	78ba      	ldrb	r2, [r7, #2]
 800a34c:	701a      	strb	r2, [r3, #0]
 800a34e:	e009      	b.n	800a364 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a350:	78fa      	ldrb	r2, [r7, #3]
 800a352:	68f9      	ldr	r1, [r7, #12]
 800a354:	4613      	mov	r3, r2
 800a356:	011b      	lsls	r3, r3, #4
 800a358:	1a9b      	subs	r3, r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	440b      	add	r3, r1
 800a35e:	333d      	adds	r3, #61	@ 0x3d
 800a360:	78ba      	ldrb	r2, [r7, #2]
 800a362:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7f6 ff8c 	bl	8001298 <HAL_Delay>
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d817      	bhi.n	800a3cc <USBH_Get_USB_Status+0x44>
 800a39c:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a4 <USBH_Get_USB_Status+0x1c>)
 800a39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a2:	bf00      	nop
 800a3a4:	0800a3b5 	.word	0x0800a3b5
 800a3a8:	0800a3bb 	.word	0x0800a3bb
 800a3ac:	0800a3c1 	.word	0x0800a3c1
 800a3b0:	0800a3c7 	.word	0x0800a3c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b8:	e00b      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a3be:	e008      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c4:	e005      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ca:	e002      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d0:	bf00      	nop
  }
  return usb_status;
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d102      	bne.n	800a3fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73fb      	strb	r3, [r7, #15]
 800a3f8:	e001      	b.n	800a3fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	461a      	mov	r2, r3
 800a402:	2101      	movs	r1, #1
 800a404:	4803      	ldr	r0, [pc, #12]	@ (800a414 <MX_DriverVbusFS+0x34>)
 800a406:	f7f7 fa19 	bl	800183c <HAL_GPIO_WritePin>
}
 800a40a:	bf00      	nop
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	40020800 	.word	0x40020800

0800a418 <malloc>:
 800a418:	4b02      	ldr	r3, [pc, #8]	@ (800a424 <malloc+0xc>)
 800a41a:	4601      	mov	r1, r0
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	f000 b82d 	b.w	800a47c <_malloc_r>
 800a422:	bf00      	nop
 800a424:	2000002c 	.word	0x2000002c

0800a428 <free>:
 800a428:	4b02      	ldr	r3, [pc, #8]	@ (800a434 <free+0xc>)
 800a42a:	4601      	mov	r1, r0
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	f000 b8f5 	b.w	800a61c <_free_r>
 800a432:	bf00      	nop
 800a434:	2000002c 	.word	0x2000002c

0800a438 <sbrk_aligned>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	4e0f      	ldr	r6, [pc, #60]	@ (800a478 <sbrk_aligned+0x40>)
 800a43c:	460c      	mov	r4, r1
 800a43e:	6831      	ldr	r1, [r6, #0]
 800a440:	4605      	mov	r5, r0
 800a442:	b911      	cbnz	r1, 800a44a <sbrk_aligned+0x12>
 800a444:	f000 f8ae 	bl	800a5a4 <_sbrk_r>
 800a448:	6030      	str	r0, [r6, #0]
 800a44a:	4621      	mov	r1, r4
 800a44c:	4628      	mov	r0, r5
 800a44e:	f000 f8a9 	bl	800a5a4 <_sbrk_r>
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	d103      	bne.n	800a45e <sbrk_aligned+0x26>
 800a456:	f04f 34ff 	mov.w	r4, #4294967295
 800a45a:	4620      	mov	r0, r4
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
 800a45e:	1cc4      	adds	r4, r0, #3
 800a460:	f024 0403 	bic.w	r4, r4, #3
 800a464:	42a0      	cmp	r0, r4
 800a466:	d0f8      	beq.n	800a45a <sbrk_aligned+0x22>
 800a468:	1a21      	subs	r1, r4, r0
 800a46a:	4628      	mov	r0, r5
 800a46c:	f000 f89a 	bl	800a5a4 <_sbrk_r>
 800a470:	3001      	adds	r0, #1
 800a472:	d1f2      	bne.n	800a45a <sbrk_aligned+0x22>
 800a474:	e7ef      	b.n	800a456 <sbrk_aligned+0x1e>
 800a476:	bf00      	nop
 800a478:	200009f4 	.word	0x200009f4

0800a47c <_malloc_r>:
 800a47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a480:	1ccd      	adds	r5, r1, #3
 800a482:	f025 0503 	bic.w	r5, r5, #3
 800a486:	3508      	adds	r5, #8
 800a488:	2d0c      	cmp	r5, #12
 800a48a:	bf38      	it	cc
 800a48c:	250c      	movcc	r5, #12
 800a48e:	2d00      	cmp	r5, #0
 800a490:	4606      	mov	r6, r0
 800a492:	db01      	blt.n	800a498 <_malloc_r+0x1c>
 800a494:	42a9      	cmp	r1, r5
 800a496:	d904      	bls.n	800a4a2 <_malloc_r+0x26>
 800a498:	230c      	movs	r3, #12
 800a49a:	6033      	str	r3, [r6, #0]
 800a49c:	2000      	movs	r0, #0
 800a49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a578 <_malloc_r+0xfc>
 800a4a6:	f000 f869 	bl	800a57c <__malloc_lock>
 800a4aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a4ae:	461c      	mov	r4, r3
 800a4b0:	bb44      	cbnz	r4, 800a504 <_malloc_r+0x88>
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7ff ffbf 	bl	800a438 <sbrk_aligned>
 800a4ba:	1c43      	adds	r3, r0, #1
 800a4bc:	4604      	mov	r4, r0
 800a4be:	d158      	bne.n	800a572 <_malloc_r+0xf6>
 800a4c0:	f8d8 4000 	ldr.w	r4, [r8]
 800a4c4:	4627      	mov	r7, r4
 800a4c6:	2f00      	cmp	r7, #0
 800a4c8:	d143      	bne.n	800a552 <_malloc_r+0xd6>
 800a4ca:	2c00      	cmp	r4, #0
 800a4cc:	d04b      	beq.n	800a566 <_malloc_r+0xea>
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	eb04 0903 	add.w	r9, r4, r3
 800a4d8:	f000 f864 	bl	800a5a4 <_sbrk_r>
 800a4dc:	4581      	cmp	r9, r0
 800a4de:	d142      	bne.n	800a566 <_malloc_r+0xea>
 800a4e0:	6821      	ldr	r1, [r4, #0]
 800a4e2:	1a6d      	subs	r5, r5, r1
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	f7ff ffa6 	bl	800a438 <sbrk_aligned>
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d03a      	beq.n	800a566 <_malloc_r+0xea>
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	442b      	add	r3, r5
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	bb62      	cbnz	r2, 800a558 <_malloc_r+0xdc>
 800a4fe:	f8c8 7000 	str.w	r7, [r8]
 800a502:	e00f      	b.n	800a524 <_malloc_r+0xa8>
 800a504:	6822      	ldr	r2, [r4, #0]
 800a506:	1b52      	subs	r2, r2, r5
 800a508:	d420      	bmi.n	800a54c <_malloc_r+0xd0>
 800a50a:	2a0b      	cmp	r2, #11
 800a50c:	d917      	bls.n	800a53e <_malloc_r+0xc2>
 800a50e:	1961      	adds	r1, r4, r5
 800a510:	42a3      	cmp	r3, r4
 800a512:	6025      	str	r5, [r4, #0]
 800a514:	bf18      	it	ne
 800a516:	6059      	strne	r1, [r3, #4]
 800a518:	6863      	ldr	r3, [r4, #4]
 800a51a:	bf08      	it	eq
 800a51c:	f8c8 1000 	streq.w	r1, [r8]
 800a520:	5162      	str	r2, [r4, r5]
 800a522:	604b      	str	r3, [r1, #4]
 800a524:	4630      	mov	r0, r6
 800a526:	f000 f82f 	bl	800a588 <__malloc_unlock>
 800a52a:	f104 000b 	add.w	r0, r4, #11
 800a52e:	1d23      	adds	r3, r4, #4
 800a530:	f020 0007 	bic.w	r0, r0, #7
 800a534:	1ac2      	subs	r2, r0, r3
 800a536:	bf1c      	itt	ne
 800a538:	1a1b      	subne	r3, r3, r0
 800a53a:	50a3      	strne	r3, [r4, r2]
 800a53c:	e7af      	b.n	800a49e <_malloc_r+0x22>
 800a53e:	6862      	ldr	r2, [r4, #4]
 800a540:	42a3      	cmp	r3, r4
 800a542:	bf0c      	ite	eq
 800a544:	f8c8 2000 	streq.w	r2, [r8]
 800a548:	605a      	strne	r2, [r3, #4]
 800a54a:	e7eb      	b.n	800a524 <_malloc_r+0xa8>
 800a54c:	4623      	mov	r3, r4
 800a54e:	6864      	ldr	r4, [r4, #4]
 800a550:	e7ae      	b.n	800a4b0 <_malloc_r+0x34>
 800a552:	463c      	mov	r4, r7
 800a554:	687f      	ldr	r7, [r7, #4]
 800a556:	e7b6      	b.n	800a4c6 <_malloc_r+0x4a>
 800a558:	461a      	mov	r2, r3
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	42a3      	cmp	r3, r4
 800a55e:	d1fb      	bne.n	800a558 <_malloc_r+0xdc>
 800a560:	2300      	movs	r3, #0
 800a562:	6053      	str	r3, [r2, #4]
 800a564:	e7de      	b.n	800a524 <_malloc_r+0xa8>
 800a566:	230c      	movs	r3, #12
 800a568:	6033      	str	r3, [r6, #0]
 800a56a:	4630      	mov	r0, r6
 800a56c:	f000 f80c 	bl	800a588 <__malloc_unlock>
 800a570:	e794      	b.n	800a49c <_malloc_r+0x20>
 800a572:	6005      	str	r5, [r0, #0]
 800a574:	e7d6      	b.n	800a524 <_malloc_r+0xa8>
 800a576:	bf00      	nop
 800a578:	200009f8 	.word	0x200009f8

0800a57c <__malloc_lock>:
 800a57c:	4801      	ldr	r0, [pc, #4]	@ (800a584 <__malloc_lock+0x8>)
 800a57e:	f000 b84b 	b.w	800a618 <__retarget_lock_acquire_recursive>
 800a582:	bf00      	nop
 800a584:	20000b38 	.word	0x20000b38

0800a588 <__malloc_unlock>:
 800a588:	4801      	ldr	r0, [pc, #4]	@ (800a590 <__malloc_unlock+0x8>)
 800a58a:	f000 b846 	b.w	800a61a <__retarget_lock_release_recursive>
 800a58e:	bf00      	nop
 800a590:	20000b38 	.word	0x20000b38

0800a594 <memset>:
 800a594:	4402      	add	r2, r0
 800a596:	4603      	mov	r3, r0
 800a598:	4293      	cmp	r3, r2
 800a59a:	d100      	bne.n	800a59e <memset+0xa>
 800a59c:	4770      	bx	lr
 800a59e:	f803 1b01 	strb.w	r1, [r3], #1
 800a5a2:	e7f9      	b.n	800a598 <memset+0x4>

0800a5a4 <_sbrk_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d06      	ldr	r5, [pc, #24]	@ (800a5c0 <_sbrk_r+0x1c>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	602b      	str	r3, [r5, #0]
 800a5b0:	f7f6 fd8e 	bl	80010d0 <_sbrk>
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	d102      	bne.n	800a5be <_sbrk_r+0x1a>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	b103      	cbz	r3, 800a5be <_sbrk_r+0x1a>
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	20000b34 	.word	0x20000b34

0800a5c4 <__errno>:
 800a5c4:	4b01      	ldr	r3, [pc, #4]	@ (800a5cc <__errno+0x8>)
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	2000002c 	.word	0x2000002c

0800a5d0 <__libc_init_array>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	4d0d      	ldr	r5, [pc, #52]	@ (800a608 <__libc_init_array+0x38>)
 800a5d4:	4c0d      	ldr	r4, [pc, #52]	@ (800a60c <__libc_init_array+0x3c>)
 800a5d6:	1b64      	subs	r4, r4, r5
 800a5d8:	10a4      	asrs	r4, r4, #2
 800a5da:	2600      	movs	r6, #0
 800a5dc:	42a6      	cmp	r6, r4
 800a5de:	d109      	bne.n	800a5f4 <__libc_init_array+0x24>
 800a5e0:	4d0b      	ldr	r5, [pc, #44]	@ (800a610 <__libc_init_array+0x40>)
 800a5e2:	4c0c      	ldr	r4, [pc, #48]	@ (800a614 <__libc_init_array+0x44>)
 800a5e4:	f000 f864 	bl	800a6b0 <_init>
 800a5e8:	1b64      	subs	r4, r4, r5
 800a5ea:	10a4      	asrs	r4, r4, #2
 800a5ec:	2600      	movs	r6, #0
 800a5ee:	42a6      	cmp	r6, r4
 800a5f0:	d105      	bne.n	800a5fe <__libc_init_array+0x2e>
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f8:	4798      	blx	r3
 800a5fa:	3601      	adds	r6, #1
 800a5fc:	e7ee      	b.n	800a5dc <__libc_init_array+0xc>
 800a5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a602:	4798      	blx	r3
 800a604:	3601      	adds	r6, #1
 800a606:	e7f2      	b.n	800a5ee <__libc_init_array+0x1e>
 800a608:	0800a6ec 	.word	0x0800a6ec
 800a60c:	0800a6ec 	.word	0x0800a6ec
 800a610:	0800a6ec 	.word	0x0800a6ec
 800a614:	0800a6f0 	.word	0x0800a6f0

0800a618 <__retarget_lock_acquire_recursive>:
 800a618:	4770      	bx	lr

0800a61a <__retarget_lock_release_recursive>:
 800a61a:	4770      	bx	lr

0800a61c <_free_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4605      	mov	r5, r0
 800a620:	2900      	cmp	r1, #0
 800a622:	d041      	beq.n	800a6a8 <_free_r+0x8c>
 800a624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a628:	1f0c      	subs	r4, r1, #4
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	bfb8      	it	lt
 800a62e:	18e4      	addlt	r4, r4, r3
 800a630:	f7ff ffa4 	bl	800a57c <__malloc_lock>
 800a634:	4a1d      	ldr	r2, [pc, #116]	@ (800a6ac <_free_r+0x90>)
 800a636:	6813      	ldr	r3, [r2, #0]
 800a638:	b933      	cbnz	r3, 800a648 <_free_r+0x2c>
 800a63a:	6063      	str	r3, [r4, #4]
 800a63c:	6014      	str	r4, [r2, #0]
 800a63e:	4628      	mov	r0, r5
 800a640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a644:	f7ff bfa0 	b.w	800a588 <__malloc_unlock>
 800a648:	42a3      	cmp	r3, r4
 800a64a:	d908      	bls.n	800a65e <_free_r+0x42>
 800a64c:	6820      	ldr	r0, [r4, #0]
 800a64e:	1821      	adds	r1, r4, r0
 800a650:	428b      	cmp	r3, r1
 800a652:	bf01      	itttt	eq
 800a654:	6819      	ldreq	r1, [r3, #0]
 800a656:	685b      	ldreq	r3, [r3, #4]
 800a658:	1809      	addeq	r1, r1, r0
 800a65a:	6021      	streq	r1, [r4, #0]
 800a65c:	e7ed      	b.n	800a63a <_free_r+0x1e>
 800a65e:	461a      	mov	r2, r3
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	b10b      	cbz	r3, 800a668 <_free_r+0x4c>
 800a664:	42a3      	cmp	r3, r4
 800a666:	d9fa      	bls.n	800a65e <_free_r+0x42>
 800a668:	6811      	ldr	r1, [r2, #0]
 800a66a:	1850      	adds	r0, r2, r1
 800a66c:	42a0      	cmp	r0, r4
 800a66e:	d10b      	bne.n	800a688 <_free_r+0x6c>
 800a670:	6820      	ldr	r0, [r4, #0]
 800a672:	4401      	add	r1, r0
 800a674:	1850      	adds	r0, r2, r1
 800a676:	4283      	cmp	r3, r0
 800a678:	6011      	str	r1, [r2, #0]
 800a67a:	d1e0      	bne.n	800a63e <_free_r+0x22>
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	6053      	str	r3, [r2, #4]
 800a682:	4408      	add	r0, r1
 800a684:	6010      	str	r0, [r2, #0]
 800a686:	e7da      	b.n	800a63e <_free_r+0x22>
 800a688:	d902      	bls.n	800a690 <_free_r+0x74>
 800a68a:	230c      	movs	r3, #12
 800a68c:	602b      	str	r3, [r5, #0]
 800a68e:	e7d6      	b.n	800a63e <_free_r+0x22>
 800a690:	6820      	ldr	r0, [r4, #0]
 800a692:	1821      	adds	r1, r4, r0
 800a694:	428b      	cmp	r3, r1
 800a696:	bf04      	itt	eq
 800a698:	6819      	ldreq	r1, [r3, #0]
 800a69a:	685b      	ldreq	r3, [r3, #4]
 800a69c:	6063      	str	r3, [r4, #4]
 800a69e:	bf04      	itt	eq
 800a6a0:	1809      	addeq	r1, r1, r0
 800a6a2:	6021      	streq	r1, [r4, #0]
 800a6a4:	6054      	str	r4, [r2, #4]
 800a6a6:	e7ca      	b.n	800a63e <_free_r+0x22>
 800a6a8:	bd38      	pop	{r3, r4, r5, pc}
 800a6aa:	bf00      	nop
 800a6ac:	200009f8 	.word	0x200009f8

0800a6b0 <_init>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	bf00      	nop
 800a6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b6:	bc08      	pop	{r3}
 800a6b8:	469e      	mov	lr, r3
 800a6ba:	4770      	bx	lr

0800a6bc <_fini>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	bf00      	nop
 800a6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c2:	bc08      	pop	{r3}
 800a6c4:	469e      	mov	lr, r3
 800a6c6:	4770      	bx	lr
